# -*- coding: utf-8 -*-
"""DevsclashModelTranining.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PVqXBUdb2MWEGtsjJqCc4sEpLh3m31I_
"""

!pip install gradientai --upgrade

import os
os.environ['GRADIENT_WORKSPACE_ID']="85792132-d70f-468e-944d-c448c2e11e77_workspace"
os.environ["GRADIENT_ACCESS_TOKEN"]="uXjFzYpmh9Un7EME2JJ5voNT6DT07XsL"

from gradientai import Gradient
def main():
  gradient=Gradient()
  base_model = gradient.get_base_model(base_model_slug="nous-hermes2")
  new_model_adapter = base_model.create_model_adapter(name="DEVSCLASH")
  sample_query="Genreate a DSA question for topic:array with difficulty: easy"
  print(f"Created model adapter with id {new_model_adapter.id}")
  sample=[{'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a string num, which represents a large integer. You are also given a 0-indexed integer array change of length 10 that maps each digit 0-9 to another digit. More formally, digit d maps to digit change[d].\nYou may choose to mutate a single substring of num. To mutate a substring, replace each digit num[i] with the digit it maps to in change (i.e. replace num[i] with change[num[i]]).\nReturn a string representing the largest possible integer after mutating (or choosing not to) a single substring of num.\nA substring is a contiguous sequence of characters within the string.<strong class="example">Example 1:\nInput: num = 132, change = [9,8,5,0,3,6,4,2,6,8]\nOutput: 832\nExplanation: Replace the substring 1:\n- 1 maps to change[1] = 8.\nThus, 132 becomes 832.\n832 is the largest number that can be created, so return it.\n<strong class="example">Example 2:\nInput: num = 021, change = [9,4,3,5,7,2,1,9,0,6]\nOutput: 934\nExplanation: Replace the substring 021:\n- 0 maps to change[0] = 9.\n- 2 maps to change[2] = 3.\n- 1 maps to change[1] = 4.\nThus, 021 becomes 934.\n934 is the largest number that can be created, so return it.\n<strong class="example">Example 3:\nInput: num = 5, change = [1,4,7,5,3,2,5,6,9,4]\nOutput: 5\nExplanation: 5 is already the largest number that can be created, so return it.\nConstraints:\n<ul>\n\t<li>1 &lt;= num.length &lt;= 10<sup>5</sup></li>\n\t<li>num consists of only digits 0-9.</li>\n\t<li>change.length == 10</li>\n\t<li>0 &lt;= change[d] &lt;= 9</li>\n</ul>\n\n"test_case": [\n  "132"\n[9,8,5,0,3,6,4,2,6,8]\n  "021"\n[9,4,3,5,7,2,1,9,0,6]\n  "5"\n[1,4,7,5,3,2,5,6,9,4]\n],\n"test_case_output": [\'832\', \'934\', \'5\'],\n"test_case_explanation": [\n  "Replace the substring 1:\n- 1 maps to change[1] = 8.\nThus, 132 becomes 832.\n832 is the largest number that can be created, so return it.\n"\n\n  "Replace the substring 021:\n- 0 maps to change[0] = 9.\n- 2 maps to change[2] = 3.\n- 1 maps to change[1] = 4.\nThus, 021 becomes 934.\n934 is the largest number that can be created, so return it.\n"\n\n  "5 is already the largest number that can be created, so return it.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a string s consisting of lowercase English letters, and an integer k.\nFirst, convert s into an integer by replacing each letter with its position in the alphabet (i.e., replace &#39;a&#39; with 1, &#39;b&#39; with 2, ..., &#39;z&#39; with 26). Then, transform the integer by replacing it with the sum of its digits. Repeat the transform operation k times in total.\nFor example, if s = zbax and k = 2, then the resulting integer would be 8 by the following operations:\n<ul>\n\t<li>Convert: zbax ➝ (26)(2)(1)(24) ➝ 262124 ➝ 262124</li>\n\t<li>Transform #1: 262124 ➝ 2 + 6 + 2 + 1 + 2 + 4➝ 17</li>\n\t<li>Transform #2: 17 ➝ 1 + 7 ➝ 8</li>\n</ul>\nReturn the resulting integer after performing the operations described above.<strong class="example">Example 1:\nInput: s = iiii, k = 1\nOutput: 36\nExplanation: The operations are as follows:\n- Convert: iiii ➝ (9)(9)(9)(9) ➝ 9999 ➝ 9999\n- Transform #1: 9999 ➝ 9 + 9 + 9 + 9 ➝ 36\nThus the resulting integer is 36.\n<strong class="example">Example 2:\nInput: s = leetcode, k = 2\nOutput: 6\nExplanation: The operations are as follows:\n- Convert: leetcode ➝ (12)(5)(5)(20)(3)(15)(4)(5) ➝ 12552031545 ➝ 12552031545\n- Transform #1: 12552031545 ➝ 1 + 2 + 5 + 5 + 2 + 0 + 3 + 1 + 5 + 4 + 5 ➝ 33\n- Transform #2: 33 ➝ 3 + 3 ➝ 6\nThus the resulting integer is 6.\n<strong class="example">Example 3:\nInput: s = zbax, k = 2\nOutput: 8\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 100</li>\n\t<li>1 &lt;= k &lt;= 10</li>\n\t<li>s consists of lowercase English letters.</li>\n</ul>\n\n"test_case": [\n  "iiii"\n1\n  "leetcode"\n2\n  "zbax"\n2\n],\n"test_case_output": [\'36\', \'6\', \'8\'],\n"test_case_explanation": [\n  "The operations are as follows:\n- Convert: iiii ➝ (9)(9)(9)(9) ➝ 9999 ➝ 9999\n- Transform #1: 9999 ➝ 9 + 9 + 9 + 9 ➝ 36\nThus the resulting integer is 36.\n"\n\n  "The operations are as follows:\n- Convert: leetcode ➝ (12)(5)(5)(20)(3)(15)(4)(5) ➝ 12552031545 ➝ 12552031545\n- Transform #1: 12552031545 ➝ 1 + 2 + 5 + 5 + 2 + 0 + 3 + 1 + 5 + 4 + 5 ➝ 33\n- Transform #2: 33 ➝ 3 + 3 ➝ 6\nThus the resulting integer is 6.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThere is a malfunctioning keyboard where some letter keys do not work. All other keys on the keyboard work properly.\nGiven a string text of words separated by a single space (no leading or trailing spaces) and a string brokenLetters of all distinct letter keys that are broken, return the number of words in text you can fully type using this keyboard.<strong class="example">Example 1:\nInput: text = hello world, brokenLetters = ad\nOutput: 1\nExplanation: We cannot type world because the &#39;d&#39; key is broken.\n<strong class="example">Example 2:\nInput: text = leet code, brokenLetters = lt\nOutput: 1\nExplanation: We cannot type leet because the &#39;l&#39; and &#39;t&#39; keys are broken.\n<strong class="example">Example 3:\nInput: text = leet code, brokenLetters = e\nOutput: 0\nExplanation: We cannot type either word because the &#39;e&#39; key is broken.\nConstraints:\n<ul>\n\t<li>1 &lt;= text.length &lt;= 10<sup>4</sup></li>\n\t<li>0 &lt;= brokenLetters.length &lt;= 26</li>\n\t<li>text consists of words separated by a single space without any leading or trailing spaces.</li>\n\t<li>Each word only consists of lowercase English letters.</li>\n\t<li>brokenLetters consists of distinct lowercase English letters.</li>\n</ul>\n\n"test_case": [\n  "hello world"\n"ad"\n  "leet code"\n"lt"\n  "leet code"\n"e"\n],\n"test_case_output": [\'1\', \'1\', \'0\'],\n"test_case_explanation": [\n  "We cannot type world because the &#39;d&#39; key is broken.\n"\n\n  "We cannot type leet because the &#39;l&#39; and &#39;t&#39; keys are broken.\n"\n\n  "We cannot type either word because the &#39;e&#39; key is broken.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given two identical eggs and you have access to a building with n floors labeled from 1 to n.\nYou know that there exists a floor f where 0 &lt;= f &lt;= n such that any egg dropped at a floor higher than f will break, and any egg dropped at or below floor f will not break.\nIn each move, you may take an unbroken egg and drop it from any floor x (where 1 &lt;= x &lt;= n). If the egg breaks, you can no longer use it. However, if the egg does not break, you may reuse it in future moves.\nReturn the minimum number of moves that you need to determine with certainty what the value of f is.<strong class="example">Example 1:\nInput: n = 2\nOutput: 2\nExplanation: We can drop the first egg from floor 1 and the second egg from floor 2.\nIf the first egg breaks, we know that f = 0.\nIf the second egg breaks but the first egg didn&#39;t, we know that f = 1.\nOtherwise, if both eggs survive, we know that f = 2.\n<strong class="example">Example 2:\nInput: n = 100\nOutput: 14\nExplanation: One optimal strategy is:\n- Drop the 1st egg at floor 9. If it breaks, we know f is between 0 and 8. Drop the 2nd egg starting from floor 1 and going up one at a time to find f within 8 more drops. Total drops is 1 + 8 = 9.\n- If the 1st egg does not break, drop the 1st egg again at floor 22. If it breaks, we know f is between 9 and 21. Drop the 2nd egg starting from floor 10 and going up one at a time to find f within 12 more drops. Total drops is 2 + 12 = 14.\n- If the 1st egg does not break again, follow a similar process dropping the 1st egg from floors 34, 45, 55, 64, 72, 79, 85, 90, 94, 97, 99, and 100.\nRegardless of the outcome, it takes at most 14 drops to determine f.\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  2\n  100\n],\n"test_case_output": [\'2\', \'14\'],\n"test_case_explanation": [\n  "We can drop the first egg from floor 1 and the second egg from floor 2.\nIf the first egg breaks, we know that f = 0.\nIf the second egg breaks but the first egg didn&#39;t, we know that f = 1.\nOtherwise, if both eggs survive, we know that f = 2.\n"\n\n  "One optimal strategy is:\n- Drop the 1st egg at floor 9. If it breaks, we know f is between 0 and 8. Drop the 2nd egg starting from floor 1 and going up one at a time to find f within 8 more drops. Total drops is 1 + 8 = 9.\n- If the 1st egg does not break, drop the 1st egg again at floor 22. If it breaks, we know f is between 9 and 21. Drop the 2nd egg starting from floor 10 and going up one at a time to find f within 12 more drops. Total drops is 2 + 12 = 14.\n- If the 1st egg does not break again, follow a similar process dropping the 1st egg from floors 34, 45, 55, 64, 72, 79, 85, 90, 94, 97, 99, and 100.\nRegardless of the outcome, it takes at most 14 drops to determine f.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given two 0-indexed integer arrays servers and tasks of lengths n\u200b\u200b\u200b\u200b\u200b\u200b and m\u200b\u200b\u200b\u200b\u200b\u200b respectively. servers[i] is the weight of the i<sup>\u200b\u200b\u200b\u200b\u200b\u200bth</sup>\u200b\u200b\u200b\u200b server, and tasks[j] is the time needed to process the j<sup>\u200b\u200b\u200b\u200b\u200b\u200bth</sup>\u200b\u200b\u200b\u200b task in seconds.\nTasks are assigned to the servers using a task queue. Initially, all servers are free, and the queue is empty.\nAt second j, the j<sup>th</sup> task is inserted into the queue (starting with the 0<sup>th</sup> task being inserted at second 0). As long as there are free servers and the queue is not empty, the task in the front of the queue will be assigned to a free server with the smallest weight, and in case of a tie, it is assigned to a free server with the smallest index.\nIf there are no free servers and the queue is not empty, we wait until a server becomes free and immediately assign the next task. If multiple servers become free at the same time, then multiple tasks from the queue will be assigned in order of insertion following the weight and index priorities above.\nA server that is assigned task j at second t will be free again at second t + tasks[j].\nBuild an array ans\u200b\u200b\u200b\u200b of length m, where ans[j] is the index of the server the j<sup>\u200b\u200b\u200b\u200b\u200b\u200bth</sup> task will be assigned to.\nReturn the array ans\u200b\u200b\u200b\u200b.<strong class="example">Example 1:\nInput: servers = [3,3,2], tasks = [1,2,3,2,1,2]\nOutput: [2,2,0,2,1,2]\nExplanation: Events in chronological order go as follows:\n- At second 0, task 0 is added and processed using server 2 until second 1.\n- At second 1, server 2 becomes free. Task 1 is added and processed using server 2 until second 3.\n- At second 2, task 2 is added and processed using server 0 until second 5.\n- At second 3, server 2 becomes free. Task 3 is added and processed using server 2 until second 5.\n- At second 4, task 4 is added and processed using server 1 until second 5.\n- At second 5, all servers become free. Task 5 is added and processed using server 2 until second 7.\n<strong class="example">Example 2:\nInput: servers = [5,1,4,3,2], tasks = [2,1,2,4,5,2,1]\nOutput: [1,4,1,4,1,3,2]\nExplanation: Events in chronological order go as follows: \n- At second 0, task 0 is added and processed using server 1 until second 2.\n- At second 1, task 1 is added and processed using server 4 until second 2.\n- At second 2, servers 1 and 4 become free. Task 2 is added and processed using server 1 until second 4. \n- At second 3, task 3 is added and processed using server 4 until second 7.\n- At second 4, server 1 becomes free. Task 4 is added and processed using server 1 until second 9. \n- At second 5, task 5 is added and processed using server 3 until second 7.\n- At second 6, task 6 is added and processed using server 2 until second 7.\nConstraints:\n<ul>\n\t<li>servers.length == n</li>\n\t<li>tasks.length == m</li>\n\t<li>1 &lt;= n, m &lt;= 2 * 10<sup>5</sup></li>\n\t<li>1 &lt;= servers[i], tasks[j] &lt;= 2 * 10<sup>5</sup></li>\n</ul>\n\n"test_case": [\n  [3,3,2]\n[1,2,3,2,1,2]\n  [5,1,4,3,2]\n[2,1,2,4,5,2,1]\n],\n"test_case_output": [\'[2,2,0,2,1,2]\', \'[1,4,1,4,1,3,2]\'],\n"test_case_explanation": [\n  "Events in chronological order go as follows:\n- At second 0, task 0 is added and processed using server 2 until second 1.\n- At second 1, server 2 becomes free. Task 1 is added and processed using server 2 until second 3.\n- At second 2, task 2 is added and processed using server 0 until second 5.\n- At second 3, server 2 becomes free. Task 3 is added and processed using server 2 until second 5.\n- At second 4, task 4 is added and processed using server 1 until second 5.\n- At second 5, all servers become free. Task 5 is added and processed using server 2 until second 7.\n"\n\n  "Events in chronological order go as follows: \n- At second 0, task 0 is added and processed using server 1 until second 2.\n- At second 1, task 1 is added and processed using server 4 until second 2.\n- At second 2, servers 1 and 4 become free. Task 2 is added and processed using server 1 until second 4. \n- At second 3, task 3 is added and processed using server 4 until second 7.\n- At second 4, server 1 becomes free. Task 4 is added and processed using server 1 until second 9. \n- At second 5, task 5 is added and processed using server 3 until second 7.\n- At second 6, task 6 is added and processed using server 2 until second 7.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a very large integer n, represented as a string,\u200b\u200b\u200b\u200b\u200b\u200b and an integer digit x. The digits in n and the digit x are in the inclusive range [1, 9], and n may represent a negative number.\nYou want to maximize n&#39;s numerical value by inserting x anywhere in the decimal representation of n\u200b\u200b\u200b\u200b\u200b\u200b. You cannot insert x to the left of the negative sign.\n<ul>\n\t<li>For example, if n = 73 and x = 6, it would be best to insert it between 7 and 3, making n = 763.</li>\n\t<li>If n = -55 and x = 2, it would be best to insert it before the first 5, making n = -255.</li>\n</ul>\nReturn a string representing the maximum value of n\u200b\u200b\u200b\u200b\u200b\u200b after the insertion.<strong class="example">Example 1:\nInput: n = 99, x = 9\nOutput: 999\nExplanation: The result is the same regardless of where you insert 9.\n<strong class="example">Example 2:\nInput: n = -13, x = 2\nOutput: -123\nExplanation: You can make n one of {-213, -123, -132}, and the largest of those three is -123.\nConstraints:\n<ul>\n\t<li>1 &lt;= n.length &lt;= 10<sup>5</sup></li>\n\t<li>1 &lt;= x &lt;= 9</li>\n\t<li>The digits in n\u200b\u200b\u200b are in the range [1, 9].</li>\n\t<li>n is a valid representation of an integer.</li>\n\t<li>In the case of a negative n,\u200b\u200b\u200b\u200b\u200b\u200b it will begin with &#39;-&#39;.</li>\n</ul>\n\n"test_case": [\n  "99"\n9\n  "-13"\n2\n],\n"test_case_output": [\'999\', \'-123\'],\n"test_case_explanation": [\n  "The result is the same regardless of where you insert 9.\n"\n\n  "You can make n one of {-213, -123, -132}, and the largest of those three is -123.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThe letter value of a letter is its position in the alphabet starting from 0 (i.e. &#39;a&#39; -&gt; 0, &#39;b&#39; -&gt; 1, &#39;c&#39; -&gt; 2, etc.).\nThe numerical value of some string of lowercase English letters s is the concatenation of the letter values of each letter in s, which is then converted into an integer.\n<ul>\n\t<li>For example, if s = acb, we concatenate each letter&#39;s letter value, resulting in 021. After converting it, we get 21.</li>\n</ul>\nYou are given three strings firstWord, secondWord, and targetWord, each consisting of lowercase English letters &#39;a&#39; through &#39;j&#39; inclusive.\nReturn true if the summation of the numerical values of firstWord and secondWord equals the numerical value of targetWord, or false otherwise.<strong class="example">Example 1:\nInput: firstWord = acb, secondWord = cba, targetWord = cdb\nOutput: true\nExplanation:\nThe numerical value of firstWord is acb -&gt; 021 -&gt; 21.\nThe numerical value of secondWord is cba -&gt; 210 -&gt; 210.\nThe numerical value of targetWord is cdb -&gt; 231 -&gt; 231.\nWe return true because 21 + 210 == 231.\n<strong class="example">Example 2:\nInput: firstWord = aaa, secondWord = a, targetWord = aab\nOutput: false\nExplanation: \nThe numerical value of firstWord is aaa -&gt; 000 -&gt; 0.\nThe numerical value of secondWord is a -&gt; 0 -&gt; 0.\nThe numerical value of targetWord is aab -&gt; 001 -&gt; 1.\nWe return false because 0 + 0 != 1.\n<strong class="example">Example 3:\nInput: firstWord = aaa, secondWord = a, targetWord = aaaa\nOutput: true\nExplanation: \nThe numerical value of firstWord is aaa -&gt; 000 -&gt; 0.\nThe numerical value of secondWord is a -&gt; 0 -&gt; 0.\nThe numerical value of targetWord is aaaa -&gt; 0000 -&gt; 0.\nWe return true because 0 + 0 == 0.\nConstraints:\n<ul>\n\t<li>1 &lt;= firstWord.length, secondWord.length, targetWord.length &lt;= 8</li>\n\t<li>firstWord, secondWord, and targetWord consist of lowercase English letters from &#39;a&#39; to &#39;j&#39; inclusive.</li>\n</ul>\n\n"test_case": [\n  "acb"\n"cba"\n"cdb"\n  "aaa"\n"a"\n"aab"\n  "aaa"\n"a"\n"aaaa"\n],\n"test_case_output": [\'true\', \'false\', \'true\'],\n"test_case_explanation": [\n  "The numerical value of firstWord is acb -&gt; 021 -&gt; 21.\nThe numerical value of secondWord is cba -&gt; 210 -&gt; 210.\nThe numerical value of targetWord is cdb -&gt; 231 -&gt; 231.\nWe return true because 21 + 210 == 231.\n"\n\n  "The numerical value of firstWord is aaa -&gt; 000 -&gt; 0.\nThe numerical value of secondWord is a -&gt; 0 -&gt; 0.\nThe numerical value of targetWord is aab -&gt; 001 -&gt; 1.\nWe return false because 0 + 0 != 1.\n"\n\n  "The numerical value of firstWord is aaa -&gt; 000 -&gt; 0.\nThe numerical value of secondWord is a -&gt; 0 -&gt; 0.\nThe numerical value of targetWord is aaaa -&gt; 0000 -&gt; 0.\nWe return true because 0 + 0 == 0.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThe pair sum of a pair (a,b) is equal to a + b. The maximum pair sum is the largest pair sum in a list of pairs.\r\n\r\n<ul>\r\n\t<li>For example, if we have pairs (1,5), (2,3), and (4,4), the maximum pair sum would be max(1+5, 2+3, 4+4) = max(6, 5, 8) = 8.</li>\r\n</ul>\r\n\r\nGiven an array nums of even length n, pair up the elements of nums into n / 2 pairs such that:\r\n\r\n<ul>\r\n\t<li>Each element of nums is in exactly one pair, and</li>\r\n\t<li>The maximum pair sum is minimized.</li>\r\n</ul>\r\n\r\nReturn the minimized maximum pair sum after optimally pairing up the elements.\r\n\r\n\r\n<strong class="example">Example 1:\r\n\r\n\r\nInput: nums = [3,5,2,3]\r\nOutput: 7\r\nExplanation: The elements can be paired up into pairs (3,3) and (5,2).\r\nThe maximum pair sum is max(3+3, 5+2) = max(6, 7) = 7.\r\n\r\n\r\n<strong class="example">Example 2:\r\n\r\n\r\nInput: nums = [3,5,4,2,4,6]\r\nOutput: 8\r\nExplanation: The elements can be paired up into pairs (3,5), (4,4), and (6,2).\r\nThe maximum pair sum is max(3+5, 4+4, 6+2) = max(8, 8, 8) = 8.\r\n\r\n\r\n\r\nConstraints:\r\n\r\n<ul>\r\n\t<li>n == nums.length</li>\r\n\t<li>2 &lt;= n &lt;= 10<sup>5</sup></li>\r\n\t<li>n is even.</li>\r\n\t<li>1 &lt;= nums[i] &lt;= 10<sup>5</sup></li>\r\n</ul>\n"test_case": [\n  [3,5,2,3]\n  [3,5,4,2,4,6]\n],\n"test_case_output": [\'7\\r\', \'8\\r\'],\n"test_case_explanation": [\n  "The elements can be paired up into pairs (3,3) and (5,2).\r\nThe maximum pair sum is max(3+3, 5+2) = max(6, 7) = 7.\r\n\r\n\r\n"\n\n  "The elements can be paired up into pairs (3,5), (4,4), and (6,2).\r\nThe maximum pair sum is max(3+5, 4+4, 6+2) = max(8, 8, 8) = 8.\r\n\r\n\r\n\r\nConstraints:\r\n\r\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a 0-indexed binary string s and two integers minJump and maxJump. In the beginning, you are standing at index 0, which is equal to &#39;0&#39;. You can move from index i to index j if the following conditions are fulfilled:\n<ul>\n\t<li>i + minJump &lt;= j &lt;= min(i + maxJump, s.length - 1), and</li>\n\t<li>s[j] == &#39;0&#39;.</li>\n</ul>\nReturn true<i> if you can reach index </i>s.length - 1<i> in </i>s, or false otherwise.<strong class="example">Example 1:\nInput: s = 011010, minJump = 2, maxJump = 3\nOutput: true\nExplanation:\nIn the first step, move from index 0 to index 3. \nIn the second step, move from index 3 to index 5.\n<strong class="example">Example 2:\nInput: s = 01101110, minJump = 2, maxJump = 3\nOutput: false\nConstraints:\n<ul>\n\t<li>2 &lt;= s.length &lt;= 10<sup>5</sup></li>\n\t<li>s[i] is either &#39;0&#39; or &#39;1&#39;.</li>\n\t<li>s[0] == &#39;0&#39;</li>\n\t<li>1 &lt;= minJump &lt;= maxJump &lt; s.length</li>\n</ul>\n\n"test_case": [\n  "011010"\n2\n3\n  "01101110"\n2\n3\n],\n"test_case_output": [\'true\', \'false\'],\n"test_case_explanation": [\n  "In the first step, move from index 0 to index 3. \nIn the second step, move from index 3 to index 5.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a floating-point number hour, representing the amount of time you have to reach the office. To commute to the office, you must take n trains in sequential order. You are also given an integer array dist of length n, where dist[i] describes the distance (in kilometers) of the i<sup>th</sup> train ride.\nEach train can only depart at an integer hour, so you may need to wait in between each train ride.\n<ul>\n\t<li>For example, if the 1<sup>st</sup> train ride takes 1.5 hours, you must wait for an additional 0.5 hours before you can depart on the 2<sup>nd</sup> train ride at the 2 hour mark.</li>\n</ul>\nReturn the minimum positive integer speed (in kilometers per hour) that all the trains must travel at for you to reach the office on time, or -1 if it is impossible to be on time.\nTests are generated such that the answer will not exceed 10<sup>7</sup> and hour will have at most two digits after the decimal point.<strong class="example">Example 1:\nInput: dist = [1,3,2], hour = 6\nOutput: 1\nExplanation: At speed 1:\n- The first train ride takes 1/1 = 1 hour.\n- Since we are already at an integer hour, we depart immediately at the 1 hour mark. The second train takes 3/1 = 3 hours.\n- Since we are already at an integer hour, we depart immediately at the 4 hour mark. The third train takes 2/1 = 2 hours.\n- You will arrive at exactly the 6 hour mark.\n<strong class="example">Example 2:\nInput: dist = [1,3,2], hour = 2.7\nOutput: 3\nExplanation: At speed 3:\n- The first train ride takes 1/3 = 0.33333 hours.\n- Since we are not at an integer hour, we wait until the 1 hour mark to depart. The second train ride takes 3/3 = 1 hour.\n- Since we are already at an integer hour, we depart immediately at the 2 hour mark. The third train takes 2/3 = 0.66667 hours.\n- You will arrive at the 2.66667 hour mark.\n<strong class="example">Example 3:\nInput: dist = [1,3,2], hour = 1.9\nOutput: -1\nExplanation: It is impossible because the earliest the third train can depart is at the 2 hour mark.\nConstraints:\n<ul>\n\t<li>n == dist.length</li>\n\t<li>1 &lt;= n &lt;= 10<sup>5</sup></li>\n\t<li>1 &lt;= dist[i] &lt;= 10<sup>5</sup></li>\n\t<li>1 &lt;= hour &lt;= 10<sup>9</sup></li>\n\t<li>There will be at most two digits after the decimal point in hour.</li>\n</ul>\n\n"test_case": [\n  [1,3,2]\n6\n  [1,3,2]\n2.7\n  [1,3,2]\n1.9\n],\n"test_case_output": [\'1\', \'3\', \'-1\'],\n"test_case_explanation": [\n  "At speed 1:\n- The first train ride takes 1/1 = 1 hour.\n- Since we are already at an integer hour, we depart immediately at the 1 hour mark. The second train takes 3/1 = 3 hours.\n- Since we are already at an integer hour, we depart immediately at the 4 hour mark. The third train takes 2/1 = 2 hours.\n- You will arrive at exactly the 6 hour mark.\n"\n\n  "At speed 3:\n- The first train ride takes 1/3 = 0.33333 hours.\n- Since we are not at an integer hour, we wait until the 1 hour mark to depart. The second train ride takes 3/3 = 1 hour.\n- Since we are already at an integer hour, we depart immediately at the 2 hour mark. The third train takes 2/3 = 0.66667 hours.\n- You will arrive at the 2.66667 hour mark.\n"\n\n  "It is impossible because the earliest the third train can depart is at the 2 hour mark.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a binary string s, return true if the longest contiguous segment of 1&#39;s is strictly longer than the longest contiguous segment of 0&#39;s in s, or return false otherwise.\n<ul>\n\t<li>For example, in s = 110100010 the longest continuous segment of 1s has length 2, and the longest continuous segment of 0s has length 3.</li>\n</ul>\nNote that if there are no 0&#39;s, then the longest continuous segment of 0&#39;s is considered to have a length 0. The same applies if there is no 1&#39;s.<strong class="example">Example 1:\nInput: s = 1101\nOutput: true\nExplanation:\nThe longest contiguous segment of 1s has length 2: 1101\nThe longest contiguous segment of 0s has length 1: 1101\nThe segment of 1s is longer, so return true.\n<strong class="example">Example 2:\nInput: s = 111000\nOutput: false\nExplanation:\nThe longest contiguous segment of 1s has length 3: 111000\nThe longest contiguous segment of 0s has length 3: 111000\nThe segment of 1s is not longer, so return false.\n<strong class="example">Example 3:\nInput: s = 110100010\nOutput: false\nExplanation:\nThe longest contiguous segment of 1s has length 2: 110100010\nThe longest contiguous segment of 0s has length 3: 110100010\nThe segment of 1s is not longer, so return false.\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 100</li>\n\t<li>s[i] is either &#39;0&#39; or &#39;1&#39;.</li>\n</ul>\n\n"test_case": [\n  "1101"\n  "111000"\n  "110100010"\n],\n"test_case_output": [\'true\', \'false\', \'false\'],\n"test_case_explanation": [\n  "The longest contiguous segment of 1s has length 2: 1101\nThe longest contiguous segment of 0s has length 1: 1101\nThe segment of 1s is longer, so return true.\n"\n\n  "The longest contiguous segment of 1s has length 3: 111000\nThe longest contiguous segment of 0s has length 3: 111000\nThe segment of 1s is not longer, so return false.\n"\n\n  "The longest contiguous segment of 1s has length 2: 110100010\nThe longest contiguous segment of 0s has length 3: 110100010\nThe segment of 1s is not longer, so return false.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums, return the sum of floor(nums[i] / nums[j]) for all pairs of indices 0 &lt;= i, j &lt; nums.length in the array. Since the answer may be too large, return it modulo 10<sup>9</sup> + 7.\nThe floor() function returns the integer part of the division.<strong class="example">Example 1:\nInput: nums = [2,5,9]\nOutput: 10\nExplanation:\nfloor(2 / 5) = floor(2 / 9) = floor(5 / 9) = 0\nfloor(2 / 2) = floor(5 / 5) = floor(9 / 9) = 1\nfloor(5 / 2) = 2\nfloor(9 / 2) = 4\nfloor(9 / 5) = 1\nWe calculate the floor of the division for every pair of indices in the array then sum them up.\n<strong class="example">Example 2:\nInput: nums = [7,7,7,7,7,7,7]\nOutput: 49\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>5</sup></li>\n\t<li>1 &lt;= nums[i] &lt;= 10<sup>5</sup></li>\n</ul>\n\n"test_case": [\n  [2,5,9]\n  [7,7,7,7,7,7,7]\n],\n"test_case_output": [\'10\', \'49\'],\n"test_case_explanation": [\n  "floor(2 / 5) = floor(2 / 9) = floor(5 / 9) = 0\nfloor(2 / 2) = floor(5 / 5) = floor(9 / 9) = 1\nfloor(5 / 2) = 2\nfloor(9 / 2) = 4\nfloor(9 / 5) = 1\nWe calculate the floor of the division for every pair of indices in the array then sum them up.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an m x n matrix of characters box representing a side-view of a box. Each cell of the box is one of the following:\r\n\r\n<ul>\r\n\t<li>A stone &#39;#&#39;</li>\r\n\t<li>A stationary obstacle &#39;*&#39;</li>\r\n\t<li>Empty &#39;.&#39;</li>\r\n</ul>\r\n\r\nThe box is rotated 90 degrees clockwise, causing some of the stones to fall due to gravity. Each stone falls down until it lands on an obstacle, another stone, or the bottom of the box. Gravity does not affect the obstacles&#39; positions, and the inertia from the box&#39;s rotation does not affect the stones&#39; horizontal positions.\r\n\r\nIt is guaranteed that each stone in box rests on an obstacle, another stone, or the bottom of the box.\r\n\r\nReturn an n x m matrix representing the box after the rotation described above.\r\n\r\n\r\n<strong class="example">Example 1:\r\n\r\n<img alt="" src="https://assets.leetcode.com/uploads/2021/04/08/rotatingtheboxleetcodewithstones.png" style="width: 300px; height: 150px;" />\r\n\r\n\r\nInput: box = [[#,.,#]]\r\nOutput: [[.],\r\n        [#],\r\n        [#]]\r\n\r\n\r\n<strong class="example">Example 2:\r\n\r\n<img alt="" src="https://assets.leetcode.com/uploads/2021/04/08/rotatingtheboxleetcode2withstones.png" style="width: 375px; height: 195px;" />\r\n\r\n\r\nInput: box = [[#,.,*,.],\r\n             [#,#,*,.]]\r\nOutput: [[#,.],\r\n        [#,#],\r\n        [*,*],\r\n        [.,.]]\r\n\r\n\r\n<strong class="example">Example 3:\r\n\r\n<img alt="" src="https://assets.leetcode.com/uploads/2021/04/08/rotatingtheboxleetcode3withstone.png" style="width: 400px; height: 218px;" />\r\n\r\n\r\nInput: box = [[#,#,*,.,*,.],\r\n             [#,#,#,*,.,.],\r\n             [#,#,#,.,#,.]]\r\nOutput: [[.,#,#],\r\n        [.,#,#],\r\n        [#,#,*],\r\n        [#,*,.],\r\n        [#,.,*],\r\n        [#,.,.]]\r\n\r\n\r\n\r\nConstraints:\r\n\r\n<ul>\r\n\t<li>m == box.length</li>\r\n\t<li>n == box[i].length</li>\r\n\t<li>1 &lt;= m, n &lt;= 500</li>\r\n\t<li>box[i][j] is either &#39;#&#39;, &#39;*&#39;, or &#39;.&#39;.</li>\r\n</ul>\n"test_case": [\n  [["#",".","#"]]\n  [["#",".","*","."],["#","#","*","."]]\n  [["#","#","*",".","*","."],["#","#","#","*",".","."],["#","#","#",".","#","."]]\n],\n"test_case_output": [\'[[.],\\r\', \'[[#,.],\\r\', \'[[.,#,#],\\r\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given two integers memory1 and memory2 representing the available memory in bits on two memory sticks. There is currently a faulty program running that consumes an increasing amount of memory every second.\nAt the i<sup>th</sup> second (starting from 1), i bits of memory are allocated to the stick with more available memory (or from the first memory stick if both have the same available memory). If neither stick has at least i bits of available memory, the program crashes.\nReturn an array containing [crashTime, memory1<sub>crash</sub>, memory2<sub>crash</sub>], where crashTime is the time (in seconds) when the program crashed and memory1<sub>crash</sub> and memory2<sub>crash</sub> are the available bits of memory in the first and second sticks respectively.<strong class="example">Example 1:\nInput: memory1 = 2, memory2 = 2\nOutput: [3,1,0]\nExplanation: The memory is allocated as follows:\n- At the 1<sup>st</sup> second, 1 bit of memory is allocated to stick 1. The first stick now has 1 bit of available memory.\n- At the 2<sup>nd</sup> second, 2 bits of memory are allocated to stick 2. The second stick now has 0 bits of available memory.\n- At the 3<sup>rd</sup> second, the program crashes. The sticks have 1 and 0 bits available respectively.\n<strong class="example">Example 2:\nInput: memory1 = 8, memory2 = 11\nOutput: [6,0,4]\nExplanation: The memory is allocated as follows:\n- At the 1<sup>st</sup> second, 1 bit of memory is allocated to stick 2. The second stick now has 10 bit of available memory.\n- At the 2<sup>nd</sup> second, 2 bits of memory are allocated to stick 2. The second stick now has 8 bits of available memory.\n- At the 3<sup>rd</sup> second, 3 bits of memory are allocated to stick 1. The first stick now has 5 bits of available memory.\n- At the 4<sup>th</sup> second, 4 bits of memory are allocated to stick 2. The second stick now has 4 bits of available memory.\n- At the 5<sup>th</sup> second, 5 bits of memory are allocated to stick 1. The first stick now has 0 bits of available memory.\n- At the 6<sup>th</sup> second, the program crashes. The sticks have 0 and 4 bits available respectively.\nConstraints:\n<ul>\n\t<li>0 &lt;= memory1, memory2 &lt;= 2<sup>31</sup> - 1</li>\n</ul>\n\n"test_case": [\n  2\n2\n  8\n11\n],\n"test_case_output": [\'[3,1,0]\', \'[6,0,4]\'],\n"test_case_explanation": [\n  "The memory is allocated as follows:\n- At the 1"\n\n  "The memory is allocated as follows:\n- At the 1"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nA sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each word consists of lowercase and uppercase English letters.\r\n\r\nA sentence can be shuffled by appending the 1-indexed word position to each word then rearranging the words in the sentence.\r\n\r\n<ul>\r\n\t<li>For example, the sentence This is a sentence can be shuffled as sentence4 a3 is2 This1 or is2 sentence4 This1 a3.</li>\r\n</ul>\r\n\r\nGiven a shuffled sentence s containing no more than 9 words, reconstruct and return the original sentence.\r\n\r\n\r\n<strong class="example">Example 1:\r\n\r\n\r\nInput: s = is2 sentence4 This1 a3\r\nOutput: This is a sentence\r\nExplanation: Sort the words in s to their original positions This1 is2 a3 sentence4, then remove the numbers.\r\n\r\n\r\n<strong class="example">Example 2:\r\n\r\n\r\nInput: s = Myself2 Me1 I4 and3\r\nOutput: Me Myself and I\r\nExplanation: Sort the words in s to their original positions Me1 Myself2 and3 I4, then remove the numbers.\r\n\r\n\r\n\r\nConstraints:\r\n\r\n<ul>\r\n\t<li>2 &lt;= s.length &lt;= 200</li>\r\n\t<li>s consists of lowercase and uppercase English letters, spaces, and digits from 1 to 9.</li>\r\n\t<li>The number of words in s is between 1 and 9.</li>\r\n\t<li>The words in s are separated by a single space.</li>\r\n\t<li>s contains no leading or trailing spaces.</li>\r\n</ul>\n"test_case": [\n  "is2 sentence4 This1 a3"\n  "Myself2 Me1 I4 and3"\n],\n"test_case_output": [\'This is a sentence\\r\', \'Me Myself and I\\r\'],\n"test_case_explanation": [\n  "Sort the words in s to their original positions This1 is2 a3 sentence4, then remove the numbers.\r\n\r\n\r\n"\n\n  "Sort the words in s to their original positions Me1 Myself2 and3 I4, then remove the numbers.\r\n\r\n\r\n\r\nConstraints:\r\n\r\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThere is a directed graph of n colored nodes and m edges. The nodes are numbered from 0 to n - 1.\r\n\r\nYou are given a string colors where colors[i] is a lowercase English letter representing the color of the i<sup>th</sup> node in this graph (0-indexed). You are also given a 2D array edges where edges[j] = [a<sub>j</sub>, b<sub>j</sub>] indicates that there is a directed edge from node a<sub>j</sub> to node b<sub>j</sub>.\r\n\r\nA valid path in the graph is a sequence of nodes x<sub>1</sub> -&gt; x<sub>2</sub> -&gt; x<sub>3</sub> -&gt; ... -&gt; x<sub>k</sub> such that there is a directed edge from x<sub>i</sub> to x<sub>i+1</sub> for every 1 &lt;= i &lt; k. The color value of the path is the number of nodes that are colored the most frequently occurring color along that path.\r\n\r\nReturn the largest color value of any valid path in the given graph, or -1 if the graph contains a cycle.\r\n\r\n\r\n<strong class="example">Example 1:\r\n\r\n<img alt="" src="https://assets.leetcode.com/uploads/2021/04/21/leet1.png" style="width: 400px; height: 182px;" />\r\n\r\n\r\nInput: colors = abaca, edges = [[0,1],[0,2],[2,3],[3,4]]\r\nOutput: 3\r\nExplanation: The path 0 -&gt; 2 -&gt; 3 -&gt; 4 contains 3 nodes that are colored a (red in the above image).\r\n\r\n\r\n<strong class="example">Example 2:\r\n\r\n<img alt="" src="https://assets.leetcode.com/uploads/2021/04/21/leet2.png" style="width: 85px; height: 85px;" />\r\n\r\n\r\nInput: colors = a, edges = [[0,0]]\r\nOutput: -1\r\nExplanation: There is a cycle from 0 to 0.\r\n\r\n\r\n\r\nConstraints:\r\n\r\n<ul>\r\n\t<li>n == colors.length</li>\r\n\t<li>m == edges.length</li>\r\n\t<li>1 &lt;= n &lt;= 10<sup>5</sup></li>\r\n\t<li>0 &lt;= m &lt;= 10<sup>5</sup></li>\r\n\t<li>colors consists of lowercase English letters.</li>\r\n\t<li>0 &lt;= a<sub>j</sub>, b<sub>j</sub>&lt; n</li>\r\n</ul>\n"test_case": [\n  "abaca"\n[[0,1],[0,2],[2,3],[3,4]]\n  "a"\n[[0,0]]\n],\n"test_case_output": [\'3\\r\', \'-1\\r\'],\n"test_case_explanation": [\n  "The path 0 -&gt; 2 -&gt; 3 -&gt; 4 contains 3 nodes that are colored a (red in the above image).\r\n\r\n\r\n"\n\n  "There is a cycle from 0 to 0.\r\n\r\n\r\n\r\nConstraints:\r\n\r\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThe min-product of an array is equal to the minimum value in the array multiplied by the array&#39;s sum.\n<ul>\n\t<li>For example, the array [3,2,5] (minimum value is 2) has a min-product of 2 * (3+2+5) = 2 * 10 = 20.</li>\n</ul>\nGiven an array of integers nums, return the maximum min-product of any non-empty subarray of nums. Since the answer may be large, return it modulo 10<sup>9</sup> + 7.\nNote that the min-product should be maximized before performing the modulo operation. Testcases are generated such that the maximum min-product without modulo will fit in a 64-bit signed integer.\nA subarray is a contiguous part of an array.<strong class="example">Example 1:\nInput: nums = [1,2,3,2]\nOutput: 14\nExplanation: The maximum min-product is achieved with the subarray [2,3,2] (minimum value is 2).\n2 * (2+3+2) = 2 * 7 = 14.\n<strong class="example">Example 2:\nInput: nums = [2,3,3,1,2]\nOutput: 18\nExplanation: The maximum min-product is achieved with the subarray [3,3] (minimum value is 3).\n3 * (3+3) = 3 * 6 = 18.\n<strong class="example">Example 3:\nInput: nums = [3,1,5,6,4,2]\nOutput: 60\nExplanation: The maximum min-product is achieved with the subarray [5,6,4] (minimum value is 4).\n4 * (5+6+4) = 4 * 15 = 60.\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>5</sup></li>\n\t<li>1 &lt;= nums[i] &lt;= 10<sup>7</sup></li>\n</ul>\n\n"test_case": [\n  [1,2,3,2]\n  [2,3,3,1,2]\n  [3,1,5,6,4,2]\n],\n"test_case_output": [\'14\', \'18\', \'60\'],\n"test_case_explanation": [\n  "The maximum min-product is achieved with the subarray [2,3,2] (minimum value is 2).\n2 * (2+3+2) = 2 * 7 = 14.\n"\n\n  "The maximum min-product is achieved with the subarray [3,3] (minimum value is 3).\n3 * (3+3) = 3 * 6 = 18.\n"\n\n  "The maximum min-product is achieved with the subarray [5,6,4] (minimum value is 4).\n4 * (5+6+4) = 4 * 15 = 60.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given two non-increasing 0-indexed integer arrays nums1\u200b\u200b\u200b\u200b\u200b\u200b and nums2\u200b\u200b\u200b\u200b\u200b\u200b.\nA pair of indices (i, j), where 0 &lt;= i &lt; nums1.length and 0 &lt;= j &lt; nums2.length, is valid if both i &lt;= j and nums1[i] &lt;= nums2[j]. The distance of the pair is j - i\u200b\u200b\u200b\u200b.\nReturn the maximum distance of any valid pair (i, j). If there are no valid pairs, return 0.\nAn array arr is non-increasing if arr[i-1] &gt;= arr[i] for every 1 &lt;= i &lt; arr.length.<strong class="example">Example 1:\nInput: nums1 = [55,30,5,4,2], nums2 = [100,20,10,10,5]\nOutput: 2\nExplanation: The valid pairs are (0,0), (2,2), (2,3), (2,4), (3,3), (3,4), and (4,4).\nThe maximum distance is 2 with pair (2,4).\n<strong class="example">Example 2:\nInput: nums1 = [2,2,2], nums2 = [10,10,1]\nOutput: 1\nExplanation: The valid pairs are (0,0), (0,1), and (1,1).\nThe maximum distance is 1 with pair (0,1).\n<strong class="example">Example 3:\nInput: nums1 = [30,29,19,5], nums2 = [25,25,25,25,25]\nOutput: 2\nExplanation: The valid pairs are (2,2), (2,3), (2,4), (3,3), and (3,4).\nThe maximum distance is 2 with pair (2,4).\nConstraints:\n<ul>\n\t<li>1 &lt;= nums1.length, nums2.length &lt;= 10<sup>5</sup></li>\n\t<li>1 &lt;= nums1[i], nums2[j] &lt;= 10<sup>5</sup></li>\n\t<li>Both nums1 and nums2 are non-increasing.</li>\n</ul>\n\n"test_case": [\n  [55,30,5,4,2]\n[100,20,10,10,5]\n  [2,2,2]\n[10,10,1]\n  [30,29,19,5]\n[25,25,25,25,25]\n],\n"test_case_output": [\'2\', \'1\', \'2\'],\n"test_case_explanation": [\n  "The valid pairs are (0,0), (2,2), (2,3), (2,4), (3,3), (3,4), and (4,4).\nThe maximum distance is 2 with pair (2,4).\n"\n\n  "The valid pairs are (0,0), (0,1), and (1,1).\nThe maximum distance is 1 with pair (0,1).\n"\n\n  "The valid pairs are (2,2), (2,3), (2,4), (3,3), and (3,4).\nThe maximum distance is 2 with pair (2,4).\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a 2D integer array logs where each logs[i] = [birth<sub>i</sub>, death<sub>i</sub>] indicates the birth and death years of the i<sup>th</sup> person.\nThe population of some year x is the number of people alive during that year. The i<sup>th</sup> person is counted in year x&#39;s population if x is in the inclusive range [birth<sub>i</sub>, death<sub>i</sub> - 1]. Note that the person is not counted in the year that they die.\nReturn the earliest year with the maximum population.<strong class="example">Example 1:\nInput: logs = [[1993,1999],[2000,2010]]\nOutput: 1993\nExplanation: The maximum population is 1, and 1993 is the earliest year with this population.\n<strong class="example">Example 2:\nInput: logs = [[1950,1961],[1960,1971],[1970,1981]]\nOutput: 1960\nExplanation: \nThe maximum population is 2, and it had happened in years 1960 and 1970.\nThe earlier year between them is 1960.Constraints:\n<ul>\n\t<li>1 &lt;= logs.length &lt;= 100</li>\n\t<li>1950 &lt;= birth<sub>i</sub> &lt; death<sub>i</sub> &lt;= 2050</li>\n</ul>\n\n"test_case": [\n  [[1993,1999],[2000,2010]]\n  [[1950,1961],[1960,1971],[1970,1981]]\n],\n"test_case_output": [\'1993\', \'1960\'],\n"test_case_explanation": [\n  "The maximum population is 1, and 1993 is the earliest year with this population.\n"\n\n  "The maximum population is 2, and it had happened in years 1960 and 1970.\nThe earlier year between them is 1960.Constraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a 2D integer array intervals, where intervals[i] = [left<sub>i</sub>, right<sub>i</sub>] describes the i<sup>th</sup> interval starting at left<sub>i</sub> and ending at right<sub>i</sub> (inclusive). The size of an interval is defined as the number of integers it contains, or more formally right<sub>i</sub> - left<sub>i</sub> + 1.\nYou are also given an integer array queries. The answer to the j<sup>th</sup> query is the size of the smallest interval i such that left<sub>i</sub> &lt;= queries[j] &lt;= right<sub>i</sub>. If no such interval exists, the answer is -1.\nReturn an array containing the answers to the queries.<strong class="example">Example 1:\nInput: intervals = [[1,4],[2,4],[3,6],[4,4]], queries = [2,3,4,5]\nOutput: [3,3,1,4]\nExplanation: The queries are processed as follows:\n- Query = 2: The interval [2,4] is the smallest interval containing 2. The answer is 4 - 2 + 1 = 3.\n- Query = 3: The interval [2,4] is the smallest interval containing 3. The answer is 4 - 2 + 1 = 3.\n- Query = 4: The interval [4,4] is the smallest interval containing 4. The answer is 4 - 4 + 1 = 1.\n- Query = 5: The interval [3,6] is the smallest interval containing 5. The answer is 6 - 3 + 1 = 4.\n<strong class="example">Example 2:\nInput: intervals = [[2,3],[2,5],[1,8],[20,25]], queries = [2,19,5,22]\nOutput: [2,-1,4,6]\nExplanation: The queries are processed as follows:\n- Query = 2: The interval [2,3] is the smallest interval containing 2. The answer is 3 - 2 + 1 = 2.\n- Query = 19: None of the intervals contain 19. The answer is -1.\n- Query = 5: The interval [2,5] is the smallest interval containing 5. The answer is 5 - 2 + 1 = 4.\n- Query = 22: The interval [20,25] is the smallest interval containing 22. The answer is 25 - 20 + 1 = 6.\nConstraints:\n<ul>\n\t<li>1 &lt;= intervals.length &lt;= 10<sup>5</sup></li>\n\t<li>1 &lt;= queries.length &lt;= 10<sup>5</sup></li>\n\t<li>intervals[i].length == 2</li>\n\t<li>1 &lt;= left<sub>i</sub> &lt;= right<sub>i</sub> &lt;= 10<sup>7</sup></li>\n\t<li>1 &lt;= queries[j] &lt;= 10<sup>7</sup></li>\n</ul>\n\n"test_case": [\n  [[1,4],[2,4],[3,6],[4,4]]\n[2,3,4,5]\n  [[2,3],[2,5],[1,8],[20,25]]\n[2,19,5,22]\n],\n"test_case_output": [\'[3,3,1,4]\', \'[2,-1,4,6]\'],\n"test_case_explanation": [\n  "The queries are processed as follows:\n- Query = 2: The interval [2,4] is the smallest interval containing 2. The answer is 4 - 2 + 1 = 3.\n- Query = 3: The interval [2,4] is the smallest interval containing 3. The answer is 4 - 2 + 1 = 3.\n- Query = 4: The interval [4,4] is the smallest interval containing 4. The answer is 4 - 4 + 1 = 1.\n- Query = 5: The interval [3,6] is the smallest interval containing 5. The answer is 6 - 3 + 1 = 4.\n"\n\n  "The queries are processed as follows:\n- Query = 2: The interval [2,3] is the smallest interval containing 2. The answer is 3 - 2 + 1 = 2.\n- Query = 19: None of the intervals contain 19. The answer is -1.\n- Query = 5: The interval [2,5] is the smallest interval containing 5. The answer is 5 - 2 + 1 = 4.\n- Query = 22: The interval [20,25] is the smallest interval containing 22. The answer is 25 - 20 + 1 = 6.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a string num, representing a large integer, and an integer k.\nWe call some integer wonderful if it is a permutation of the digits in num and is greater in value than num. There can be many wonderful integers. However, we only care about the smallest-valued ones.\n<ul>\n\t<li>For example, when num = 5489355142:\n\t<ul>\n\t\t<li>The 1<sup>st</sup> smallest wonderful integer is 5489355214.</li>\n\t\t<li>The 2<sup>nd</sup> smallest wonderful integer is 5489355241.</li>\n\t\t<li>The 3<sup>rd</sup> smallest wonderful integer is 5489355412.</li>\n\t\t<li>The 4<sup>th</sup> smallest wonderful integer is 5489355421.</li>\n\t</ul>\n\t</li>\n</ul>\nReturn the minimum number of adjacent digit swaps that needs to be applied to num to reach the k<sup>th</sup> smallest wonderful integer.\nThe tests are generated in such a way that k<sup>th</sup>smallest wonderful integer exists.<strong class="example">Example 1:\nInput: num = 5489355142, k = 4\nOutput: 2\nExplanation: The 4<sup>th</sup> smallest wonderful number is 5489355421. To get this number:\n- Swap index 7 with index 8: 5489355142 -&gt; 5489355412\n- Swap index 8 with index 9: 5489355412 -&gt; 5489355421\n<strong class="example">Example 2:\nInput: num = 11112, k = 4\nOutput: 4\nExplanation: The 4<sup>th</sup> smallest wonderful number is 21111. To get this number:\n- Swap index 3 with index 4: 11112 -&gt; 11121\n- Swap index 2 with index 3: 11121 -&gt; 11211\n- Swap index 1 with index 2: 11211 -&gt; 12111\n- Swap index 0 with index 1: 12111 -&gt; 21111\n<strong class="example">Example 3:\nInput: num = 00123, k = 1\nOutput: 1\nExplanation: The 1<sup>st</sup> smallest wonderful number is 00132. To get this number:\n- Swap index 3 with index 4: 00123 -&gt; 00132\nConstraints:\n<ul>\n\t<li>2 &lt;= num.length &lt;= 1000</li>\n\t<li>1 &lt;= k &lt;= 1000</li>\n\t<li>num only consists of digits.</li>\n</ul>\n\n"test_case": [\n  "5489355142"\n4\n  "11112"\n4\n  "00123"\n1\n],\n"test_case_output": [\'2\', \'4\', \'1\'],\n"test_case_explanation": [\n  "The 4"\n\n  "The 4"\n\n  "The 1"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a string s that consists of only digits.\nCheck if we can split s into two or more non-empty substrings such that the numerical values of the substrings are in descending order and the difference between numerical values of every two adjacent substrings is equal to 1.\n<ul>\n\t<li>For example, the string s = 0090089 can be split into [0090, 089] with numerical values [90,89]. The values are in descending order and adjacent values differ by 1, so this way is valid.</li>\n\t<li>Another example, the string s = 001 can be split into [0, 01], [00, 1], or [0, 0, 1]. However all the ways are invalid because they have numerical values [0,1], [0,1], and [0,0,1] respectively, all of which are not in descending order.</li>\n</ul>\nReturn true if it is possible to split s\u200b\u200b\u200b\u200b\u200b\u200b as described above, or false otherwise.\nA substring is a contiguous sequence of characters in a string.<strong class="example">Example 1:\nInput: s = 1234\nOutput: false\nExplanation: There is no valid way to split s.\n<strong class="example">Example 2:\nInput: s = 050043\nOutput: true\nExplanation: s can be split into [05, 004, 3] with numerical values [5,4,3].\nThe values are in descending order with adjacent values differing by 1.\n<strong class="example">Example 3:\nInput: s = 9080701\nOutput: false\nExplanation: There is no valid way to split s.\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 20</li>\n\t<li>s only consists of digits.</li>\n</ul>\n\n"test_case": [\n  "1234"\n  "050043"\n  "9080701"\n],\n"test_case_output": [\'false\', \'true\', \'false\'],\n"test_case_explanation": [\n  "There is no valid way to split s.\n"\n\n  "s can be split into [05, 004, 3] with numerical values [5,4,3].\nThe values are in descending order with adjacent values differing by 1.\n"\n\n  "There is no valid way to split s.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums (0-indexed) and two integers target and start, find an index i such that nums[i] == target and abs(i - start) is minimized. Note thatabs(x)is the absolute value of x.\nReturn abs(i - start).\nIt is guaranteed that target exists in nums.<strong class="example">Example 1:\nInput: nums = [1,2,3,4,5], target = 5, start = 3\nOutput: 1\nExplanation: nums[4] = 5 is the only value equal to target, so the answer is abs(4 - 3) = 1.\n<strong class="example">Example 2:\nInput: nums = [1], target = 1, start = 0\nOutput: 0\nExplanation: nums[0] = 1 is the only value equal to target, so the answer is abs(0 - 0) = 0.\n<strong class="example">Example 3:\nInput: nums = [1,1,1,1,1,1,1,1,1,1], target = 1, start = 0\nOutput: 0\nExplanation: Every value of nums is 1, but nums[0] minimizes abs(i - start), which is abs(0 - 0) = 0.\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 1000</li>\n\t<li>1 &lt;= nums[i] &lt;= 10<sup>4</sup></li>\n\t<li>0 &lt;= start &lt; nums.length</li>\n\t<li>target is in nums.</li>\n</ul>\n\n"test_case": [\n  [1,2,3,4,5]\n5\n3\n  [1]\n1\n0\n  [1,1,1,1,1,1,1,1,1,1]\n1\n0\n],\n"test_case_output": [\'1\', \'0\', \'0\'],\n"test_case_explanation": [\n  "nums[4] = 5 is the only value equal to target, so the answer is abs(4 - 3) = 1.\n"\n\n  "nums[0] = 1 is the only value equal to target, so the answer is abs(0 - 0) = 0.\n"\n\n  "Every value of nums is 1, but nums[0] minimizes abs(i - start), which is abs(0 - 0) = 0.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThere is a hotel with n rooms. The rooms are represented by a 2D integer array rooms where rooms[i] = [roomId<sub>i</sub>, size<sub>i</sub>] denotes that there is a room with room number roomId<sub>i</sub> and size equal to size<sub>i</sub>. Each roomId<sub>i</sub> is guaranteed to be unique.\nYou are also given k queries in a 2D array queries where queries[j] = [preferred<sub>j</sub>, minSize<sub>j</sub>]. The answer to the j<sup>th</sup> query is the room number id of a room such that:\n<ul>\n\t<li>The room has a size of at least minSize<sub>j</sub>, and</li>\n\t<li>abs(id - preferred<sub>j</sub>) is minimized, where abs(x) is the absolute value of x.</li>\n</ul>\nIf there is a tie in the absolute difference, then use the room with the smallest such id. If there is no such room, the answer is -1.\nReturn an array answer of length k where answer[j] contains the answer to the j<sup>th</sup> query.<strong class="example">Example 1:\nInput: rooms = [[2,2],[1,2],[3,2]], queries = [[3,1],[3,3],[5,2]]\nOutput: [3,-1,3]\nExplanation: The answers to the queries are as follows:\nQuery = [3,1]: Room number 3 is the closest as abs(3 - 3) = 0, and its size of 2 is at least 1. The answer is 3.\nQuery = [3,3]: There are no rooms with a size of at least 3, so the answer is -1.\nQuery = [5,2]: Room number 3 is the closest as abs(3 - 5) = 2, and its size of 2 is at least 2. The answer is 3.\n<strong class="example">Example 2:\nInput: rooms = [[1,4],[2,3],[3,5],[4,1],[5,2]], queries = [[2,3],[2,4],[2,5]]\nOutput: [2,1,3]\nExplanation: The answers to the queries are as follows:\nQuery = [2,3]: Room number 2 is the closest as abs(2 - 2) = 0, and its size of 3 is at least 3. The answer is 2.\nQuery = [2,4]: Room numbers 1 and 3 both have sizes of at least 4. The answer is 1 since it is smaller.\nQuery = [2,5]: Room number 3 is the only room with a size of at least 5. The answer is 3.Constraints:\n<ul>\n\t<li>n == rooms.length</li>\n\t<li>1 &lt;= n &lt;= 10<sup>5</sup></li>\n\t<li>k == queries.length</li>\n\t<li>1 &lt;= k &lt;= 10<sup>4</sup></li>\n\t<li>1 &lt;= roomId<sub>i</sub>, preferred<sub>j</sub> &lt;= 10<sup>7</sup></li>\n\t<li>1 &lt;= size<sub>i</sub>, minSize<sub>j</sub> &lt;= 10<sup>7</sup></li>\n</ul>\n\n"test_case": [\n  [[2,2],[1,2],[3,2]]\n[[3,1],[3,3],[5,2]]\n  [[1,4],[2,3],[3,5],[4,1],[5,2]]\n[[2,3],[2,4],[2,5]]\n],\n"test_case_output": [\'[3,-1,3]\', \'[2,1,3]\'],\n"test_case_explanation": [\n  "The answers to the queries are as follows:\nQuery = [3,1]: Room number 3 is the closest as abs(3 - 3) = 0, and its size of 2 is at least 1. The answer is 3.\nQuery = [3,3]: There are no rooms with a size of at least 3, so the answer is -1.\nQuery = [5,2]: Room number 3 is the closest as abs(3 - 5) = 2, and its size of 2 is at least 2. The answer is 3.\n"\n\n  "The answers to the queries are as follows:\nQuery = [2,3]: Room number 2 is the closest as abs(2 - 2) = 0, and its size of 3 is at least 3. The answer is 2.\nQuery = [2,4]: Room numbers 1 and 3 both have sizes of at least 4. The answer is 1 since it is smaller.\nQuery = [2,5]: Room number 3 is the only room with a size of at least 5. The answer is 3.Constraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an array of positive integers arr. Perform some operations (possibly none) on arr so that it satisfies these conditions:\n<ul>\n\t<li>The value of the first element in arr must be 1.</li>\n\t<li>The absolute difference between any 2 adjacent elements must be less than or equal to 1. In other words, abs(arr[i] - arr[i - 1]) &lt;= 1 for each i where 1 &lt;= i &lt; arr.length (0-indexed). abs(x) is the absolute value of x.</li>\n</ul>\nThere are 2 types of operations that you can perform any number of times:\n<ul>\n\t<li>Decrease the value of any element of arr to a smaller positive integer.</li>\n\t<li>Rearrange the elements of arr to be in any order.</li>\n</ul>\nReturn the maximum possible value of an element in arr after performing the operations to satisfy the conditions.<strong class="example">Example 1:\nInput: arr = [2,2,1,2,1]\nOutput: 2\nExplanation: \nWe can satisfy the conditions by rearranging arr so it becomes [1,2,2,2,1].\nThe largest element in arr is 2.\n<strong class="example">Example 2:\nInput: arr = [100,1,1000]\nOutput: 3\nExplanation: \nOne possible way to satisfy the conditions is by doing the following:\n1. Rearrange arr so it becomes [1,100,1000].\n2. Decrease the value of the second element to 2.\n3. Decrease the value of the third element to 3.\nNow arr = [1,2,3], which satisfies the conditions.\nThe largest element in arr is 3.\n<strong class="example">Example 3:\nInput: arr = [1,2,3,4,5]\nOutput: 5\nExplanation: The array already satisfies the conditions, and the largest element is 5.\nConstraints:\n<ul>\n\t<li>1 &lt;= arr.length &lt;= 10<sup>5</sup></li>\n\t<li>1 &lt;= arr[i] &lt;= 10<sup>9</sup></li>\n</ul>\n\n"test_case": [\n  [2,2,1,2,1]\n  [100,1,1000]\n  [1,2,3,4,5]\n],\n"test_case_output": [\'2\', \'3\', \'5\'],\n"test_case_explanation": [\n  "We can satisfy the conditions by rearranging arr so it becomes [1,2,2,2,1].\nThe largest element in arr is 2.\n"\n\n  "One possible way to satisfy the conditions is by doing the following:\n1. Rearrange arr so it becomes [1,100,1000].\n2. Decrease the value of the second element to 2.\n3. Decrease the value of the third element to 3.\nNow arr = [1,2,3], which satisfies the conditions.\nThe largest element in arr is 3.\n"\n\n  "The array already satisfies the conditions, and the largest element is 5.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nDesign a system that manages the reservation state of n seats that are numbered from 1 to n.\nImplement the SeatManager class:\n<ul>\n\t<li>SeatManager(int n) Initializes a SeatManager object that will manage n seats numbered from 1 to n. All seats are initially available.</li>\n\t<li>int reserve() Fetches the smallest-numbered unreserved seat, reserves it, and returns its number.</li>\n\t<li>void unreserve(int seatNumber) Unreserves the seat with the given seatNumber.</li>\n</ul><strong class="example">Example 1:\nInput\n[SeatManager, reserve, reserve, unreserve, reserve, reserve, reserve, reserve, unreserve]\n[[5], [], [], [2], [], [], [], [], [5]]\nOutput\n[null, 1, 2, null, 2, 3, 4, 5, null]\nExplanation\nSeatManager seatManager = new SeatManager(5); // Initializes a SeatManager with 5 seats.\nseatManager.reserve();    // All seats are available, so return the lowest numbered seat, which is 1.\nseatManager.reserve();    // The available seats are [2,3,4,5], so return the lowest of them, which is 2.\nseatManager.unreserve(2); // Unreserve seat 2, so now the available seats are [2,3,4,5].\nseatManager.reserve();    // The available seats are [2,3,4,5], so return the lowest of them, which is 2.\nseatManager.reserve();    // The available seats are [3,4,5], so return the lowest of them, which is 3.\nseatManager.reserve();    // The available seats are [4,5], so return the lowest of them, which is 4.\nseatManager.reserve();    // The only available seat is seat 5, so return 5.\nseatManager.unreserve(5); // Unreserve seat 5, so now the available seats are [5].\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 10<sup>5</sup></li>\n\t<li>1 &lt;= seatNumber &lt;= n</li>\n\t<li>For each call to reserve, it is guaranteed that there will be at least one unreserved seat.</li>\n\t<li>For each call to unreserve, it is guaranteed that seatNumber will be reserved.</li>\n\t<li>At most 10<sup>5</sup> calls in total will be made to reserve and unreserve.</li>\n</ul>\n\n"test_case": [\n  ["SeatManager","reserve","reserve","unreserve","reserve","reserve","reserve","reserve","unreserve"]\n[[5],[],[],[2],[],[],[],[],[5]]\n],\n"test_case_output": [],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a 0-indexed string s that has lowercase English letters in its even indices and digits in its odd indices.\nThere is a function shift(c, x), where c is a character and x is a digit, that returns the x<sup>th</sup> character after c.\n<ul>\n\t<li>For example, shift(&#39;a&#39;, 5) = &#39;f&#39; and shift(&#39;x&#39;, 0) = &#39;x&#39;.</li>\n</ul>\nFor every oddindex i, you want to replace the digit s[i] with shift(s[i-1], s[i]).\nReturn s after replacing all digits. It is guaranteed that shift(s[i-1], s[i]) will never exceed &#39;z&#39;.<strong class="example">Example 1:\nInput: s = a1c1e1\nOutput: abcdef\nExplanation: The digits are replaced as follows:\n- s[1] -&gt; shift(&#39;a&#39;,1) = &#39;b&#39;\n- s[3] -&gt; shift(&#39;c&#39;,1) = &#39;d&#39;\n- s[5] -&gt; shift(&#39;e&#39;,1) = &#39;f&#39;\n<strong class="example">Example 2:\nInput: s = a1b2c3d4e\nOutput: abbdcfdhe\nExplanation: The digits are replaced as follows:\n- s[1] -&gt; shift(&#39;a&#39;,1) = &#39;b&#39;\n- s[3] -&gt; shift(&#39;b&#39;,2) = &#39;d&#39;\n- s[5] -&gt; shift(&#39;c&#39;,3) = &#39;f&#39;\n- s[7] -&gt; shift(&#39;d&#39;,4) = &#39;h&#39;Constraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 100</li>\n\t<li>s consists only of lowercase English letters and digits.</li>\n\t<li>shift(s[i-1], s[i]) &lt;= &#39;z&#39; for all odd indices i.</li>\n</ul>\n\n"test_case": [\n  "a1c1e1"\n  "a1b2c3d4e"\n],\n"test_case_output": [\'abcdef\', \'abbdcfdhe\'],\n"test_case_explanation": [\n  "The digits are replaced as follows:\n- s[1] -&gt; shift(&#39;a&#39;,1) = &#39;b&#39;\n- s[3] -&gt; shift(&#39;c&#39;,1) = &#39;d&#39;\n- s[5] -&gt; shift(&#39;e&#39;,1) = &#39;f&#39;\n"\n\n  "The digits are replaced as follows:\n- s[1] -&gt; shift(&#39;a&#39;,1) = &#39;b&#39;\n- s[3] -&gt; shift(&#39;b&#39;,2) = &#39;d&#39;\n- s[5] -&gt; shift(&#39;c&#39;,3) = &#39;f&#39;\n- s[7] -&gt; shift(&#39;d&#39;,4) = &#39;h&#39;Constraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou want to build n new buildings in a city. The new buildings will be built in a line and are labeled from 1 to n.\nHowever, there are city restrictions on the heights of the new buildings:\n<ul>\n\t<li>The height of each building must be a non-negative integer.</li>\n\t<li>The height of the first building must be 0.</li>\n\t<li>The height difference between any two adjacent buildings cannot exceed 1.</li>\n</ul>\nAdditionally, there are city restrictions on the maximum height of specific buildings. These restrictions are given as a 2D integer array restrictions where restrictions[i] = [id<sub>i</sub>, maxHeight<sub>i</sub>] indicates that building id<sub>i</sub> must have a height less than or equal to maxHeight<sub>i</sub>.\nIt is guaranteed that each building will appear at most once in restrictions, and building 1 will not be in restrictions.\nReturn the maximum possible height of the tallest building.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/04/08/ic236-q4-ex1-1.png" style="width: 400px; height: 253px;" />\nInput: n = 5, restrictions = [[2,1],[4,1]]\nOutput: 2\nExplanation: The green area in the image indicates the maximum allowed height for each building.\nWe can build the buildings with heights [0,1,2,1,2], and the tallest building has a height of 2.\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/04/08/ic236-q4-ex2.png" style="width: 500px; height: 269px;" />\nInput: n = 6, restrictions = []\nOutput: 5\nExplanation: The green area in the image indicates the maximum allowed height for each building.\nWe can build the buildings with heights [0,1,2,3,4,5], and the tallest building has a height of 5.\n<strong class="example">Example 3:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/04/08/ic236-q4-ex3.png" style="width: 500px; height: 187px;" />\nInput: n = 10, restrictions = [[5,3],[2,5],[7,4],[10,3]]\nOutput: 5\nExplanation: The green area in the image indicates the maximum allowed height for each building.\nWe can build the buildings with heights [0,1,2,3,3,4,4,5,4,3], and the tallest building has a height of 5.\nConstraints:\n<ul>\n\t<li>2 &lt;= n &lt;= 10<sup>9</sup></li>\n\t<li>0 &lt;= restrictions.length &lt;= min(n - 1, 10<sup>5</sup>)</li>\n\t<li>2 &lt;= id<sub>i</sub> &lt;= n</li>\n\t<li>id<sub>i</sub>is unique.</li>\n\t<li>0 &lt;= maxHeight<sub>i</sub> &lt;= 10<sup>9</sup></li>\n</ul>\n\n"test_case": [\n  5\n[[2,1],[4,1]]\n  6\n[]\n  10\n[[5,3],[2,5],[7,4],[10,3]]\n],\n"test_case_output": [\'2\', \'5\', \'5\'],\n"test_case_explanation": [\n  "The green area in the image indicates the maximum allowed height for each building.\nWe can build the buildings with heights [0,1,2,1,2], and the tallest building has a height of 2.\n"\n\n  "The green area in the image indicates the maximum allowed height for each building.\nWe can build the buildings with heights [0,1,2,3,4,5], and the tallest building has a height of 5.\n"\n\n  "The green area in the image indicates the maximum allowed height for each building.\nWe can build the buildings with heights [0,1,2,3,3,4,4,5,4,3], and the tallest building has a height of 5.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nA string is considered beautiful if it satisfies the following conditions:\n<ul>\n\t<li>Each of the 5 English vowels (&#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39;, &#39;u&#39;) must appear at least once in it.</li>\n\t<li>The letters must be sorted in alphabetical order (i.e. all &#39;a&#39;s before &#39;e&#39;s, all &#39;e&#39;s before &#39;i&#39;s, etc.).</li>\n</ul>\nFor example, strings aeiou and aaaaaaeiiiioou are considered beautiful, but uaeio, aeoiu, and aaaeeeooo are not beautiful.\nGiven a string word consisting of English vowels, return the length of the longest beautiful substring of word. If no such substring exists, return 0.\nA substring is a contiguous sequence of characters in a string.<strong class="example">Example 1:\nInput: word = aeiaaioaaaaeiiiiouuuooaauuaeiu\nOutput: 13\nExplanation: The longest beautiful substring in word is aaaaeiiiiouuu of length 13.\n<strong class="example">Example 2:\nInput: word = aeeeiiiioooauuuaeiou\nOutput: 5\nExplanation: The longest beautiful substring in word is aeiou of length 5.\n<strong class="example">Example 3:\nInput: word = a\nOutput: 0\nExplanation: There is no beautiful substring, so return 0.\nConstraints:\n<ul>\n\t<li>1 &lt;= word.length &lt;= 5 * 10<sup>5</sup></li>\n\t<li>word consists of characters &#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39;, and &#39;u&#39;.</li>\n</ul>\n\n"test_case": [\n  "aeiaaioaaaaeiiiiouuuooaauuaeiu"\n  "aeeeiiiioooauuuaeiou"\n  "a"\n],\n"test_case_output": [\'13\', \'5\', \'0\'],\n"test_case_explanation": [\n  "The longest beautiful substring in word is aaaaeiiiiouuu of length 13.\n"\n\n  "The longest beautiful substring in word is aeiou of length 5.\n"\n\n  "There is no beautiful substring, so return 0.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThe frequency of an element is the number of times it occurs in an array.\nYou are given an integer array nums and an integer k. In one operation, you can choose an index of nums and increment the element at that index by 1.\nReturn the maximum possible frequency of an element after performing at most k operations.<strong class="example">Example 1:\nInput: nums = [1,2,4], k = 5\nOutput: 3\nExplanation: Increment the first element three times and the second element two times to make nums = [4,4,4].\n4 has a frequency of 3.\n<strong class="example">Example 2:\nInput: nums = [1,4,8,13], k = 5\nOutput: 2\nExplanation: There are multiple optimal solutions:\n- Increment the first element three times to make nums = [4,4,8,13]. 4 has a frequency of 2.\n- Increment the second element four times to make nums = [1,8,8,13]. 8 has a frequency of 2.\n- Increment the third element five times to make nums = [1,4,13,13]. 13 has a frequency of 2.\n<strong class="example">Example 3:\nInput: nums = [3,9,6], k = 2\nOutput: 1\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>5</sup></li>\n\t<li>1 &lt;= nums[i] &lt;= 10<sup>5</sup></li>\n\t<li>1 &lt;= k &lt;= 10<sup>5</sup></li>\n</ul>\n\n"test_case": [\n  [1,2,4]\n5\n  [1,4,8,13]\n5\n  [3,9,6]\n2\n],\n"test_case_output": [\'3\', \'2\', \'1\'],\n"test_case_explanation": [\n  "Increment the first element three times and the second element two times to make nums = [4,4,4].\n4 has a frequency of 3.\n"\n\n  "There are multiple optimal solutions:\n- Increment the first element three times to make nums = [4,4,8,13]. 4 has a frequency of 2.\n- Increment the second element four times to make nums = [1,8,8,13]. 8 has a frequency of 2.\n- Increment the third element five times to make nums = [1,4,13,13]. 13 has a frequency of 2.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer n (in base 10) and a base k, return the sum of the digits of n after converting n from base 10 to base k.\nAfter converting, each digit should be interpreted as a base 10 number, and the sum should be returned in base 10.<strong class="example">Example 1:\nInput: n = 34, k = 6\nOutput: 9\nExplanation: 34 (base 10) expressed in base 6 is 54. 5 + 4 = 9.\n<strong class="example">Example 2:\nInput: n = 10, k = 10\nOutput: 1\nExplanation: n is already in base 10. 1 + 0 = 1.\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 100</li>\n\t<li>2 &lt;= k &lt;= 10</li>\n</ul>\n\n"test_case": [\n  34\n6\n  10\n10\n],\n"test_case_output": [\'9\', \'1\'],\n"test_case_explanation": [\n  "34 (base 10) expressed in base 6 is 54. 5 + 4 = 9.\n"\n\n  "n is already in base 10. 1 + 0 = 1.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThe XOR sum of a list is the bitwise XOR of all its elements. If the list only contains one element, then its XOR sum will be equal to this element.\n<ul>\n\t<li>For example, the XOR sum of [1,2,3,4] is equal to 1 XOR 2 XOR 3 XOR 4 = 4, and the XOR sum of [3] is equal to 3.</li>\n</ul>\nYou are given two 0-indexed arrays arr1 and arr2 that consist only of non-negative integers.\nConsider the list containing the result of arr1[i] AND arr2[j] (bitwise AND) for every (i, j) pair where 0 &lt;= i &lt; arr1.length and 0 &lt;= j &lt; arr2.length.\nReturn the XOR sum of the aforementioned list.<strong class="example">Example 1:\nInput: arr1 = [1,2,3], arr2 = [6,5]\nOutput: 0\nExplanation: The list = [1 AND 6, 1 AND 5, 2 AND 6, 2 AND 5, 3 AND 6, 3 AND 5] = [0,1,2,0,2,1].\nThe XOR sum = 0 XOR 1 XOR 2 XOR 0 XOR 2 XOR 1 = 0.\n<strong class="example">Example 2:\nInput: arr1 = [12], arr2 = [4]\nOutput: 4\nExplanation: The list = [12 AND 4] = [4]. The XOR sum = 4.\nConstraints:\n<ul>\n\t<li>1 &lt;= arr1.length, arr2.length &lt;= 10<sup>5</sup></li>\n\t<li>0 &lt;= arr1[i], arr2[j] &lt;= 10<sup>9</sup></li>\n</ul>\n\n"test_case": [\n  [1,2,3]\n[6,5]\n  [12]\n[4]\n],\n"test_case_output": [\'0\', \'4\'],\n"test_case_explanation": [\n  "The list = [1 AND 6, 1 AND 5, 2 AND 6, 2 AND 5, 3 AND 6, 3 AND 5] = [0,1,2,0,2,1].\nThe XOR sum = 0 XOR 1 XOR 2 XOR 0 XOR 2 XOR 1 = 0.\n"\n\n  "The list = [12 AND 4] = [4]. The XOR sum = 4.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given n\u200b\u200b\u200b\u200b\u200b\u200b tasks labeled from 0 to n - 1 represented by a 2D integer array tasks, where tasks[i] = [enqueueTime<sub>i</sub>, processingTime<sub>i</sub>] means that the i<sup>\u200b\u200b\u200b\u200b\u200b\u200bth</sup>\u200b\u200b\u200b\u200b task will be available to process at enqueueTime<sub>i</sub> and will take processingTime<sub>i</sub><sub> </sub>to finish processing.\nYou have a single-threaded CPU that can process at most one task at a time and will act in the following way:\n<ul>\n\t<li>If the CPU is idle and there are no available tasks to process, the CPU remains idle.</li>\n\t<li>If the CPU is idle and there are available tasks, the CPU will choose the one with the shortest processing time. If multiple tasks have the same shortest processing time, it will choose the task with the smallest index.</li>\n\t<li>Once a task is started, the CPU will process the entire task without stopping.</li>\n\t<li>The CPU can finish a task then start a new one instantly.</li>\n</ul>\nReturn the order in which the CPU will process the tasks.<strong class="example">Example 1:\nInput: tasks = [[1,2],[2,4],[3,2],[4,1]]\nOutput: [0,2,3,1]\nExplanation: The events go as follows: \n- At time = 1, task 0 is available to process. Available tasks = {0}.\n- Also at time = 1, the idle CPU starts processing task 0. Available tasks = {}.\n- At time = 2, task 1 is available to process. Available tasks = {1}.\n- At time = 3, task 2 is available to process. Available tasks = {1, 2}.\n- Also at time = 3, the CPU finishes task 0 and starts processing task 2 as it is the shortest. Available tasks = {1}.\n- At time = 4, task 3 is available to process. Available tasks = {1, 3}.\n- At time = 5, the CPU finishes task 2 and starts processing task 3 as it is the shortest. Available tasks = {1}.\n- At time = 6, the CPU finishes task 3 and starts processing task 1. Available tasks = {}.\n- At time = 10, the CPU finishes task 1 and becomes idle.\n<strong class="example">Example 2:\nInput: tasks = [[7,10],[7,12],[7,5],[7,4],[7,2]]\nOutput: [4,3,2,0,1]\nExplanation: The events go as follows:\n- At time = 7, all the tasks become available. Available tasks = {0,1,2,3,4}.\n- Also at time = 7, the idle CPU starts processing task 4. Available tasks = {0,1,2,3}.\n- At time = 9, the CPU finishes task 4 and starts processing task 3. Available tasks = {0,1,2}.\n- At time = 13, the CPU finishes task 3 and starts processing task 2. Available tasks = {0,1}.\n- At time = 18, the CPU finishes task 2 and starts processing task 0. Available tasks = {1}.\n- At time = 28, the CPU finishes task 0 and starts processing task 1. Available tasks = {}.\n- At time = 40, the CPU finishes task 1 and becomes idle.\nConstraints:\n<ul>\n\t<li>tasks.length == n</li>\n\t<li>1 &lt;= n &lt;= 10<sup>5</sup></li>\n\t<li>1 &lt;= enqueueTime<sub>i</sub>, processingTime<sub>i</sub> &lt;= 10<sup>9</sup></li>\n</ul>\n\n"test_case": [\n  [[1,2],[2,4],[3,2],[4,1]]\n  [[7,10],[7,12],[7,5],[7,4],[7,2]]\n],\n"test_case_output": [\'[0,2,3,1]\', \'[4,3,2,0,1]\'],\n"test_case_explanation": [\n  "The events go as follows: \n- At time = 1, task 0 is available to process. Available tasks = {0}.\n- Also at time = 1, the idle CPU starts processing task 0. Available tasks = {}.\n- At time = 2, task 1 is available to process. Available tasks = {1}.\n- At time = 3, task 2 is available to process. Available tasks = {1, 2}.\n- Also at time = 3, the CPU finishes task 0 and starts processing task 2 as it is the shortest. Available tasks = {1}.\n- At time = 4, task 3 is available to process. Available tasks = {1, 3}.\n- At time = 5, the CPU finishes task 2 and starts processing task 3 as it is the shortest. Available tasks = {1}.\n- At time = 6, the CPU finishes task 3 and starts processing task 1. Available tasks = {}.\n- At time = 10, the CPU finishes task 1 and becomes idle.\n"\n\n  "The events go as follows:\n- At time = 7, all the tasks become available. Available tasks = {0,1,2,3,4}.\n- Also at time = 7, the idle CPU starts processing task 4. Available tasks = {0,1,2,3}.\n- At time = 9, the CPU finishes task 4 and starts processing task 3. Available tasks = {0,1,2}.\n- At time = 13, the CPU finishes task 3 and starts processing task 2. Available tasks = {0,1}.\n- At time = 18, the CPU finishes task 2 and starts processing task 0. Available tasks = {1}.\n- At time = 28, the CPU finishes task 0 and starts processing task 1. Available tasks = {}.\n- At time = 40, the CPU finishes task 1 and becomes idle.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nIt is a sweltering summer day, and a boy wants to buy some ice cream bars.\nAt the store, there are n ice cream bars. You are given an array costs of length n, where costs[i] is the price of the i<sup>th</sup> ice cream bar in coins. The boy initially has coins coins to spend, and he wants to buy as many ice cream bars as possible.\nNote: The boy can buy the ice cream bars in any order.\nReturn the maximum number of ice cream bars the boy can buy with coins coins.\nYou must solve the problem by counting sort.<strong class="example">Example 1:\nInput: costs = [1,3,2,4,1], coins = 7\nOutput: 4\nExplanation: The boy can buy ice cream bars at indices 0,1,2,4 for a total price of 1 + 3 + 2 + 1 = 7.\n<strong class="example">Example 2:\nInput: costs = [10,6,8,7,7,8], coins = 5\nOutput: 0\nExplanation: The boy cannot afford any of the ice cream bars.\n<strong class="example">Example 3:\nInput: costs = [1,6,3,1,2,5], coins = 20\nOutput: 6\nExplanation: The boy can buy all the ice cream bars for a total price of 1 + 6 + 3 + 1 + 2 + 5 = 18.\nConstraints:\n<ul>\n\t<li>costs.length == n</li>\n\t<li>1 &lt;= n &lt;= 10<sup>5</sup></li>\n\t<li>1 &lt;= costs[i] &lt;= 10<sup>5</sup></li>\n\t<li>1 &lt;= coins &lt;= 10<sup>8</sup></li>\n</ul>\n\n"test_case": [\n  [1,3,2,4,1]\n7\n  [10,6,8,7,7,8]\n5\n  [1,6,3,1,2,5]\n20\n],\n"test_case_output": [\'4\', \'0\', \'6\'],\n"test_case_explanation": [\n  "The boy can buy ice cream bars at indices 0,1,2,4 for a total price of 1 + 3 + 2 + 1 = 7.\n"\n\n  "The boy cannot afford any of the ice cream bars.\n"\n\n  "The boy can buy all the ice cream bars for a total price of 1 + 6 + 3 + 1 + 2 + 5 = 18.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nA pangram is a sentence where every letter of the English alphabet appears at least once.\nGiven a string sentence containing only lowercase English letters, return true if sentence is a pangram, or false otherwise.<strong class="example">Example 1:\nInput: sentence = thequickbrownfoxjumpsoverthelazydog\nOutput: true\nExplanation: sentence contains at least one of every letter of the English alphabet.\n<strong class="example">Example 2:\nInput: sentence = leetcode\nOutput: false\nConstraints:\n<ul>\n\t<li>1 &lt;= sentence.length &lt;= 1000</li>\n\t<li>sentence consists of lowercase English letters.</li>\n</ul>\n\n"test_case": [\n  "thequickbrownfoxjumpsoverthelazydog"\n  "leetcode"\n],\n"test_case_output": [\'true\', \'false\'],\n"test_case_explanation": [\n  "sentence contains at least one of every letter of the English alphabet.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a sorted array nums of n non-negative integers and an integer maximumBit. You want to perform the following query n times:\n<ol>\n\t<li>Find a non-negative integer k &lt; 2<sup>maximumBit</sup> such that nums[0] XOR nums[1] XOR ... XOR nums[nums.length-1] XOR k is maximized. k is the answer to the i<sup>th</sup> query.</li>\n\t<li>Remove the last element from the current array nums.</li>\n</ol>\nReturn an array answer, where answer[i] is the answer to the i<sup>th</sup> query.<strong class="example">Example 1:\nInput: nums = [0,1,1,3], maximumBit = 2\nOutput: [0,3,2,3]\nExplanation: The queries are answered as follows:\n1<sup>st</sup> query: nums = [0,1,1,3], k = 0 since 0 XOR 1 XOR 1 XOR 3 XOR 0 = 3.\n2<sup>nd</sup> query: nums = [0,1,1], k = 3 since 0 XOR 1 XOR 1 XOR 3 = 3.\n3<sup>rd</sup> query: nums = [0,1], k = 2 since 0 XOR 1 XOR 2 = 3.\n4<sup>th</sup> query: nums = [0], k = 3 since 0 XOR 3 = 3.\n<strong class="example">Example 2:\nInput: nums = [2,3,4,7], maximumBit = 3\nOutput: [5,2,6,5]\nExplanation: The queries are answered as follows:\n1<sup>st</sup> query: nums = [2,3,4,7], k = 5 since 2 XOR 3 XOR 4 XOR 7 XOR 5 = 7.\n2<sup>nd</sup> query: nums = [2,3,4], k = 2 since 2 XOR 3 XOR 4 XOR 2 = 7.\n3<sup>rd</sup> query: nums = [2,3], k = 6 since 2 XOR 3 XOR 6 = 7.\n4<sup>th</sup> query: nums = [2], k = 5 since 2 XOR 5 = 7.\n<strong class="example">Example 3:\nInput: nums = [0,1,2,2,5,7], maximumBit = 3\nOutput: [4,3,6,4,6,7]\nConstraints:\n<ul>\n\t<li>nums.length == n</li>\n\t<li>1 &lt;= n &lt;= 10<sup>5</sup></li>\n\t<li>1 &lt;= maximumBit &lt;= 20</li>\n\t<li>0 &lt;= nums[i] &lt; 2<sup>maximumBit</sup></li>\n\t<li>nums\u200b\u200b\u200b is sorted in ascending order.</li>\n</ul>\n\n"test_case": [\n  [0,1,1,3]\n2\n  [2,3,4,7]\n3\n  [0,1,2,2,5,7]\n3\n],\n"test_case_output": [\'[0,3,2,3]\', \'[5,2,6,5]\', \'[4,3,6,4,6,7]\'],\n"test_case_explanation": [\n  "The queries are answered as follows:\n1"\n\n  "The queries are answered as follows:\n1"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an array points where points[i] = [x<sub>i</sub>, y<sub>i</sub>] is the coordinates of the i<sup>th</sup> point on a 2D plane. Multiple points can have the same coordinates.\nYou are also given an array queries where queries[j] = [x<sub>j</sub>, y<sub>j</sub>, r<sub>j</sub>] describes a circle centered at (x<sub>j</sub>, y<sub>j</sub>) with a radius of r<sub>j</sub>.\nFor each query queries[j], compute the number of points inside the j<sup>th</sup> circle. Points on the border of the circle are considered inside.\nReturn an array answer, where answer[j] is the answer to the j<sup>th</sup> query.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/25/chrome_2021-03-25_22-34-16.png" style="width: 500px; height: 418px;" />\nInput: points = [[1,3],[3,3],[5,3],[2,2]], queries = [[2,3,1],[4,3,1],[1,1,2]]\nOutput: [3,2,2]\nExplanation: The points and circles are shown above.\nqueries[0] is the green circle, queries[1] is the red circle, and queries[2] is the blue circle.\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/25/chrome_2021-03-25_22-42-07.png" style="width: 500px; height: 390px;" />\nInput: points = [[1,1],[2,2],[3,3],[4,4],[5,5]], queries = [[1,2,2],[2,2,2],[4,3,2],[4,3,3]]\nOutput: [2,3,2,4]\nExplanation: The points and circles are shown above.\nqueries[0] is green, queries[1] is red, queries[2] is blue, and queries[3] is purple.\nConstraints:\n<ul>\n\t<li>1 &lt;= points.length &lt;= 500</li>\n\t<li>points[i].length == 2</li>\n\t<li>0 &lt;= x<sub>\u200b\u200b\u200b\u200b\u200b\u200bi</sub>, y<sub>\u200b\u200b\u200b\u200b\u200b\u200bi</sub> &lt;= 500</li>\n\t<li>1 &lt;= queries.length &lt;= 500</li>\n\t<li>queries[j].length == 3</li>\n\t<li>0 &lt;= x<sub>j</sub>, y<sub>j</sub> &lt;= 500</li>\n\t<li>1 &lt;= r<sub>j</sub> &lt;= 500</li>\n\t<li>All coordinates are integers.</li>\n</ul>Follow up: Could you find the answer for each query in better complexity than O(n)?\n\n"test_case": [\n  [[1,3],[3,3],[5,3],[2,2]]\n[[2,3,1],[4,3,1],[1,1,2]]\n  [[1,1],[2,2],[3,3],[4,4],[5,5]]\n[[1,2,2],[2,2,2],[4,3,2],[4,3,3]]\n],\n"test_case_output": [\'[3,2,2]\', \'[2,3,2,4]\'],\n"test_case_explanation": [\n  "The points and circles are shown above.\nqueries[0] is the green circle, queries[1] is the red circle, and queries[2] is the blue circle.\n"\n\n  "The points and circles are shown above.\nqueries[0] is green, queries[1] is red, queries[2] is blue, and queries[3] is purple.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an integer array nums (0-indexed). In one operation, you can choose an element of the array and increment it by 1.\r\n\r\n<ul>\r\n\t<li>For example, if nums = [1,2,3], you can choose to increment nums[1] to make nums = [1,3,3].</li>\r\n</ul>\r\n\r\nReturn the minimum number of operations needed to make nums strictly increasing.\r\n\r\nAn array nums is strictly increasing if nums[i] &lt; nums[i+1] for all 0 &lt;= i &lt; nums.length - 1. An array of length 1 is trivially strictly increasing.\r\n\r\n\r\n<strong class="example">Example 1:\r\n\r\n\r\nInput: nums = [1,1,1]\r\nOutput: 3\r\nExplanation: You can do the following operations:\r\n1) Increment nums[2], so nums becomes [1,1,2].\r\n2) Increment nums[1], so nums becomes [1,2,2].\r\n3) Increment nums[2], so nums becomes [1,2,3].\r\n\r\n\r\n<strong class="example">Example 2:\r\n\r\n\r\nInput: nums = [1,5,2,4,1]\r\nOutput: 14\r\n\r\n\r\n<strong class="example">Example 3:\r\n\r\n\r\nInput: nums = [8]\r\nOutput: 0\r\n\r\n\r\n\r\nConstraints:\r\n\r\n<ul>\r\n\t<li>1 &lt;= nums.length &lt;= 5000</li>\r\n\t<li>1 &lt;= nums[i] &lt;= 10<sup>4</sup></li>\r\n</ul>\n"test_case": [\n  [1,1,1]\n  [1,5,2,4,1]\n  [8]\n],\n"test_case_output": [\'3\\r\', \'14\\r\', \'0\\r\'],\n"test_case_explanation": [\n  "You can do the following operations:\r\n1) Increment nums[2], so nums becomes [1,1,2].\r\n2) Increment nums[1], so nums becomes [1,2,2].\r\n3) Increment nums[2], so nums becomes [1,2,3].\r\n\r\n\r\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given two integers, m and k, and a stream of integers. You are tasked to implement a data structure that calculates the MKAverage for the stream.\nThe MKAverage can be calculated using these steps:\n<ol>\n\t<li>If the number of the elements in the stream is less than m you should consider the MKAverage to be -1. Otherwise, copy the last m elements of the stream to a separate container.</li>\n\t<li>Remove the smallest k elements and the largest k elements from the container.</li>\n\t<li>Calculate the average value for the rest of the elements rounded down to the nearest integer.</li>\n</ol>\nImplement the MKAverage class:\n<ul>\n\t<li>MKAverage(int m, int k) Initializes the MKAverage object with an empty stream and the two integers m and k.</li>\n\t<li>void addElement(int num) Inserts a new element num into the stream.</li>\n\t<li>int calculateMKAverage() Calculates and returns the MKAverage for the current stream rounded down to the nearest integer.</li>\n</ul><strong class="example">Example 1:\nInput\n[MKAverage, addElement, addElement, calculateMKAverage, addElement, calculateMKAverage, addElement, addElement, addElement, calculateMKAverage]\n[[3, 1], [3], [1], [], [10], [], [5], [5], [5], []]\nOutput\n[null, null, null, -1, null, 3, null, null, null, 5]\nExplanation\nMKAverage obj = new MKAverage(3, 1); \nobj.addElement(3);        // current elements are [3]\nobj.addElement(1);        // current elements are [3,1]\nobj.calculateMKAverage(); // return -1, because m = 3 and only 2 elements exist.\nobj.addElement(10);       // current elements are [3,1,10]\nobj.calculateMKAverage(); // The last 3 elements are [3,1,10].\n                          // After removing smallest and largest 1 element the container will be [3].\n                          // The average of [3] equals 3/1 = 3, return 3\nobj.addElement(5);        // current elements are [3,1,10,5]\nobj.addElement(5);        // current elements are [3,1,10,5,5]\nobj.addElement(5);        // current elements are [3,1,10,5,5,5]\nobj.calculateMKAverage(); // The last 3 elements are [5,5,5].\n                          // After removing smallest and largest 1 element the container will be [5].\n                          // The average of [5] equals 5/1 = 5, return 5\nConstraints:\n<ul>\n\t<li>3 &lt;= m &lt;= 10<sup>5</sup></li>\n\t<li>1 &lt;= k*2 &lt; m</li>\n\t<li>1 &lt;= num &lt;= 10<sup>5</sup></li>\n\t<li>At most 10<sup>5</sup> calls will be made to addElement and calculateMKAverage.</li>\n</ul>\n\n"test_case": [\n  ["MKAverage","addElement","addElement","calculateMKAverage","addElement","calculateMKAverage","addElement","addElement","addElement","calculateMKAverage"]\n[[3,1],[3],[1],[],[10],[],[5],[5],[5],[]]\n],\n"test_case_output": [],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThere is a 3 lane road of length n that consists of n + 1 points labeled from 0 to n. A frog starts at point 0 in the second lane and wants to jump to point n. However, there could be obstacles along the way.\nYou are given an array obstacles of length n + 1 where each obstacles[i] (ranging from 0 to 3) describes an obstacle on the lane obstacles[i] at point i. If obstacles[i] == 0, there are no obstacles at point i. There will be at most one obstacle in the 3 lanes at each point.\n<ul>\n\t<li>For example, if obstacles[2] == 1, then there is an obstacle on lane 1 at point 2.</li>\n</ul>\nThe frog can only travel from point i to point i + 1 on the same lane if there is not an obstacle on the lane at point i + 1. To avoid obstacles, the frog can also perform a side jump to jump to another lane (even if they are not adjacent) at the same point if there is no obstacle on the new lane.\n<ul>\n\t<li>For example, the frog can jump from lane 3 at point 3 to lane 1 at point 3.</li>\n</ul>\nReturn the minimum number of side jumps the frog needs to reach any lane at point n starting from lane 2 at point 0.\nNote: There will be no obstacles on points 0 and n.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/25/ic234-q3-ex1.png" style="width: 500px; height: 244px;" />\nInput: obstacles = [0,1,2,3,0]\nOutput: 2 \nExplanation: The optimal solution is shown by the arrows above. There are 2 side jumps (red arrows).\nNote that the frog can jump over obstacles only when making side jumps (as shown at point 2).\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/25/ic234-q3-ex2.png" style="width: 500px; height: 196px;" />\nInput: obstacles = [0,1,1,3,3,0]\nOutput: 0\nExplanation: There are no obstacles on lane 2. No side jumps are required.\n<strong class="example">Example 3:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/25/ic234-q3-ex3.png" style="width: 500px; height: 196px;" />\nInput: obstacles = [0,2,1,0,3,0]\nOutput: 2\nExplanation: The optimal solution is shown by the arrows above. There are 2 side jumps.\nConstraints:\n<ul>\n\t<li>obstacles.length == n + 1</li>\n\t<li>1 &lt;= n &lt;= 5 * 10<sup>5</sup></li>\n\t<li>0 &lt;= obstacles[i] &lt;= 3</li>\n\t<li>obstacles[0] == obstacles[n] == 0</li>\n</ul>\n\n"test_case": [\n  [0,1,2,3,0]\n  [0,1,1,3,3,0]\n  [0,2,1,0,3,0]\n],\n"test_case_output": [\'2 \', \'0\', \'2\'],\n"test_case_explanation": [\n  "The optimal solution is shown by the arrows above. There are 2 side jumps (red arrows).\nNote that the frog can jump over obstacles only when making side jumps (as shown at point 2).\n"\n\n  "There are no obstacles on lane 2. No side jumps are required.\n"\n\n  "The optimal solution is shown by the arrows above. There are 2 side jumps.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThere are n friends that are playing a game. The friends are sitting in a circle and are numbered from 1 to n in clockwise order. More formally, moving clockwise from the i<sup>th</sup> friend brings you to the (i+1)<sup>th</sup> friend for 1 &lt;= i &lt; n, and moving clockwise from the n<sup>th</sup> friend brings you to the 1<sup>st</sup> friend.\nThe rules of the game are as follows:\n<ol>\n\t<li>Start at the 1<sup>st</sup> friend.</li>\n\t<li>Count the next k friends in the clockwise direction including the friend you started at. The counting wraps around the circle and may count some friends more than once.</li>\n\t<li>The last friend you counted leaves the circle and loses the game.</li>\n\t<li>If there is still more than one friend in the circle, go back to step 2 starting from the friend immediately clockwise of the friend who just lost and repeat.</li>\n\t<li>Else, the last friend in the circle wins the game.</li>\n</ol>\nGiven the number of friends, n, and an integer k, return the winner of the game.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/25/ic234-q2-ex11.png" style="width: 500px; height: 345px;" />\nInput: n = 5, k = 2\nOutput: 3\nExplanation: Here are the steps of the game:\n1) Start at friend 1.\n2) Count 2 friends clockwise, which are friends 1 and 2.\n3) Friend 2 leaves the circle. Next start is friend 3.\n4) Count 2 friends clockwise, which are friends 3 and 4.\n5) Friend 4 leaves the circle. Next start is friend 5.\n6) Count 2 friends clockwise, which are friends 5 and 1.\n7) Friend 1 leaves the circle. Next start is friend 3.\n8) Count 2 friends clockwise, which are friends 3 and 5.\n9) Friend 5 leaves the circle. Only friend 3 is left, so they are the winner.\n<strong class="example">Example 2:\nInput: n = 6, k = 5\nOutput: 1\nExplanation: The friends leave in this order: 5, 4, 6, 2, 3. The winner is friend 1.\nConstraints:\n<ul>\n\t<li>1 &lt;= k &lt;= n &lt;= 500</li>\n</ul>Follow up:\nCould you solve this problem in linear time with constant space?\n\n"test_case": [\n  5\n2\n  6\n5\n],\n"test_case_output": [\'3\', \'1\'],\n"test_case_explanation": [\n  "Here are the steps of the game:\n1) Start at friend 1.\n2) Count 2 friends clockwise, which are friends 1 and 2.\n3) Friend 2 leaves the circle. Next start is friend 3.\n4) Count 2 friends clockwise, which are friends 3 and 4.\n5) Friend 4 leaves the circle. Next start is friend 5.\n6) Count 2 friends clockwise, which are friends 5 and 1.\n7) Friend 1 leaves the circle. Next start is friend 3.\n8) Count 2 friends clockwise, which are friends 3 and 5.\n9) Friend 5 leaves the circle. Only friend 3 is left, so they are the winner.\n"\n\n  "The friends leave in this order: 5, 4, 6, 2, 3. The winner is friend 1.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThere is a function signFunc(x) that returns:\n<ul>\n\t<li>1 if x is positive.</li>\n\t<li>-1 if x is negative.</li>\n\t<li>0 if x is equal to 0.</li>\n</ul>\nYou are given an integer array nums. Let product be the product of all values in the array nums.\nReturn signFunc(product).<strong class="example">Example 1:\nInput: nums = [-1,-2,-3,-4,3,2,1]\nOutput: 1\nExplanation: The product of all values in the array is 144, and signFunc(144) = 1\n<strong class="example">Example 2:\nInput: nums = [1,5,0,2,-3]\nOutput: 0\nExplanation: The product of all values in the array is 0, and signFunc(0) = 0\n<strong class="example">Example 3:\nInput: nums = [-1,1,-1,1,-1]\nOutput: -1\nExplanation: The product of all values in the array is -1, and signFunc(-1) = -1\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 1000</li>\n\t<li>-100 &lt;= nums[i] &lt;= 100</li>\n</ul>\n\n"test_case": [\n  [-1,-2,-3,-4,3,2,1]\n  [1,5,0,2,-3]\n  [-1,1,-1,1,-1]\n],\n"test_case_output": [\'1\', \'0\', \'-1\'],\n"test_case_explanation": [\n  "The product of all values in the array is 144, and signFunc(144) = 1\n"\n\n  "The product of all values in the array is 0, and signFunc(0) = 0\n"\n\n  "The product of all values in the array is -1, and signFunc(-1) = -1\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an array nums that consists of positive integers.\nThe GCD of a sequence of numbers is defined as the greatest integer that divides all the numbers in the sequence evenly.\n<ul>\n\t<li>For example, the GCD of the sequence [4,6,16] is 2.</li>\n</ul>\nA subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.\n<ul>\n\t<li>For example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10].</li>\n</ul>\nReturn the number of different GCDs among all non-empty subsequences of nums.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/17/image-1.png" style="width: 149px; height: 309px;" />\nInput: nums = [6,10,3]\nOutput: 5\nExplanation: The figure shows all the non-empty subsequences and their GCDs.\nThe different GCDs are 6, 10, 3, 2, and 1.\n<strong class="example">Example 2:\nInput: nums = [5,15,40,5,6]\nOutput: 7\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>5</sup></li>\n\t<li>1 &lt;= nums[i] &lt;= 2 * 10<sup>5</sup></li>\n</ul>\n\n"test_case": [\n  [6,10,3]\n  [5,15,40,5,6]\n],\n"test_case_output": [\'5\', \'7\'],\n"test_case_explanation": [\n  "The figure shows all the non-empty subsequences and their GCDs.\nThe different GCDs are 6, 10, 3, 2, and 1.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nA sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each of the words consists of only uppercase and lowercase English letters (no punctuation).\n<ul>\n\t<li>For example, Hello World, HELLO, and hello world hello world are all sentences.</li>\n</ul>\nYou are given a sentence s\u200b\u200b\u200b\u200b\u200b\u200b and an integer k\u200b\u200b\u200b\u200b\u200b\u200b. You want to truncate s\u200b\u200b\u200b\u200b\u200b\u200b such that it contains only the first k\u200b\u200b\u200b\u200b\u200b\u200b words. Return s\u200b\u200b\u200b\u200b\u200b\u200b after truncating it.<strong class="example">Example 1:\nInput: s = Hello how are you Contestant, k = 4\nOutput: Hello how are you\nExplanation:\nThe words in s are [Hello, how are, you, Contestant].\nThe first 4 words are [Hello, how, are, you].\nHence, you should return Hello how are you.\n<strong class="example">Example 2:\nInput: s = What is the solution to this problem, k = 4\nOutput: What is the solution\nExplanation:\nThe words in s are [What, is the, solution, to, this, problem].\nThe first 4 words are [What, is, the, solution].\nHence, you should return What is the solution.\n<strong class="example">Example 3:\nInput: s = chopper is not a tanuki, k = 5\nOutput: chopper is not a tanuki\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 500</li>\n\t<li>k is in the range [1, the number of words in s].</li>\n\t<li>s consist of only lowercase and uppercase English letters and spaces.</li>\n\t<li>The words in s are separated by a single space.</li>\n\t<li>There are no leading or trailing spaces.</li>\n</ul>\n\n"test_case": [\n  "Hello how are you Contestant"\n4\n  "What is the solution to this problem"\n4\n  "chopper is not a tanuki"\n5\n],\n"test_case_output": [\'Hello how are you\', \'What is the solution\', \'chopper is not a tanuki\'],\n"test_case_explanation": [\n  "The words in s are [Hello, how are, you, Contestant].\nThe first 4 words are [Hello, how, are, you].\nHence, you should return Hello how are you.\n"\n\n  "The words in s are [What, is the, solution, to, this, problem].\nThe first 4 words are [What, is, the, solution].\nHence, you should return What is the solution.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThere is a donuts shop that bakes donuts in batches of batchSize. They have a rule where they must serve all of the donuts of a batch before serving any donuts of the next batch. You are given an integer batchSize and an integer array groups, where groups[i] denotes that there is a group of groups[i] customers that will visit the shop. Each customer will get exactly one donut.\nWhen a group visits the shop, all customers of the group must be served before serving any of the following groups. A group will be happy if they all get fresh donuts. That is, the first customer of the group does not receive a donut that was left over from the previous group.\nYou can freely rearrange the ordering of the groups. Return the maximum possible number of happy groups after rearranging the groups.<strong class="example">Example 1:\nInput: batchSize = 3, groups = [1,2,3,4,5,6]\nOutput: 4\nExplanation: You can arrange the groups as [6,2,4,5,1,3]. Then the 1<sup>st</sup>, 2<sup>nd</sup>, 4<sup>th</sup>, and 6<sup>th</sup> groups will be happy.\n<strong class="example">Example 2:\nInput: batchSize = 4, groups = [1,3,2,5,2,2,1,6]\nOutput: 4\nConstraints:\n<ul>\n\t<li>1 &lt;= batchSize &lt;= 9</li>\n\t<li>1 &lt;= groups.length &lt;= 30</li>\n\t<li>1 &lt;= groups[i] &lt;= 10<sup>9</sup></li>\n</ul>\n\n"test_case": [\n  3\n[1,2,3,4,5,6]\n  4\n[1,3,2,5,2,2,1,6]\n],\n"test_case_output": [\'4\', \'4\'],\n"test_case_explanation": [\n  "You can arrange the groups as [6,2,4,5,1,3]. Then the 1"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an array nums that consists of non-negative integers. Let us define rev(x) as the reverse of the non-negative integer x. For example, rev(123) = 321, and rev(120) = 21. A pair of indices (i, j) is nice if it satisfies all of the following conditions:\n<ul>\n\t<li>0 &lt;= i &lt; j &lt; nums.length</li>\n\t<li>nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])</li>\n</ul>\nReturn the number of nice pairs of indices. Since that number can be too large, return it modulo 10<sup>9</sup> + 7.<strong class="example">Example 1:\nInput: nums = [42,11,1,97]\nOutput: 2\nExplanation: The two pairs are:\n - (0,3) : 42 + rev(97) = 42 + 79 = 121, 97 + rev(42) = 97 + 24 = 121.\n - (1,2) : 11 + rev(1) = 11 + 1 = 12, 1 + rev(11) = 1 + 11 = 12.\n<strong class="example">Example 2:\nInput: nums = [13,10,35,24,76]\nOutput: 4\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>5</sup></li>\n\t<li>0 &lt;= nums[i] &lt;= 10<sup>9</sup></li>\n</ul>\n\n"test_case": [\n  [42,11,1,97]\n  [13,10,35,24,76]\n],\n"test_case_output": [\'2\', \'4\'],\n"test_case_explanation": [\n  "The two pairs are:\n - (0,3) : 42 + rev(97) = 42 + 79 = 121, 97 + rev(42) = 97 + 24 = 121.\n - (1,2) : 11 + rev(1) = 11 + 1 = 12, 1 + rev(11) = 1 + 11 = 12.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nA sentence is a list of words that are separated by a single space with no leading or trailing spaces. For example, Hello World, HELLO, hello world hello world are all sentences. Words consist of only uppercase and lowercase English letters.\nTwo sentences sentence1 and sentence2 are similar if it is possible to insert an arbitrary sentence (possibly empty) inside one of these sentences such that the two sentences become equal. For example, sentence1 = Hello my name is Jane and sentence2 = Hello Jane can be made equal by inserting my name is between Hello and Jane in sentence2.\nGiven two sentences sentence1 and sentence2, return true if sentence1 and sentence2 are similar. Otherwise, return false.<strong class="example">Example 1:\nInput: sentence1 = My name is Haley, sentence2 = My Haley\nOutput: true\nExplanation: sentence2 can be turned to sentence1 by inserting name is between My and Haley.\n<strong class="example">Example 2:\nInput: sentence1 = of, sentence2 = A lot of words\nOutput: false\nExplanation: No single sentence can be inserted inside one of the sentences to make it equal to the other.\n<strong class="example">Example 3:\nInput: sentence1 = Eating right now, sentence2 = Eating\nOutput: true\nExplanation: sentence2 can be turned to sentence1 by inserting right now at the end of the sentence.\nConstraints:\n<ul>\n\t<li>1 &lt;= sentence1.length, sentence2.length &lt;= 100</li>\n\t<li>sentence1 and sentence2 consist of lowercase and uppercase English letters and spaces.</li>\n\t<li>The words in sentence1 and sentence2 are separated by a single space.</li>\n</ul>\n\n"test_case": [\n  "My name is Haley"\n"My Haley"\n  "of"\n"A lot of words"\n  "Eating right now"\n"Eating"\n],\n"test_case_output": [\'true\', \'false\', \'true\'],\n"test_case_explanation": [\n  "sentence2 can be turned to sentence1 by inserting name is between My and Haley.\n"\n\n  "No single sentence can be inserted inside one of the sentences to make it equal to the other.\n"\n\n  "sentence2 can be turned to sentence1 by inserting right now at the end of the sentence.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given coordinates, a string that represents the coordinates of a square of the chessboard. Below is a chessboard for your reference.\n<img alt="" src="https://assets.leetcode.com/uploads/2021/02/19/screenshot-2021-02-20-at-22159-pm.png" style="width: 400px; height: 396px;" />\nReturn true if the square is white, and false if the square is black.\nThe coordinate will always represent a valid chessboard square. The coordinate will always have the letter first, and the number second.<strong class="example">Example 1:\nInput: coordinates = a1\nOutput: false\nExplanation: From the chessboard above, the square with coordinates a1 is black, so return false.\n<strong class="example">Example 2:\nInput: coordinates = h3\nOutput: true\nExplanation: From the chessboard above, the square with coordinates h3 is white, so return true.\n<strong class="example">Example 3:\nInput: coordinates = c7\nOutput: false\nConstraints:\n<ul>\n\t<li>coordinates.length == 2</li>\n\t<li>&#39;a&#39; &lt;= coordinates[0] &lt;= &#39;h&#39;</li>\n\t<li>&#39;1&#39; &lt;= coordinates[1] &lt;= &#39;8&#39;</li>\n</ul>\n\n"test_case": [\n  "a1"\n  "h3"\n  "c7"\n],\n"test_case_output": [\'false\', \'true\', \'false\'],\n"test_case_explanation": [\n  "From the chessboard above, the square with coordinates a1 is black, so return false.\n"\n\n  "From the chessboard above, the square with coordinates h3 is white, so return true.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a positive integer primeFactors. You are asked to construct a positive integer n that satisfies the following conditions:\r\n\r\n<ul>\r\n  <li>The number of prime factors of n (not necessarily distinct) is at most primeFactors.</li>\r\n  <li>The number of nice divisors of n is maximized. Note that a divisor of n is nice if it is divisible by every prime factor of n. For example, if n = 12, then its prime factors are [2,2,3], then 6 and 12 are nice divisors, while 3 and 4 are not.</li>\r\n</ul>\r\n\r\nReturn the number of nice divisors of n. Since that number can be too large, return it modulo 10<sup>9</sup> + 7.\r\n\r\nNote that a prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. The prime factors of a number n is a list of prime numbers such that their product equals n.\r\n\r\n\r\n<strong class="example">Example 1:\r\n\r\n\r\nInput: primeFactors = 5\r\nOutput: 6\r\nExplanation: 200 is a valid value of n.\r\nIt has 5 prime factors: [2,2,2,5,5], and it has 6 nice divisors: [10,20,40,50,100,200].\r\nThere is not other value of n that has at most 5 prime factors and more nice divisors.\r\n\r\n\r\n<strong class="example">Example 2:\r\n\r\n\r\nInput: primeFactors = 8\r\nOutput: 18\r\n\r\n\r\n\r\nConstraints:\r\n\r\n<ul>\r\n\t<li>1 &lt;= primeFactors &lt;= 10<sup>9</sup></li>\r\n</ul>\n"test_case": [\n  5\n  8\n],\n"test_case_output": [\'6\\r\', \'18\\r\'],\n"test_case_explanation": [\n  "200 is a valid value of n.\r\nIt has 5 prime factors: [2,2,2,5,5], and it has 6 nice divisors: [10,20,40,50,100,200].\r\nThere is not other value of n that has at most 5 prime factors and more nice divisors.\r\n\r\n\r\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a string s that contains some bracket pairs, with each pair containing a non-empty key.\n<ul>\n\t<li>For example, in the string (name)is(age)yearsold, there are two bracket pairs that contain the keys name and age.</li>\n</ul>\nYou know the values of a wide range of keys. This is represented by a 2D string array knowledge where each knowledge[i] = [key<sub>i</sub>, value<sub>i</sub>] indicates that key key<sub>i</sub> has a value of value<sub>i</sub>.\nYou are tasked to evaluate all of the bracket pairs. When you evaluate a bracket pair that contains some key key<sub>i</sub>, you will:\n<ul>\n\t<li>Replace key<sub>i</sub> and the bracket pair with the key&#39;s corresponding value<sub>i</sub>.</li>\n\t<li>If you do not know the value of the key, you will replace key<sub>i</sub> and the bracket pair with a question mark ? (without the quotation marks).</li>\n</ul>\nEach key will appear at most once in your knowledge. There will not be any nested brackets in s.\nReturn the resulting string after evaluating all of the bracket pairs.<strong class="example">Example 1:\nInput: s = (name)is(age)yearsold, knowledge = [[name,bob],[age,two]]\nOutput: bobistwoyearsold\nExplanation:\nThe key name has a value of bob, so replace (name) with bob.\nThe key age has a value of two, so replace (age) with two.\n<strong class="example">Example 2:\nInput: s = hi(name), knowledge = [[a,b]]\nOutput: hi?\nExplanation: As you do not know the value of the key name, replace (name) with ?.\n<strong class="example">Example 3:\nInput: s = (a)(a)(a)aaa, knowledge = [[a,yes]]\nOutput: yesyesyesaaa\nExplanation: The same key can appear multiple times.\nThe key a has a value of yes, so replace all occurrences of (a) with yes.\nNotice that the as not in a bracket pair are not evaluated.\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 10<sup>5</sup></li>\n\t<li>0 &lt;= knowledge.length &lt;= 10<sup>5</sup></li>\n\t<li>knowledge[i].length == 2</li>\n\t<li>1 &lt;= key<sub>i</sub>.length, value<sub>i</sub>.length &lt;= 10</li>\n\t<li>s consists of lowercase English letters and round brackets &#39;(&#39; and &#39;)&#39;.</li>\n\t<li>Every open bracket &#39;(&#39; in s will have a corresponding close bracket &#39;)&#39;.</li>\n\t<li>The key in each bracket pair of s will be non-empty.</li>\n\t<li>There will not be any nested bracket pairs in s.</li>\n\t<li>key<sub>i</sub> and value<sub>i</sub> consist of lowercase English letters.</li>\n\t<li>Each key<sub>i</sub> in knowledge is unique.</li>\n</ul>\n\n"test_case": [\n  "(name)is(age)yearsold"\n[["name","bob"],["age","two"]]\n  "hi(name)"\n[["a","b"]]\n  "(a)(a)(a)aaa"\n[["a","yes"]]\n],\n"test_case_output": [\'bobistwoyearsold\', \'hi?\', \'yesyesyesaaa\'],\n"test_case_explanation": [\n  "The key name has a value of bob, so replace (name) with bob.\nThe key age has a value of two, so replace (age) with two.\n"\n\n  "As you do not know the value of the key name, replace (name) with ?.\n"\n\n  "The same key can appear multiple times.\nThe key a has a value of yes, so replace all occurrences of (a) with yes.\nNotice that the as not in a bracket pair are not evaluated.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an even integer n\u200b\u200b\u200b\u200b\u200b\u200b. You initially have a permutation perm of size n\u200b\u200b where perm[i] == i\u200b (0-indexed)\u200b\u200b\u200b\u200b.\nIn one operation, you will create a new array arr, and for each i:\n<ul>\n\t<li>If i % 2 == 0, then arr[i] = perm[i / 2].</li>\n\t<li>If i % 2 == 1, then arr[i] = perm[n / 2 + (i - 1) / 2].</li>\n</ul>\nYou will then assign arr\u200b\u200b\u200b\u200b to perm.\nReturn the minimum non-zero number of operations you need to perform on perm to return the permutation to its initial value.<strong class="example">Example 1:\nInput: n = 2\nOutput: 1\nExplanation: perm = [0,1] initially.\nAfter the 1<sup>st</sup> operation, perm = [0,1]\nSo it takes only 1 operation.\n<strong class="example">Example 2:\nInput: n = 4\nOutput: 2\nExplanation: perm = [0,1,2,3] initially.\nAfter the 1<sup>st</sup> operation, perm = [0,2,1,3]\nAfter the 2<sup>nd</sup> operation, perm = [0,1,2,3]\nSo it takes only 2 operations.\n<strong class="example">Example 3:\nInput: n = 6\nOutput: 4\nConstraints:\n<ul>\n\t<li>2 &lt;= n &lt;= 1000</li>\n\t<li>n\u200b\u200b\u200b\u200b\u200b\u200b is even.</li>\n</ul>\n\n"test_case": [\n  2\n  4\n  6\n],\n"test_case_output": [\'1\', \'2\', \'4\'],\n"test_case_explanation": [\n  "perm = [0,1] initially.\nAfter the 1"\n\n  "perm = [0,1,2,3] initially.\nAfter the 1"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a string word that consists of digits and lowercase English letters.\nYou will replace every non-digit character with a space. For example, a123bc34d8ef34 will become  123 34 8 34. Notice that you are left with some integers that are separated by at least one space: 123, 34, 8, and 34.\nReturn the number of different integers after performing the replacement operations on word.\nTwo integers are considered different if their decimal representations without any leading zeros are different.<strong class="example">Example 1:\nInput: word = a123bc34d8ef34\nOutput: 3\nExplanation: The three different integers are 123, 34, and 8. Notice that 34 is only counted once.\n<strong class="example">Example 2:\nInput: word = leet1234code234\nOutput: 2\n<strong class="example">Example 3:\nInput: word = a1b01c001\nOutput: 1\nExplanation: The three integers 1, 01, and 001 all represent the same integer because\nthe leading zeros are ignored when comparing their decimal values.\nConstraints:\n<ul>\n\t<li>1 &lt;= word.length &lt;= 1000</li>\n\t<li>word consists of digits and lowercase English letters.</li>\n</ul>\n\n"test_case": [\n  "a123bc34d8ef34"\n  "leet1234code234"\n  "a1b01c001"\n],\n"test_case_output": [\'3\', \'2\', \'1\'],\n"test_case_explanation": [\n  "The three different integers are 123, 34, and 8. Notice that 34 is only counted once.\n"\n\n  "The three integers 1, 01, and 001 all represent the same integer because\nthe leading zeros are ignored when comparing their decimal values.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a (0-indexed) integer array nums and two integers low and high, return the number of nice pairs.\r\n\r\nA nice pair is a pair (i, j) where 0 &lt;= i &lt; j &lt; nums.length and low &lt;= (nums[i] XOR nums[j]) &lt;= high.\r\n\r\n\r\n<strong class="example">Example 1:\r\n\r\n\r\nInput: nums = [1,4,2,7], low = 2, high = 6\r\nOutput: 6\r\nExplanation: All nice pairs (i, j) are as follows:\r\n    - (0, 1): nums[0] XOR nums[1] = 5 \r\n    - (0, 2): nums[0] XOR nums[2] = 3\r\n    - (0, 3): nums[0] XOR nums[3] = 6\r\n    - (1, 2): nums[1] XOR nums[2] = 6\r\n    - (1, 3): nums[1] XOR nums[3] = 3\r\n    - (2, 3): nums[2] XOR nums[3] = 5\r\n\r\n\r\n<strong class="example">Example 2:\r\n\r\n\r\nInput: nums = [9,8,4,2,1], low = 5, high = 14\r\nOutput: 8\r\nExplanation: All nice pairs (i, j) are as follows:\r\n\u200b\u200b\u200b\u200b\u200b    - (0, 2): nums[0] XOR nums[2] = 13\r\n   - (0, 3): nums[0] XOR nums[3] = 11\r\n   - (0, 4): nums[0] XOR nums[4] = 8\r\n   - (1, 2): nums[1] XOR nums[2] = 12\r\n   - (1, 3): nums[1] XOR nums[3] = 10\r\n   - (1, 4): nums[1] XOR nums[4] = 9\r\n   - (2, 3): nums[2] XOR nums[3] = 6\r\n   - (2, 4): nums[2] XOR nums[4] = 5\r\n\r\n\r\nConstraints:\r\n\r\n<ul>\r\n\t<li>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></li>\r\n\t<li>1 &lt;= nums[i] &lt;= 2 * 10<sup>4</sup></li>\r\n\t<li>1 &lt;= low &lt;= high &lt;= 2 * 10<sup>4</sup></li>\r\n</ul>\n"test_case": [\n  [1,4,2,7]\n2\n6\n  [9,8,4,2,1]\n5\n14\n],\n"test_case_output": [\'6\\r\', \'8\\r\'],\n"test_case_explanation": [\n  "All nice pairs (i, j) are as follows:\r\n    - (0, 1): nums[0] XOR nums[1] = 5 \r\n    - (0, 2): nums[0] XOR nums[2] = 3\r\n    - (0, 3): nums[0] XOR nums[3] = 6\r\n    - (1, 2): nums[1] XOR nums[2] = 6\r\n    - (1, 3): nums[1] XOR nums[3] = 3\r\n    - (2, 3): nums[2] XOR nums[3] = 5\r\n\r\n\r\n"\n\n  "All nice pairs (i, j) are as follows:\r\n\u200b\u200b\u200b\u200b\u200b    - (0, 2): nums[0] XOR nums[2] = 13\r\n   - (0, 3): nums[0] XOR nums[3] = 11\r\n   - (0, 4): nums[0] XOR nums[4] = 8\r\n   - (1, 2): nums[1] XOR nums[2] = 12\r\n   - (1, 3): nums[1] XOR nums[3] = 10\r\n   - (1, 4): nums[1] XOR nums[4] = 9\r\n   - (2, 3): nums[2] XOR nums[3] = 6\r\n   - (2, 4): nums[2] XOR nums[4] = 5\r\n\r\n\r\nConstraints:\r\n\r\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given three positive integers:n, index, and maxSum. You want to construct an array nums (0-indexed) that satisfies the following conditions:\n<ul>\n\t<li>nums.length == n</li>\n\t<li>nums[i] is a positive integer where 0 &lt;= i &lt; n.</li>\n\t<li>abs(nums[i] - nums[i+1]) &lt;= 1 where 0 &lt;= i &lt; n-1.</li>\n\t<li>The sum of all the elements of nums does not exceed maxSum.</li>\n\t<li>nums[index] is maximized.</li>\n</ul>\nReturn nums[index] of the constructed array.\nNote that abs(x) equals x if x &gt;= 0, and -x otherwise.<strong class="example">Example 1:\nInput: n = 4, index = 2,  maxSum = 6\nOutput: 2\nExplanation: nums = [1,2,2,1] is one array that satisfies all the conditions.\nThere are no arrays that satisfy all the conditions and have nums[2] == 3, so 2 is the maximum nums[2].\n<strong class="example">Example 2:\nInput: n = 6, index = 1,  maxSum = 10\nOutput: 3\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= maxSum &lt;= 10<sup>9</sup></li>\n\t<li>0 &lt;= index &lt; n</li>\n</ul>\n\n"test_case": [\n  4\n2\n6\n  6\n1\n10\n],\n"test_case_output": [\'2\', \'3\'],\n"test_case_explanation": [\n  "nums = [1,2,2,1] is one array that satisfies all the conditions.\nThere are no arrays that satisfy all the conditions and have nums[2] == 3, so 2 is the maximum nums[2].\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a 2D integer array orders, where each orders[i] = [price<sub>i</sub>, amount<sub>i</sub>, orderType<sub>i</sub>] denotes that amount<sub>i</sub><sub> </sub>orders have been placed of type orderType<sub>i</sub> at the price price<sub>i</sub>. The orderType<sub>i</sub> is:\r\n\r\n<ul>\r\n\t<li>0 if it is a batch of buy orders, or</li>\r\n\t<li>1 if it is a batch of sell orders.</li>\r\n</ul>\r\n\r\nNote that orders[i] represents a batch of amount<sub>i</sub> independent orders with the same price and order type. All orders represented by orders[i] will be placed before all orders represented by orders[i+1] for all valid i.\r\n\r\nThere is a backlog that consists of orders that have not been executed. The backlog is initially empty. When an order is placed, the following happens:\r\n\r\n<ul>\r\n\t<li>If the order is a buy order, you look at the sell order with the smallest price in the backlog. If that sell order&#39;s price is smaller than or equal to the current buy order&#39;s price, they will match and be executed, and that sell order will be removed from the backlog. Else, the buy order is added to the backlog.</li>\r\n\t<li>Vice versa, if the order is a sell order, you look at the buy order with the largest price in the backlog. If that buy order&#39;s price is larger than or equal to the current sell order&#39;s price, they will match and be executed, and that buy order will be removed from the backlog. Else, the sell order is added to the backlog.</li>\r\n</ul>\r\n\r\nReturn the total amount of orders in the backlog after placing all the orders from the input. Since this number can be large, return it modulo 10<sup>9</sup> + 7.\r\n\r\n\r\n<strong class="example">Example 1:\r\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/11/ex1.png" style="width: 450px; height: 479px;" />\r\n\r\nInput: orders = [[10,5,0],[15,2,1],[25,1,1],[30,4,0]]\r\nOutput: 6\r\nExplanation: Here is what happens with the orders:\r\n- 5 orders of type buy with price 10 are placed. There are no sell orders, so the 5 orders are added to the backlog.\r\n- 2 orders of type sell with price 15 are placed. There are no buy orders with prices larger than or equal to 15, so the 2 orders are added to the backlog.\r\n- 1 order of type sell with price 25 is placed. There are no buy orders with prices larger than or equal to 25 in the backlog, so this order is added to the backlog.\r\n- 4 orders of type buy with price 30 are placed. The first 2 orders are matched with the 2 sell orders of the least price, which is 15 and these 2 sell orders are removed from the backlog. The 3<sup>rd</sup> order is matched with the sell order of the least price, which is 25 and this sell order is removed from the backlog. Then, there are no more sell orders in the backlog, so the 4<sup>th</sup> order is added to the backlog.\r\nFinally, the backlog has 5 buy orders with price 10, and 1 buy order with price 30. So the total number of orders in the backlog is 6.\r\n\r\n\r\n<strong class="example">Example 2:\r\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/11/ex2.png" style="width: 450px; height: 584px;" />\r\n\r\nInput: orders = [[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]\r\nOutput: 999999984\r\nExplanation: Here is what happens with the orders:\r\n- 10<sup>9</sup> orders of type sell with price 7 are placed. There are no buy orders, so the 10<sup>9</sup> orders are added to the backlog.\r\n- 3 orders of type buy with price 15 are placed. They are matched with the 3 sell orders with the least price which is 7, and those 3 sell orders are removed from the backlog.\r\n- 999999995 orders of type buy with price 5 are placed. The least price of a sell order is 7, so the 999999995 orders are added to the backlog.\r\n- 1 order of type sell with price 5 is placed. It is matched with the buy order of the highest price, which is 5, and that buy order is removed from the backlog.\r\nFinally, the backlog has (1000000000-3) sell orders with price 7, and (999999995-1) buy orders with price 5. So the total number of orders = 1999999991, which is equal to 999999984 % (10<sup>9</sup> + 7).\r\n\r\n\r\n\r\nConstraints:\r\n\r\n<ul>\r\n\t<li>1 &lt;= orders.length &lt;= 10<sup>5</sup></li>\r\n\t<li>orders[i].length == 3</li>\r\n\t<li>1 &lt;= price<sub>i</sub>, amount<sub>i</sub> &lt;= 10<sup>9</sup></li>\r\n\t<li>orderType<sub>i</sub> is either 0 or 1.</li>\r\n</ul>\n"test_case": [\n  [[10,5,0],[15,2,1],[25,1,1],[30,4,0]]\n  [[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]\n],\n"test_case_output": [\'6\\r\', \'999999984\\r\'],\n"test_case_explanation": [\n  "Here is what happens with the orders:\r\n- 5 orders of type buy with price 10 are placed. There are no sell orders, so the 5 orders are added to the backlog.\r\n- 2 orders of type sell with price 15 are placed. There are no buy orders with prices larger than or equal to 15, so the 2 orders are added to the backlog.\r\n- 1 order of type sell with price 25 is placed. There are no buy orders with prices larger than or equal to 25 in the backlog, so this order is added to the backlog.\r\n- 4 orders of type buy with price 30 are placed. The first 2 orders are matched with the 2 sell orders of the least price, which is 15 and these 2 sell orders are removed from the backlog. The 3"\n\n  "Here is what happens with the orders:\r\n- 10"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an array of positive integers nums, return the maximum possible sum of an ascending subarray in nums.\nA subarray is defined as a contiguous sequence of numbers in an array.\nA subarray [nums<sub>l</sub>, nums<sub>l+1</sub>, ..., nums<sub>r-1</sub>, nums<sub>r</sub>] is ascending if for all i where l &lt;= i &lt; r, nums<sub>i </sub> &lt; nums<sub>i+1</sub>. Note that a subarray of size 1 is ascending.<strong class="example">Example 1:\nInput: nums = [10,20,30,5,10,50]\nOutput: 65\nExplanation: [5,10,50] is the ascending subarray with the maximum sum of 65.\n<strong class="example">Example 2:\nInput: nums = [10,20,30,40,50]\nOutput: 150\nExplanation: [10,20,30,40,50] is the ascending subarray with the maximum sum of 150.\n<strong class="example">Example 3:\nInput: nums = [12,17,15,13,10,11,12]\nOutput: 33\nExplanation: [10,11,12] is the ascending subarray with the maximum sum of 33.\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 100</li>\n\t<li>1 &lt;= nums[i] &lt;= 100</li>\n</ul>\n\n"test_case": [\n  [10,20,30,5,10,50]\n  [10,20,30,40,50]\n  [12,17,15,13,10,11,12]\n],\n"test_case_output": [\'65\', \'150\', \'33\'],\n"test_case_explanation": [\n  "[5,10,50] is the ascending subarray with the maximum sum of 65.\n"\n\n  "[10,20,30,40,50] is the ascending subarray with the maximum sum of 150.\n"\n\n  "[10,11,12] is the ascending subarray with the maximum sum of 33.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThere is an authentication system that works with authentication tokens. For each session, the user will receive a new authentication token that will expire timeToLive seconds after the currentTime. If the token is renewed, the expiry time will be extended to expire timeToLive seconds after the (potentially different) currentTime.\nImplement the AuthenticationManager class:\n<ul>\n\t<li>AuthenticationManager(int timeToLive) constructs the AuthenticationManager and sets the timeToLive.</li>\n\t<li>generate(string tokenId, int currentTime) generates a new token with the given tokenId at the given currentTime in seconds.</li>\n\t<li>renew(string tokenId, int currentTime) renews the unexpired token with the given tokenId at the given currentTime in seconds. If there are no unexpired tokens with the given tokenId, the request is ignored, and nothing happens.</li>\n\t<li>countUnexpiredTokens(int currentTime) returns the number of unexpired tokens at the given currentTime.</li>\n</ul>\nNote that if a token expires at time t, and another action happens on time t (renew or countUnexpiredTokens), the expiration takes place before the other actions.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/02/25/copy-of-pc68_q2.png" style="width: 500px; height: 287px;" />\nInput\n[AuthenticationManager, renew, generate, countUnexpiredTokens, generate, renew, renew, countUnexpiredTokens]\n[[5], [aaa, 1], [aaa, 2], [6], [bbb, 7], [aaa, 8], [bbb, 10], [15]]\nOutput\n[null, null, null, 1, null, null, null, 0]\nExplanation\nAuthenticationManager authenticationManager = new AuthenticationManager(5); // Constructs the AuthenticationManager with timeToLive = 5 seconds.\nauthenticationManager.renew(aaa, 1); // No token exists with tokenId aaa at time 1, so nothing happens.\nauthenticationManager.generate(aaa, 2); // Generates a new token with tokenId aaa at time 2.\nauthenticationManager.countUnexpiredTokens(6); // The token with tokenId aaa is the only unexpired one at time 6, so return 1.\nauthenticationManager.generate(bbb, 7); // Generates a new token with tokenId bbb at time 7.\nauthenticationManager.renew(aaa, 8); // The token with tokenId aaa expired at time 7, and 8 &gt;= 7, so at time 8 the renew request is ignored, and nothing happens.\nauthenticationManager.renew(bbb, 10); // The token with tokenId bbb is unexpired at time 10, so the renew request is fulfilled and now the token will expire at time 15.\nauthenticationManager.countUnexpiredTokens(15); // The token with tokenId bbb expires at time 15, and the token with tokenId aaa expired at time 7, so currently no token is unexpired, so return 0.\nConstraints:\n<ul>\n\t<li>1 &lt;= timeToLive &lt;= 10<sup>8</sup></li>\n\t<li>1 &lt;= currentTime &lt;= 10<sup>8</sup></li>\n\t<li>1 &lt;= tokenId.length &lt;= 5</li>\n\t<li>tokenId consists only of lowercase letters.</li>\n\t<li>All calls to generate will contain unique values of tokenId.</li>\n\t<li>The values of currentTime across all the function calls will be strictly increasing.</li>\n\t<li>At most 2000 calls will be made to all functions combined.</li>\n</ul>\n\n"test_case": [\n  ["AuthenticationManager","renew","generate","countUnexpiredTokens","generate","renew","renew","countUnexpiredTokens"]\n[[5],["aaa",1],["aaa",2],[6],["bbb",7],["aaa",8],["bbb",10],[15]]\n],\n"test_case_output": [],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an alphanumeric string s, return the second largest numerical digit that appears in s, or -1 if it does not exist.\nAn alphanumeric string is a string consisting of lowercase English letters and digits.<strong class="example">Example 1:\nInput: s = dfa12321afd\nOutput: 2\nExplanation: The digits that appear in s are [1, 2, 3]. The second largest digit is 2.\n<strong class="example">Example 2:\nInput: s = abc1111\nOutput: -1\nExplanation: The digits that appear in s are [1]. There is no second largest digit. \nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 500</li>\n\t<li>s consists of only lowercase English letters and/or digits.</li>\n</ul>\n\n"test_case": [\n  "dfa12321afd"\n  "abc1111"\n],\n"test_case_output": [\'2\', \'-1\'],\n"test_case_explanation": [\n  "The digits that appear in s are [1, 2, 3]. The second largest digit is 2.\n"\n\n  "The digits that appear in s are [1]. There is no second largest digit. \nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an array of integers nums (0-indexed) and an integer k.\nThe score of a subarray (i, j) is defined as min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1). A good subarray is a subarray where i &lt;= k &lt;= j.\nReturn the maximum possible score of a good subarray.<strong class="example">Example 1:\nInput: nums = [1,4,3,7,4,5], k = 3\nOutput: 15\nExplanation: The optimal subarray is (1, 5) with a score of min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15. \n<strong class="example">Example 2:\nInput: nums = [5,5,4,5,4,1,1,1], k = 0\nOutput: 20\nExplanation: The optimal subarray is (0, 4) with a score of min(5,5,4,5,4) * (4-0+1) = 4 * 5 = 20.\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>5</sup></li>\n\t<li>1 &lt;= nums[i] &lt;= 2 * 10<sup>4</sup></li>\n\t<li>0 &lt;= k &lt; nums.length</li>\n</ul>\n\n"test_case": [\n  [1,4,3,7,4,5]\n3\n  [5,5,4,5,4,1,1,1]\n0\n],\n"test_case_output": [\'15\', \'20\'],\n"test_case_explanation": [\n  "The optimal subarray is (1, 5) with a score of min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15. \n"\n\n  "The optimal subarray is (0, 4) with a score of min(5,5,4,5,4) * (4-0+1) = 4 * 5 = 20.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThere is a school that has classes of students and each class will be having a final exam. You are given a 2D integer array classes, where classes[i] = [pass<sub>i</sub>, total<sub>i</sub>]. You know beforehand that in the i<sup>th</sup> class, there are total<sub>i</sub> total students, but only pass<sub>i</sub> number of students will pass the exam.\nYou are also given an integer extraStudents. There are another extraStudents brilliant students that are guaranteed to pass the exam of any class they are assigned to. You want to assign each of the extraStudents students to a class in a way that maximizes the average pass ratio across all the classes.\nThe pass ratio of a class is equal to the number of students of the class that will pass the exam divided by the total number of students of the class. The average pass ratio is the sum of pass ratios of all the classes divided by the number of the classes.\nReturn the maximum possible average pass ratio after assigning the extraStudents students. Answers within 10<sup>-5</sup> of the actual answer will be accepted.<strong class="example">Example 1:\nInput: classes = [[1,2],[3,5],[2,2]], extraStudents = 2\nOutput: 0.78333\nExplanation: You can assign the two extra students to the first class. The average pass ratio will be equal to (3/4 + 3/5 + 2/2) / 3 = 0.78333.\n<strong class="example">Example 2:\nInput: classes = [[2,4],[3,9],[4,5],[2,10]], extraStudents = 4\nOutput: 0.53485\nConstraints:\n<ul>\n\t<li>1 &lt;= classes.length &lt;= 10<sup>5</sup></li>\n\t<li>classes[i].length == 2</li>\n\t<li>1 &lt;= pass<sub>i</sub> &lt;= total<sub>i</sub> &lt;= 10<sup>5</sup></li>\n\t<li>1 &lt;= extraStudents &lt;= 10<sup>5</sup></li>\n</ul>\n\n"test_case": [\n  [[1,2],[3,5],[2,2]]\n2\n  [[2,4],[3,9],[4,5],[2,10]]\n4\n],\n"test_case_output": [\'0.78333\', \'0.53485\'],\n"test_case_explanation": [\n  "You can assign the two extra students to the first class. The average pass ratio will be equal to (3/4 + 3/5 + 2/2) / 3 = 0.78333.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThere is an undirected star graph consisting of n nodes labeled from 1 to n. A star graph is a graph where there is one center node and exactly n - 1 edges that connect the center node with every other node.\nYou are given a 2D integer array edges where each edges[i] = [u<sub>i</sub>, v<sub>i</sub>] indicates that there is an edge between the nodes u<sub>i</sub> and v<sub>i</sub>. Return the center of the given star graph.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/02/24/star_graph.png" style="width: 331px; height: 321px;" />\nInput: edges = [[1,2],[2,3],[4,2]]\nOutput: 2\nExplanation: As shown in the figure above, node 2 is connected to every other node, so 2 is the center.\n<strong class="example">Example 2:\nInput: edges = [[1,2],[5,1],[1,3],[1,4]]\nOutput: 1\nConstraints:\n<ul>\n\t<li>3 &lt;= n &lt;= 10<sup>5</sup></li>\n\t<li>edges.length == n - 1</li>\n\t<li>edges[i].length == 2</li>\n\t<li>1 &lt;= u<sub>i,</sub> v<sub>i</sub> &lt;= n</li>\n\t<li>u<sub>i</sub> != v<sub>i</sub></li>\n\t<li>The given edges represent a valid star graph.</li>\n</ul>\n\n"test_case": [\n  [[1,2],[2,3],[4,2]]\n  [[1,2],[5,1],[1,3],[1,4]]\n],\n"test_case_output": [\'2\', \'1\'],\n"test_case_explanation": [\n  "As shown in the figure above, node 2 is connected to every other node, so 2 is the center.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an array nums\u200b\u200b\u200b and an integer k\u200b\u200b\u200b\u200b\u200b. The <font face="monospace">XOR</font> of a segment [left, right] where left &lt;= right is the XOR of all the elements with indices between left and right, inclusive: nums[left] XOR nums[left+1] XOR ... XOR nums[right].\nReturn the minimum number of elements to change in the array such that the XOR of all segments of size k\u200b\u200b\u200b\u200b\u200b\u200b is equal to zero.<strong class="example">Example 1:\nInput: nums = [1,2,0,3,0], k = 1\nOutput: 3\nExplanation: Modify the array from [1,2,0,3,0] to from [0,0,0,0,0].\n<strong class="example">Example 2:\nInput: nums = [3,4,5,2,1,7,3,4,7], k = 3\nOutput: 3\nExplanation: Modify the array from [3,4,5,2,1,7,3,4,7] to [3,4,7,3,4,7,3,4,7].\n<strong class="example">Example 3:\nInput: nums = [1,2,4,1,2,5,1,2,6], k = 3\nOutput: 3\nExplanation: Modify the array from [1,2,4,1,2,5,1,2,6] to [1,2,3,1,2,3,1,2,3].Constraints:\n<ul>\n\t<li>1 &lt;= k &lt;= nums.length &lt;= 2000</li>\n\t<li>\u200b\u200b\u200b\u200b\u200b\u200b0 &lt;= nums[i] &lt; 2<sup>10</sup></li>\n</ul>\n\n"test_case": [\n  [1,2,0,3,0]\n1\n  [3,4,5,2,1,7,3,4,7]\n3\n  [1,2,4,1,2,5,1,2,6]\n3\n],\n"test_case_output": [\'3\', \'3\', \'3\'],\n"test_case_explanation": [\n  "Modify the array from [1,2,0,3,0] to from [0,0,0,0,0].\n"\n\n  "Modify the array from [3,4,5,2,1,7,3,4,7] to [3,4,7,3,4,7,3,4,7].\n"\n\n  "Modify the array from [1,2,4,1,2,5,1,2,6] to [1,2,3,1,2,3,1,2,3].Constraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThere is an undirected weighted connected graph. You are given a positive integer n which denotes that the graph has n nodes labeled from 1 to n, and an array edges where each edges[i] = [u<sub>i</sub>, v<sub>i</sub>, weight<sub>i</sub>] denotes that there is an edge between nodes u<sub>i</sub> and v<sub>i</sub> with weight equal to weight<sub>i</sub>.\nA path from node start to node end is a sequence of nodes [z<sub>0</sub>, z<sub>1</sub>,<sub> </sub>z<sub>2</sub>, ..., z<sub>k</sub>] such that z<sub>0 </sub>= start and z<sub>k</sub> = end and there is an edge between z<sub>i</sub> and z<sub>i+1</sub> where 0 &lt;= i &lt;= k-1.\nThe distance of a path is the sum of the weights on the edges of the path. Let distanceToLastNode(x) denote the shortest distance of a path between node n and node x. A restricted path is a path that also satisfies that distanceToLastNode(z<sub>i</sub>) &gt; distanceToLastNode(z<sub>i+1</sub>) where 0 &lt;= i &lt;= k-1.\nReturn the number of restricted paths from node 1 to node n. Since that number may be too large, return it modulo 10<sup>9</sup> + 7.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/02/17/restricted_paths_ex1.png" style="width: 351px; height: 341px;" />\nInput: n = 5, edges = [[1,2,3],[1,3,3],[2,3,1],[1,4,2],[5,2,2],[3,5,1],[5,4,10]]\nOutput: 3\nExplanation: Each circle contains the node number in black and its distanceToLastNode value in blue. The three restricted paths are:\n1) 1 --&gt; 2 --&gt; 5\n2) 1 --&gt; 2 --&gt; 3 --&gt; 5\n3) 1 --&gt; 3 --&gt; 5\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/02/17/restricted_paths_ex22.png" style="width: 356px; height: 401px;" />\nInput: n = 7, edges = [[1,3,1],[4,1,2],[7,3,4],[2,5,3],[5,6,1],[6,7,2],[7,5,3],[2,6,4]]\nOutput: 1\nExplanation: Each circle contains the node number in black and its distanceToLastNode value in blue. The only restricted path is 1 --&gt; 3 --&gt; 7.\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 2 * 10<sup>4</sup></li>\n\t<li>n - 1 &lt;= edges.length &lt;= 4 * 10<sup>4</sup></li>\n\t<li>edges[i].length == 3</li>\n\t<li>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</li>\n\t<li>u<sub>i </sub>!= v<sub>i</sub></li>\n\t<li>1 &lt;= weight<sub>i</sub> &lt;= 10<sup>5</sup></li>\n\t<li>There is at most one edge between any two nodes.</li>\n\t<li>There is at least one path between any two nodes.</li>\n</ul>\n\n"test_case": [\n  5\n[[1,2,3],[1,3,3],[2,3,1],[1,4,2],[5,2,2],[3,5,1],[5,4,10]]\n  7\n[[1,3,1],[4,1,2],[7,3,4],[2,5,3],[5,6,1],[6,7,2],[7,5,3],[2,6,4]]\n],\n"test_case_output": [\'3\', \'1\'],\n"test_case_explanation": [\n  "Each circle contains the node number in black and its distanceToLastNode value in blue. The three restricted paths are:\n1) 1 --&gt; 2 --&gt; 5\n2) 1 --&gt; 2 --&gt; 3 --&gt; 5\n3) 1 --&gt; 3 --&gt; 5\n"\n\n  "Each circle contains the node number in black and its distanceToLastNode value in blue. The only restricted path is 1 --&gt; 3 --&gt; 7.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an integer array nums and two integers limit and goal. The array nums has an interesting property that abs(nums[i]) &lt;= limit.\nReturn the minimum number of elements you need to add to make the sum of the array equal to goal. The array must maintain its property that abs(nums[i]) &lt;= limit.\nNote that abs(x) equals x if x &gt;= 0, and -x otherwise.<strong class="example">Example 1:\nInput: nums = [1,-1,1], limit = 3, goal = -4\nOutput: 2\nExplanation: You can add -2 and -3, then the sum of the array will be 1 - 1 + 1 - 2 - 3 = -4.\n<strong class="example">Example 2:\nInput: nums = [1,-10,9,1], limit = 100, goal = 0\nOutput: 1\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>5</sup></li>\n\t<li>1 &lt;= limit &lt;= 10<sup>6</sup></li>\n\t<li>-limit &lt;= nums[i] &lt;= limit</li>\n\t<li>-10<sup>9</sup> &lt;= goal &lt;= 10<sup>9</sup></li>\n</ul>\n\n"test_case": [\n  [1,-1,1]\n3\n-4\n  [1,-10,9,1]\n100\n0\n],\n"test_case_output": [\'2\', \'1\'],\n"test_case_explanation": [\n  "You can add -2 and -3, then the sum of the array will be 1 - 1 + 1 - 2 - 3 = -4.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a binary string s \u200b\u200b\u200b\u200b\u200bwithout leading zeros, return true\u200b\u200b\u200b if s contains at most one contiguous segment of ones. Otherwise, return false.<strong class="example">Example 1:\nInput: s = 1001\nOutput: false\nExplanation: The ones do not form a contiguous segment.\n<strong class="example">Example 2:\nInput: s = 110\nOutput: trueConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 100</li>\n\t<li>s[i]\u200b\u200b\u200b\u200b is either &#39;0&#39; or &#39;1&#39;.</li>\n\t<li>s[0] is&#39;1&#39;.</li>\n</ul>\n\n"test_case": [\n  "1001"\n  "110"\n],\n"test_case_output": [\'false\', \'true\'],\n"test_case_explanation": [\n  "The ones do not form a contiguous segment.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an undirected graph defined by an integer n, the number of nodes, and a 2D integer array edges, the edges in the graph, where edges[i] = [u<sub>i</sub>, v<sub>i</sub>] indicates that there is an undirected edge between u<sub>i</sub> and v<sub>i</sub>. You are also given an integer array queries.\nLet incident(a, b) be defined as the number of edges that are connected to either node a or b.\nThe answer to the j<sup>th</sup> query is the number of pairs of nodes (a, b) that satisfy both of the following conditions:\n<ul>\n\t<li>a &lt; b</li>\n\t<li>incident(a, b) &gt; queries[j]</li>\n</ul>\nReturn an array answers such that answers.length == queries.length and answers[j] is the answer of the j<sup>th</sup> query.\nNote that there can be multiple edges between the same two nodes.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/06/08/winword_2021-06-08_00-58-39.png" style="width: 529px; height: 305px;" />\nInput: n = 4, edges = [[1,2],[2,4],[1,3],[2,3],[2,1]], queries = [2,3]\nOutput: [6,5]\nExplanation: The calculations for incident(a, b) are shown in the table above.\nThe answers for each of the queries are as follows:\n- answers[0] = 6. All the pairs have an incident(a, b) value greater than 2.\n- answers[1] = 5. All the pairs except (3, 4) have an incident(a, b) value greater than 3.\n<strong class="example">Example 2:\nInput: n = 5, edges = [[1,5],[1,5],[3,4],[2,5],[1,3],[5,1],[2,3],[2,5]], queries = [1,2,3,4,5]\nOutput: [10,10,9,8,6]\nConstraints:\n<ul>\n\t<li>2 &lt;= n &lt;= 2 * 10<sup>4</sup></li>\n\t<li>1 &lt;= edges.length &lt;= 10<sup>5</sup></li>\n\t<li>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</li>\n\t<li>u<sub>i </sub>!= v<sub>i</sub></li>\n\t<li>1 &lt;= queries.length &lt;= 20</li>\n\t<li>0 &lt;= queries[j] &lt; edges.length</li>\n</ul>\n\n"test_case": [\n  4\n[[1,2],[2,4],[1,3],[2,3],[2,1]]\n[2,3]\n  5\n[[1,5],[1,5],[3,4],[2,5],[1,3],[5,1],[2,3],[2,5]]\n[1,2,3,4,5]\n],\n"test_case_output": [\'[6,5]\', \'[10,10,9,8,6]\'],\n"test_case_explanation": [\n  "The calculations for incident(a, b) are shown in the table above.\nThe answers for each of the queries are as follows:\n- answers[0] = 6. All the pairs have an incident(a, b) value greater than 2.\n- answers[1] = 5. All the pairs except (3, 4) have an incident(a, b) value greater than 3.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThe beauty of a string is the difference in frequencies between the most frequent and least frequent characters.\n<ul>\n\t<li>For example, the beauty of abaacc is 3 - 1 = 2.</li>\n</ul>\nGiven a string s, return the sum of beauty of all of its substrings.<strong class="example">Example 1:\nInput: s = aabcb\nOutput: 5\nExplanation: The substrings with non-zero beauty are [aab,aabc,aabcb,abcb,bcb], each with beauty equal to 1.\n<strong class="example">Example 2:\nInput: s = aabcbaa\nOutput: 17\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;=<sup> </sup>500</li>\n\t<li>s consists of only lowercase English letters.</li>\n</ul>\n\n"test_case": [\n  "aabcb"\n  "aabcbaa"\n],\n"test_case_output": [\'5\', \'17\'],\n"test_case_explanation": [\n  "The substrings with non-zero beauty are [aab,aabc,aabcb,abcb,bcb], each with beauty equal to 1.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer n, return true if it is possible to represent n as the sum of distinct powers of three. Otherwise, return false.\nAn integer y is a power of three if there exists an integer x such that y == 3<sup>x</sup>.<strong class="example">Example 1:\nInput: n = 12\nOutput: true\nExplanation: 12 = 3<sup>1</sup> + 3<sup>2</sup>\n<strong class="example">Example 2:\nInput: n = 91\nOutput: true\nExplanation: 91 = 3<sup>0</sup> + 3<sup>2</sup> + 3<sup>4</sup>\n<strong class="example">Example 3:\nInput: n = 21\nOutput: false\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 10<sup>7</sup></li>\n</ul>\n\n"test_case": [\n  12\n  91\n  21\n],\n"test_case_output": [\'true\', \'true\', \'false\'],\n"test_case_explanation": [\n  "12 = 3"\n\n  "91 = 3"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given two integers, x and y, which represent your current location on a Cartesian grid: (x, y). You are also given an array points where each points[i] = [a<sub>i</sub>, b<sub>i</sub>] represents that a point exists at (a<sub>i</sub>, b<sub>i</sub>). A point is valid if it shares the same x-coordinate or the same y-coordinate as your location.\nReturn the index (0-indexed) of the valid point with the smallest Manhattan distance from your current location. If there are multiple, return the valid point with the smallest index. If there are no valid points, return -1.\nThe Manhattan distance between two points (x<sub>1</sub>, y<sub>1</sub>) and (x<sub>2</sub>, y<sub>2</sub>) is abs(x<sub>1</sub> - x<sub>2</sub>) + abs(y<sub>1</sub> - y<sub>2</sub>).<strong class="example">Example 1:\nInput: x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]]\nOutput: 2\nExplanation: Of all the points, only [3,1], [2,4] and [4,4] are valid. Of the valid points, [2,4] and [4,4] have the smallest Manhattan distance from your current location, with a distance of 1. [2,4] has the smallest index, so return 2.\n<strong class="example">Example 2:\nInput: x = 3, y = 4, points = [[3,4]]\nOutput: 0\nExplanation: The answer is allowed to be on the same location as your current location.\n<strong class="example">Example 3:\nInput: x = 3, y = 4, points = [[2,3]]\nOutput: -1\nExplanation: There are no valid points.Constraints:\n<ul>\n\t<li>1 &lt;= points.length &lt;= 10<sup>4</sup></li>\n\t<li>points[i].length == 2</li>\n\t<li>1 &lt;= x, y, a<sub>i</sub>, b<sub>i</sub> &lt;= 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  3\n4\n[[1,2],[3,1],[2,4],[2,3],[4,4]]\n  3\n4\n[[3,4]]\n  3\n4\n[[2,3]]\n],\n"test_case_output": [\'2\', \'0\', \'-1\'],\n"test_case_explanation": [\n  "Of all the points, only [3,1], [2,4] and [4,4] are valid. Of the valid points, [2,4] and [4,4] have the smallest Manhattan distance from your current location, with a distance of 1. [2,4] has the smallest index, so return 2.\n"\n\n  "The answer is allowed to be on the same location as your current location.\n"\n\n  "There are no valid points.Constraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given two arrays of integers nums1 and <font face="monospace">nums2</font>, possibly of different lengths. The values in the arrays are between 1 and 6, inclusive.\nIn one operation, you can change any integer&#39;s value in any of the arrays to any value between 1 and 6, inclusive.\nReturn the minimum number of operations required to make the sum of values in nums1 equal to the sum of values in nums2. Return -1\u200b\u200b\u200b\u200b\u200b if it is not possible to make the sum of the two arrays equal.<strong class="example">Example 1:\nInput: nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2]\nOutput: 3\nExplanation: You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed.\n- Change nums2[0] to 6. nums1 = [1,2,3,4,5,6], nums2 = [6,1,2,2,2,2].\n- Change nums1[5] to 1. nums1 = [1,2,3,4,5,1], nums2 = [6,1,2,2,2,2].\n- Change nums1[2] to 2. nums1 = [1,2,2,4,5,1], nums2 = [6,1,2,2,2,2].\n<strong class="example">Example 2:\nInput: nums1 = [1,1,1,1,1,1,1], nums2 = [6]\nOutput: -1\nExplanation: There is no way to decrease the sum of nums1 or to increase the sum of nums2 to make them equal.\n<strong class="example">Example 3:\nInput: nums1 = [6,6], nums2 = [1]\nOutput: 3\nExplanation: You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed. \n- Change nums1[0] to 2. nums1 = [2,6], nums2 = [1].\n- Change nums1[1] to 2. nums1 = [2,2], nums2 = [1].\n- Change nums2[0] to 4. nums1 = [2,2], nums2 = [4].\nConstraints:\n<ul>\n\t<li>1 &lt;= nums1.length, nums2.length &lt;= 10<sup>5</sup></li>\n\t<li>1 &lt;= nums1[i], nums2[i] &lt;= 6</li>\n</ul>\n\n"test_case": [\n  [1,2,3,4,5,6]\n[1,1,2,2,2,2]\n  [1,1,1,1,1,1,1]\n[6]\n  [6,6]\n[1]\n],\n"test_case_output": [\'3\', \'-1\', \'3\'],\n"test_case_explanation": [\n  "You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed.\n- Change nums2[0] to 6. nums1 = [1,2,3,4,5,6], nums2 = [6,1,2,2,2,2].\n- Change nums1[5] to 1. nums1 = [1,2,3,4,5,1], nums2 = [6,1,2,2,2,2].\n- Change nums1[2] to 2. nums1 = [1,2,2,4,5,1], nums2 = [6,1,2,2,2,2].\n"\n\n  "There is no way to decrease the sum of nums1 or to increase the sum of nums2 to make them equal.\n"\n\n  "You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed. \n- Change nums1[0] to 2. nums1 = [2,6], nums2 = [1].\n- Change nums1[1] to 2. nums1 = [2,2], nums2 = [1].\n- Change nums2[0] to 4. nums1 = [2,2], nums2 = [4].\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou would like to make dessert and are preparing to buy the ingredients. You have n ice cream base flavors and m types of toppings to choose from. You must follow these rules when making your dessert:\n<ul>\n\t<li>There must be exactly one ice cream base.</li>\n\t<li>You can add one or more types of topping or have no toppings at all.</li>\n\t<li>There are at most two of each type of topping.</li>\n</ul>\nYou are given three inputs:\n<ul>\n\t<li>baseCosts, an integer array of length n, where each baseCosts[i] represents the price of the i<sup>th</sup> ice cream base flavor.</li>\n\t<li>toppingCosts, an integer array of length m, where each toppingCosts[i] is the price of one of the i<sup>th</sup> topping.</li>\n\t<li>target, an integer representing your target price for dessert.</li>\n</ul>\nYou want to make a dessert with a total cost as close to target as possible.\nReturn the closest possible cost of the dessert to target. If there are multiple, return the lower one.<strong class="example">Example 1:\nInput: baseCosts = [1,7], toppingCosts = [3,4], target = 10\nOutput: 10\nExplanation: Consider the following combination (all 0-indexed):\n- Choose base 1: cost 7\n- Take 1 of topping 0: cost 1 x 3 = 3\n- Take 0 of topping 1: cost 0 x 4 = 0\nTotal: 7 + 3 + 0 = 10.\n<strong class="example">Example 2:\nInput: baseCosts = [2,3], toppingCosts = [4,5,100], target = 18\nOutput: 17\nExplanation: Consider the following combination (all 0-indexed):\n- Choose base 1: cost 3\n- Take 1 of topping 0: cost 1 x 4 = 4\n- Take 2 of topping 1: cost 2 x 5 = 10\n- Take 0 of topping 2: cost 0 x 100 = 0\nTotal: 3 + 4 + 10 + 0 = 17. You cannot make a dessert with a total cost of 18.\n<strong class="example">Example 3:\nInput: baseCosts = [3,10], toppingCosts = [2,5], target = 9\nOutput: 8\nExplanation: It is possible to make desserts with cost 8 and 10. Return 8 as it is the lower cost.\nConstraints:\n<ul>\n\t<li>n == baseCosts.length</li>\n\t<li>m == toppingCosts.length</li>\n\t<li>1 &lt;= n, m &lt;= 10</li>\n\t<li>1 &lt;= baseCosts[i], toppingCosts[i] &lt;= 10<sup>4</sup></li>\n\t<li>1 &lt;= target &lt;= 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  [1,7]\n[3,4]\n10\n  [2,3]\n[4,5,100]\n18\n  [3,10]\n[2,5]\n9\n],\n"test_case_output": [\'10\', \'17\', \'8\'],\n"test_case_explanation": [\n  "Consider the following combination (all 0-indexed):\n- Choose base 1: cost 7\n- Take 1 of topping 0: cost 1 x 3 = 3\n- Take 0 of topping 1: cost 0 x 4 = 0\nTotal: 7 + 3 + 0 = 10.\n"\n\n  "Consider the following combination (all 0-indexed):\n- Choose base 1: cost 3\n- Take 1 of topping 0: cost 1 x 4 = 4\n- Take 2 of topping 1: cost 2 x 5 = 10\n- Take 0 of topping 2: cost 0 x 100 = 0\nTotal: 3 + 4 + 10 + 0 = 17. You cannot make a dessert with a total cost of 18.\n"\n\n  "It is possible to make desserts with cost 8 and 10. Return 8 as it is the lower cost.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an array items, where each items[i] = [type<sub>i</sub>, color<sub>i</sub>, name<sub>i</sub>] describes the type, color, and name of the i<sup>th</sup> item. You are also given a rule represented by two strings, ruleKey and ruleValue.\nThe i<sup>th</sup> item is said to match the rule if one of the following is true:\n<ul>\n\t<li>ruleKey == type and ruleValue == type<sub>i</sub>.</li>\n\t<li>ruleKey == color and ruleValue == color<sub>i</sub>.</li>\n\t<li>ruleKey == name and ruleValue == name<sub>i</sub>.</li>\n</ul>\nReturn the number of items that match the given rule.<strong class="example">Example 1:\nInput: items = [[phone,blue,pixel],[computer,silver,lenovo],[phone,gold,iphone]], ruleKey = color, ruleValue = silver\nOutput: 1\nExplanation: There is only one item matching the given rule, which is [computer,silver,lenovo].\n<strong class="example">Example 2:\nInput: items = [[phone,blue,pixel],[computer,silver,phone],[phone,gold,iphone]], ruleKey = type, ruleValue = phone\nOutput: 2\nExplanation: There are only two items matching the given rule, which are [phone,blue,pixel] and [phone,gold,iphone]. Note that the item [computer,silver,phone] does not match.Constraints:\n<ul>\n\t<li>1 &lt;= items.length &lt;= 10<sup>4</sup></li>\n\t<li>1 &lt;= type<sub>i</sub>.length, color<sub>i</sub>.length, name<sub>i</sub>.length, ruleValue.length &lt;= 10</li>\n\t<li>ruleKey is equal to either type, color, or name.</li>\n\t<li>All strings consist only of lowercase letters.</li>\n</ul>\n\n"test_case": [\n  [["phone","blue","pixel"],["computer","silver","lenovo"],["phone","gold","iphone"]]\n"color"\n"silver"\n  [["phone","blue","pixel"],["computer","silver","phone"],["phone","gold","iphone"]]\n"type"\n"phone"\n],\n"test_case_output": [\'1\', \'2\'],\n"test_case_explanation": [\n  "There is only one item matching the given rule, which is [computer,silver,lenovo].\n"\n\n  "There are only two items matching the given rule, which are [phone,blue,pixel] and [phone,gold,iphone]. Note that the item [computer,silver,phone] does not match.Constraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given two strings, word1 and word2. You want to construct a string in the following manner:\n<ul>\n\t<li>Choose some non-empty subsequence subsequence1 from word1.</li>\n\t<li>Choose some non-empty subsequence subsequence2 from word2.</li>\n\t<li>Concatenate the subsequences: subsequence1 + subsequence2, to make the string.</li>\n</ul>\nReturn the length of the longest palindrome that can be constructed in the described manner. If no palindromes can be constructed, return 0.\nA subsequence of a string s is a string that can be made by deleting some (possibly none) characters from s without changing the order of the remaining characters.\nA palindrome is a string that reads the same forwardas well as backward.<strong class="example">Example 1:\nInput: word1 = cacb, word2 = cbba\nOutput: 5\nExplanation: Choose ab from word1 and cba from word2 to make abcba, which is a palindrome.\n<strong class="example">Example 2:\nInput: word1 = ab, word2 = ab\nOutput: 3\nExplanation: Choose ab from word1 and a from word2 to make aba, which is a palindrome.\n<strong class="example">Example 3:\nInput: word1 = aa, word2 = bb\nOutput: 0\nExplanation: You cannot construct a palindrome from the described method, so return 0.Constraints:\n<ul>\n\t<li>1 &lt;= word1.length, word2.length &lt;= 1000</li>\n\t<li>word1 and word2 consist of lowercase English letters.</li>\n</ul>\n\n"test_case": [\n  "cacb"\n"cbba"\n  "ab"\n"ab"\n  "aa"\n"bb"\n],\n"test_case_output": [\'5\', \'3\', \'0\'],\n"test_case_explanation": [\n  "Choose ab from word1 and cba from word2 to make abcba, which is a palindrome.\n"\n\n  "Choose ab from word1 and a from word2 to make aba, which is a palindrome.\n"\n\n  "You cannot construct a palindrome from the described method, so return 0.Constraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given two 0-indexed integer arrays nums and multipliers of size n and m respectively, where n &gt;= m.\nYou begin with a score of 0. You want to perform exactly m operations. On the i<sup>th</sup> operation (0-indexed) you will:\n<ul>\n    <li>Choose one integer x from either the start or the end of the array nums.</li>\n    <li>Add multipliers[i] * x to your score.\n    <ul>\n        <li>Note that multipliers[0] corresponds to the first operation, multipliers[1] to the second operation, and so on.</li>\n    </ul>\n    </li>\n    <li>Remove x from nums.</li>\n</ul>\nReturn the maximum score after performing m operations.<strong class="example">Example 1:\nInput: nums = [1,2,3], multipliers = [3,2,1]\nOutput: 14\nExplanation:An optimal solution is as follows:\n- Choose from the end, [1,2,3], adding 3 * 3 = 9 to the score.\n- Choose from the end, [1,2], adding 2 * 2 = 4 to the score.\n- Choose from the end, [1], adding 1 * 1 = 1 to the score.\nThe total score is 9 + 4 + 1 = 14.\n<strong class="example">Example 2:\nInput: nums = [-5,-3,-3,-2,7,1], multipliers = [-10,-5,3,4,6]\nOutput: 102\nExplanation: An optimal solution is as follows:\n- Choose from the start, [-5,-3,-3,-2,7,1], adding -5 * -10 = 50 to the score.\n- Choose from the start, [-3,-3,-2,7,1], adding -3 * -5 = 15 to the score.\n- Choose from the start, [-3,-2,7,1], adding -3 * 3 = -9 to the score.\n- Choose from the end, [-2,7,1], adding 1 * 4 = 4 to the score.\n- Choose from the end, [-2,7], adding 7 * 6 = 42 to the score. \nThe total score is 50 + 15 - 9 + 4 + 42 = 102.\nConstraints:\n<ul>\n\t<li>n == nums.length</li>\n\t<li>m == multipliers.length</li>\n\t<li>1 &lt;= m &lt;= 300</li>\n\t<li>m &lt;= n &lt;= 10<sup>5</sup> </li>\n\t<li>-1000 &lt;= nums[i], multipliers[i] &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  [1,2,3]\n[3,2,1]\n  [-5,-3,-3,-2,7,1]\n[-10,-5,3,4,6]\n],\n"test_case_output": [\'14\', \'102\'],\n"test_case_explanation": [\n  "An optimal solution is as follows:\n- Choose from the end, [1,2,3], adding 3 * 3 = 9 to the score.\n- Choose from the end, [1,2], adding 2 * 2 = 4 to the score.\n- Choose from the end, [1], adding 1 * 1 = 1 to the score.\nThe total score is 9 + 4 + 1 = 14.\n"\n\n  "An optimal solution is as follows:\n- Choose from the start, [-5,-3,-3,-2,7,1], adding -5 * -10 = 50 to the score.\n- Choose from the start, [-3,-3,-2,7,1], adding -3 * -5 = 15 to the score.\n- Choose from the start, [-3,-2,7,1], adding -3 * 3 = -9 to the score.\n- Choose from the end, [-2,7,1], adding 1 * 4 = 4 to the score.\n- Choose from the end, [-2,7], adding 7 * 6 = 42 to the score. \nThe total score is 50 + 15 - 9 + 4 + 42 = 102.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou have n boxes. You are given a binary string boxes of length n, where boxes[i] is &#39;0&#39; if the i<sup>th</sup> box is empty, and &#39;1&#39; if it contains one ball.\nIn one operation, you can move one ball from a box to an adjacent box. Box i is adjacent to box j if abs(i - j) == 1. Note that after doing so, there may be more than one ball in some boxes.\nReturn an array answer of size n, where answer[i] is the minimum number of operations needed to move all the balls to the i<sup>th</sup> box.\nEach answer[i] is calculated considering the initial state of the boxes.<strong class="example">Example 1:\nInput: boxes = 110\nOutput: [1,1,3]\nExplanation: The answer for each box is as follows:\n1) First box: you will have to move one ball from the second box to the first box in one operation.\n2) Second box: you will have to move one ball from the first box to the second box in one operation.\n3) Third box: you will have to move one ball from the first box to the third box in two operations, and move one ball from the second box to the third box in one operation.\n<strong class="example">Example 2:\nInput: boxes = 001011\nOutput: [11,8,5,4,3,4]Constraints:\n<ul>\n\t<li>n == boxes.length</li>\n\t<li>1 &lt;= n &lt;= 2000</li>\n\t<li>boxes[i] is either &#39;0&#39; or &#39;1&#39;.</li>\n</ul>\n\n"test_case": [\n  "110"\n  "001011"\n],\n"test_case_output": [\'[1,1,3]\', \'[11,8,5,4,3,4]\'],\n"test_case_explanation": [\n  "The answer for each box is as follows:\n1) First box: you will have to move one ball from the second box to the first box in one operation.\n2) Second box: you will have to move one ball from the first box to the second box in one operation.\n3) Third box: you will have to move one ball from the first box to the third box in two operations, and move one ball from the second box to the third box in one operation.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given two strings word1 and word2. Merge the strings by adding letters in alternating order, starting with word1. If a string is longer than the other, append the additional letters onto the end of the merged string.\r\n\r\nReturn the merged string.\r\n\r\n\r\n<strong class="example">Example 1:\r\n\r\n\r\nInput: word1 = abc, word2 = pqr\r\nOutput: apbqcr\r\nExplanation:The merged string will be merged as so:\r\nword1:  a   b   c\r\nword2:    p   q   r\r\nmerged: a p b q c r\r\n\r\n\r\n<strong class="example">Example 2:\r\n\r\n\r\nInput: word1 = ab, word2 = pqrs\r\nOutput: apbqrs\r\nExplanation:Notice that as word2 is longer, rs is appended to the end.\r\nword1:  a   b \r\nword2:    p   q   r   s\r\nmerged: a p b q   r   s\r\n\r\n\r\n<strong class="example">Example 3:\r\n\r\n\r\nInput: word1 = abcd, word2 = pq\r\nOutput: apbqcd\r\nExplanation:Notice that as word1 is longer, cd is appended to the end.\r\nword1:  a   b   c   d\r\nword2:    p   q \r\nmerged: a p b q c   d\r\n\r\n\r\n\r\nConstraints:\r\n\r\n<ul>\r\n\t<li>1 &lt;= word1.length, word2.length &lt;= 100</li>\r\n\t<li>word1 and word2 consist of lowercase English letters.</li>\r\n</ul>\n"test_case": [\n  "abc"\n"pqr"\n  "ab"\n"pqrs"\n  "abcd"\n"pq"\n],\n"test_case_output": [\'apbqcr\\r\', \'apbqrs\\r\', \'apbqcd\\r\'],\n"test_case_explanation": [\n  "The merged string will be merged as so:\r\nword1:  a   b   c\r\nword2:    p   q   r\r\nmerged: a p b q c r\r\n\r\n\r\n"\n\n  "Notice that as word2 is longer, rs is appended to the end.\r\nword1:  a   b \r\nword2:    p   q   r   s\r\nmerged: a p b q   r   s\r\n\r\n\r\n"\n\n  "Notice that as word1 is longer, cd is appended to the end.\r\nword1:  a   b   c   d\r\nword2:    p   q \r\nmerged: a p b q c   d\r\n\r\n\r\n\r\nConstraints:\r\n\r\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThere is a tree (i.e.,a connected, undirected graph that has no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges. Each node has a value associated with it, and the root of the tree is node 0.\nTo represent this tree, you are given an integer array nums and a 2D array edges. Each nums[i] represents the i<sup>th</sup> node&#39;s value, and each edges[j] = [u<sub>j</sub>, v<sub>j</sub>] represents an edge between nodes u<sub>j</sub> and v<sub>j</sub> in the tree.\nTwo values x and y are coprime if gcd(x, y) == 1 where gcd(x, y) is the greatest common divisor of x and y.\nAn ancestor of a node i is any other node on the shortest path from node i to the root. A node is not considered an ancestor of itself.\nReturn an array ans of size n, where ans[i] is the closest ancestor to node i such that nums[i] and nums[ans[i]] are coprime, or -1 if there is no such ancestor.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/06/untitled-diagram.png" style="width: 191px; height: 281px;" />\nInput: nums = [2,3,3,2], edges = [[0,1],[1,2],[1,3]]\nOutput: [-1,0,0,1]\nExplanation: In the above figure, each node&#39;s value is in parentheses.\n- Node 0 has no coprime ancestors.\n- Node 1 has only one ancestor, node 0. Their values are coprime (gcd(2,3) == 1).\n- Node 2 has two ancestors, nodes 1 and 0. Node 1&#39;s value is not coprime (gcd(3,3) == 3), but node 0&#39;s\n  value is (gcd(2,3) == 1), so node 0 is the closest valid ancestor.\n- Node 3 has two ancestors, nodes 1 and 0. It is coprime with node 1 (gcd(3,2) == 1), so node 1 is its\n  closest valid ancestor.\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/06/untitled-diagram1.png" style="width: 441px; height: 291px;" />\nInput: nums = [5,6,10,2,3,6,15], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]\nOutput: [-1,0,-1,0,0,0,-1]\nConstraints:\n<ul>\n\t<li>nums.length == n</li>\n\t<li>1 &lt;= nums[i] &lt;= 50</li>\n\t<li>1 &lt;= n &lt;= 10<sup>5</sup></li>\n\t<li>edges.length == n - 1</li>\n\t<li>edges[j].length == 2</li>\n\t<li>0 &lt;= u<sub>j</sub>, v<sub>j</sub> &lt; n</li>\n\t<li>u<sub>j</sub> != v<sub>j</sub></li>\n</ul>\n\n"test_case": [\n  [2,3,3,2]\n[[0,1],[1,2],[1,3]]\n  [5,6,10,2,3,6,15]\n[[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]\n],\n"test_case_output": [\'[-1,0,0,1]\', \'[-1,0,-1,0,0,0,-1]\'],\n"test_case_explanation": [\n  "In the above figure, each node&#39;s value is in parentheses.\n- Node 0 has no coprime ancestors.\n- Node 1 has only one ancestor, node 0. Their values are coprime (gcd(2,3) == 1).\n- Node 2 has two ancestors, nodes 1 and 0. Node 1&#39;s value is not coprime (gcd(3,3) == 3), but node 0&#39;s\n  value is (gcd(2,3) == 1), so node 0 is the closest valid ancestor.\n- Node 3 has two ancestors, nodes 1 and 0. It is coprime with node 1 (gcd(3,2) == 1), so node 1 is its\n  closest valid ancestor.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an integer matrix isWater of size m x n that represents a map of land and water cells.\n<ul>\n\t<li>If isWater[i][j] == 0, cell (i, j) is a land cell.</li>\n\t<li>If isWater[i][j] == 1, cell (i, j) is a water cell.</li>\n</ul>\nYou must assign each cell a height in a way that follows these rules:\n<ul>\n\t<li>The height of each cell must be non-negative.</li>\n\t<li>If the cell is a water cell, its height must be 0.</li>\n\t<li>Any two adjacent cells must have an absolute height difference of at most 1. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).</li>\n</ul>\nFind an assignment of heights such that the maximum height in the matrix is maximized.\nReturn an integer matrix height of size m x n where height[i][j] is cell (i, j)&#39;s height. If there are multiple solutions, return any of them.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/10/screenshot-2021-01-11-at-82045-am.png" style="width: 220px; height: 219px;" />\nInput: isWater = [[0,1],[0,0]]\nOutput: [[1,0],[2,1]]\nExplanation: The image shows the assigned heights of each cell.\nThe blue cell is the water cell, and the green cells are the land cells.\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/10/screenshot-2021-01-11-at-82050-am.png" style="width: 300px; height: 296px;" />\nInput: isWater = [[0,0,1],[1,0,0],[0,0,0]]\nOutput: [[1,1,0],[0,1,1],[1,2,2]]\nExplanation: A height of 2 is the maximum possible height of any assignment.\nAny height assignment that has a maximum height of 2 while still meeting the rules will also be accepted.\nConstraints:\n<ul>\n\t<li>m == isWater.length</li>\n\t<li>n == isWater[i].length</li>\n\t<li>1 &lt;= m, n &lt;= 1000</li>\n\t<li>isWater[i][j] is 0 or 1.</li>\n\t<li>There is at least one water cell.</li>\n</ul>\n\n"test_case": [\n  [[0,1],[0,0]]\n  [[0,0,1],[1,0,0],[0,0,0]]\n],\n"test_case_output": [\'[[1,0],[2,1]]\', \'[[1,1,0],[0,1,1],[1,2,2]]\'],\n"test_case_explanation": [\n  "The image shows the assigned heights of each cell.\nThe blue cell is the water cell, and the green cells are the land cells.\n"\n\n  "A height of 2 is the maximum possible height of any assignment.\nAny height assignment that has a maximum height of 2 while still meeting the rules will also be accepted.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a 2D integer array groups of length n. You are also given an integer array nums.\nYou are asked if you can choose n disjoint subarrays from the array nums such that the i<sup>th</sup> subarray is equal to groups[i] (0-indexed), and if i &gt; 0, the (i-1)<sup>th</sup> subarray appears before the i<sup>th</sup> subarray in nums (i.e. the subarrays must be in the same order as groups).\nReturn true if you can do this task, and false otherwise.\nNote that the subarrays are disjoint if and only if there is no index k such that nums[k] belongs to more than one subarray. A subarray is a contiguous sequence of elements within an array.<strong class="example">Example 1:\nInput: groups = [[1,-1,-1],[3,-2,0]], nums = [1,-1,0,1,-1,-1,3,-2,0]\nOutput: true\nExplanation: You can choose the 0<sup>th</sup> subarray as [1,-1,0,1,-1,-1,3,-2,0] and the 1<sup>st</sup> one as [1,-1,0,1,-1,-1,3,-2,0].\nThese subarrays are disjoint as they share no common nums[k] element.\n<strong class="example">Example 2:\nInput: groups = [[10,-2],[1,2,3,4]], nums = [1,2,3,4,10,-2]\nOutput: false\nExplanation: Note that choosing the subarrays [1,2,3,4,10,-2] and [1,2,3,4,10,-2] is incorrect because they are not in the same order as in groups.\n[10,-2] must come before [1,2,3,4].\n<strong class="example">Example 3:\nInput: groups = [[1,2,3],[3,4]], nums = [7,7,1,2,3,4,7,7]\nOutput: false\nExplanation: Note that choosing the subarrays [7,7,1,2,3,4,7,7] and [7,7,1,2,3,4,7,7] is invalid because they are not disjoint.\nThey share a common elements nums[4] (0-indexed).\nConstraints:\n<ul>\n\t<li>groups.length == n</li>\n\t<li>1 &lt;= n &lt;= 10<sup>3</sup></li>\n\t<li>1 &lt;= groups[i].length, sum(groups[i].length) &lt;= 10<sup><span style="font-size: 10.8333px;">3</span></sup></li>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>3</sup></li>\n\t<li>-10<sup>7</sup> &lt;= groups[i][j], nums[k] &lt;= 10<sup>7</sup></li>\n</ul>\n\n"test_case": [\n  [[1,-1,-1],[3,-2,0]]\n[1,-1,0,1,-1,-1,3,-2,0]\n  [[10,-2],[1,2,3,4]]\n[1,2,3,4,10,-2]\n  [[1,2,3],[3,4]]\n[7,7,1,2,3,4,7,7]\n],\n"test_case_output": [\'true\', \'false\', \'false\'],\n"test_case_explanation": [\n  "You can choose the 0"\n\n  "Note that choosing the subarrays [1,2,3,4,10,-2] and [1,2,3,4,10,-2] is incorrect because they are not in the same order as in groups.\n[10,-2] must come before [1,2,3,4].\n"\n\n  "Note that choosing the subarrays [7,7,1,2,3,4,7,7] and [7,7,1,2,3,4,7,7] is invalid because they are not disjoint.\nThey share a common elements nums[4] (0-indexed).\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nA string s is nice if, for every letter of the alphabet that s contains, it appears both in uppercase and lowercase. For example, abABB is nice because &#39;A&#39; and &#39;a&#39; appear, and &#39;B&#39; and &#39;b&#39; appear. However, abA is not because &#39;b&#39; appears, but &#39;B&#39; does not.\nGiven a string s, return the longest substring of s that is nice. If there are multiple, return the substring of the earliest occurrence. If there are none, return an empty string.<strong class="example">Example 1:\nInput: s = YazaAay\nOutput: aAa\nExplanation: aAa is a nice string because &#39;A/a&#39; is the only letter of the alphabet in s, and both &#39;A&#39; and &#39;a&#39; appear.\naAa is the longest nice substring.\n<strong class="example">Example 2:\nInput: s = Bb\nOutput: Bb\nExplanation: Bb is a nice string because both &#39;B&#39; and &#39;b&#39; appear. The whole string is a substring.\n<strong class="example">Example 3:\nInput: s = c\nOutput: \nExplanation: There are no nice substrings.\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 100</li>\n\t<li>s consists of uppercase and lowercase English letters.</li>\n</ul>\n\n"test_case": [\n  "YazaAay"\n  "Bb"\n  "c"\n],\n"test_case_output": [\'aAa\', \'Bb\', \'\'],\n"test_case_explanation": [\n  "aAa is a nice string because &#39;A/a&#39; is the only letter of the alphabet in s, and both &#39;A&#39; and &#39;a&#39; appear.\naAa is the longest nice substring.\n"\n\n  "Bb is a nice string because both &#39;B&#39; and &#39;b&#39; appear. The whole string is a substring.\n"\n\n  "There are no nice substrings.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an undirected graph. You are given an integer n which is the number of nodes in the graph and an array edges, where each edges[i] = [u<sub>i</sub>, v<sub>i</sub>] indicates that there is an undirected edge between u<sub>i</sub> and v<sub>i</sub>.\nA connected trio is a set of three nodes where there is an edge between every pair of them.\nThe degree of a connected trio is the number of edges where one endpoint is in the trio, and the other is not.\nReturn the minimum degree of a connected trio in the graph, or -1 if the graph has no connected trios.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/26/trios1.png" style="width: 388px; height: 164px;" />\nInput: n = 6, edges = [[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]]\nOutput: 3\nExplanation: There is exactly one trio, which is [1,2,3]. The edges that form its degree are bolded in the figure above.\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/26/trios2.png" style="width: 388px; height: 164px;" />\nInput: n = 7, edges = [[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]]\nOutput: 0\nExplanation: There are exactly three trios:\n1) [1,4,3] with degree 0.\n2) [2,5,6] with degree 2.\n3) [5,6,7] with degree 2.\nConstraints:\n<ul>\n\t<li>2 &lt;= n &lt;= 400</li>\n\t<li>edges[i].length == 2</li>\n\t<li>1 &lt;= edges.length &lt;= n * (n-1) / 2</li>\n\t<li>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</li>\n\t<li>u<sub>i </sub>!= v<sub>i</sub></li>\n\t<li>There are no repeated edges.</li>\n</ul>\n\n"test_case": [\n  6\n[[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]]\n  7\n[[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]]\n],\n"test_case_output": [\'3\', \'0\'],\n"test_case_explanation": [\n  "There is exactly one trio, which is [1,2,3]. The edges that form its degree are bolded in the figure above.\n"\n\n  "There are exactly three trios:\n1) [1,4,3] with degree 0.\n2) [2,5,6] with degree 2.\n3) [5,6,7] with degree 2.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an integer array nums where the i<sup>th</sup> bag contains nums[i] balls. You are also given an integer maxOperations.\nYou can perform the following operation at most maxOperations times:\n<ul>\n\t<li>Take any bag of balls and divide it into two new bags with a positive number of balls.\n\t<ul>\n\t\t<li>For example, a bag of 5 balls can become two new bags of 1 and 4 balls, or two new bags of 2 and 3 balls.</li>\n\t</ul>\n\t</li>\n</ul>\nYour penalty is the maximum number of balls in a bag. You want to minimize your penalty after the operations.\nReturn the minimum possible penalty after performing the operations.<strong class="example">Example 1:\nInput: nums = [9], maxOperations = 2\nOutput: 3\nExplanation: \n- Divide the bag with 9 balls into two bags of sizes 6 and 3. [9] -&gt; [6,3].\n- Divide the bag with 6 balls into two bags of sizes 3 and 3. [6,3] -&gt; [3,3,3].\nThe bag with the most number of balls has 3 balls, so your penalty is 3 and you should return 3.\n<strong class="example">Example 2:\nInput: nums = [2,4,8,2], maxOperations = 4\nOutput: 2\nExplanation:\n- Divide the bag with 8 balls into two bags of sizes 4 and 4. [2,4,8,2] -&gt; [2,4,4,4,2].\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,4,4,4,2] -&gt; [2,2,2,4,4,2].\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,4,4,2] -&gt; [2,2,2,2,2,4,2].\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,2,2,4,2] -&gt; [2,2,2,2,2,2,2,2].\nThe bag with the most number of balls has 2 balls, so your penalty is 2, and you should return 2.\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>5</sup></li>\n\t<li>1 &lt;= maxOperations, nums[i] &lt;= 10<sup>9</sup></li>\n</ul>\n\n"test_case": [\n  [9]\n2\n  [2,4,8,2]\n4\n],\n"test_case_output": [\'3\', \'2\'],\n"test_case_explanation": [\n  "- Divide the bag with 9 balls into two bags of sizes 6 and 3. [9] -&gt; [6,3].\n- Divide the bag with 6 balls into two bags of sizes 3 and 3. [6,3] -&gt; [3,3,3].\nThe bag with the most number of balls has 3 balls, so your penalty is 3 and you should return 3.\n"\n\n  "- Divide the bag with 8 balls into two bags of sizes 4 and 4. [2,4,8,2] -&gt; [2,4,4,4,2].\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,4,4,4,2] -&gt; [2,2,2,4,4,2].\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,4,4,2] -&gt; [2,2,2,2,2,4,2].\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,2,2,4,2] -&gt; [2,2,2,2,2,2,2,2].\nThe bag with the most number of balls has 2 balls, so your penalty is 2, and you should return 2.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a string s, return the number of homogenous substrings of s. Since the answer may be too large, return it modulo 10<sup>9</sup> + 7.\nA string is homogenous if all the characters of the string are the same.\nA substring is a contiguous sequence of characters within a string.<strong class="example">Example 1:\nInput: s = abbcccaa\nOutput: 13\nExplanation: The homogenous substrings are listed as below:\na   appears 3 times.\naa  appears 1 time.\nb   appears 2 times.\nbb  appears 1 time.\nc   appears 3 times.\ncc  appears 2 times.\nccc appears 1 time.\n3 + 1 + 2 + 1 + 3 + 2 + 1 = 13.\n<strong class="example">Example 2:\nInput: s = xy\nOutput: 2\nExplanation: The homogenous substrings are x and y.\n<strong class="example">Example 3:\nInput: s = zzzzz\nOutput: 15\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 10<sup>5</sup></li>\n\t<li>s consists of lowercase letters.</li>\n</ul>\n\n"test_case": [\n  "abbcccaa"\n  "xy"\n  "zzzzz"\n],\n"test_case_output": [\'13\', \'2\', \'15\'],\n"test_case_explanation": [\n  "The homogenous substrings are listed as below:\na   appears 3 times.\naa  appears 1 time.\nb   appears 2 times.\nbb  appears 1 time.\nc   appears 3 times.\ncc  appears 2 times.\nccc appears 1 time.\n3 + 1 + 2 + 1 + 3 + 2 + 1 = 13.\n"\n\n  "The homogenous substrings are x and y.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a string s consisting only of the characters &#39;0&#39; and &#39;1&#39;. In one operation, you can change any &#39;0&#39; to &#39;1&#39; or vice versa.\nThe string is called alternating if no two adjacent characters are equal. For example, the string 010 is alternating, while the string 0100 is not.\nReturn the minimum number of operations needed to make s alternating.<strong class="example">Example 1:\nInput: s = 0100\nOutput: 1\nExplanation: If you change the last character to &#39;1&#39;, s will be 0101, which is alternating.\n<strong class="example">Example 2:\nInput: s = 10\nOutput: 0\nExplanation: s is already alternating.\n<strong class="example">Example 3:\nInput: s = 1111\nOutput: 2\nExplanation: You need two operations to reach 0101 or 1010.\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 10<sup>4</sup></li>\n\t<li>s[i] is either &#39;0&#39; or &#39;1&#39;.</li>\n</ul>\n\n"test_case": [\n  "0100"\n  "10"\n  "1111"\n],\n"test_case_output": [\'1\', \'0\', \'2\'],\n"test_case_explanation": [\n  "If you change the last character to &#39;1&#39;, s will be 0101, which is alternating.\n"\n\n  "s is already alternating.\n"\n\n  "You need two operations to reach 0101 or 1010.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an integer array nums and an integer goal.\nYou want to choose a subsequence of nums such that the sum of its elements is the closest possible to goal. That is, if the sum of the subsequence&#39;s elements is sum, then you want to minimize the absolute difference abs(sum - goal).\nReturn the minimum possible value of abs(sum - goal).\nNote that a subsequence of an array is an array formed by removing some elements (possibly all or none) of the original array.<strong class="example">Example 1:\nInput: nums = [5,-7,3,5], goal = 6\nOutput: 0\nExplanation: Choose the whole array as a subsequence, with a sum of 6.\nThis is equal to the goal, so the absolute difference is 0.\n<strong class="example">Example 2:\nInput: nums = [7,-9,15,-2], goal = -5\nOutput: 1\nExplanation: Choose the subsequence [7,-9,-2], with a sum of -4.\nThe absolute difference is abs(-4 - (-5)) = abs(1) = 1, which is the minimum.\n<strong class="example">Example 3:\nInput: nums = [1,2,3], goal = -7\nOutput: 7\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 40</li>\n\t<li>-10<sup>7</sup> &lt;= nums[i] &lt;= 10<sup>7</sup></li>\n\t<li>-10<sup>9</sup> &lt;= goal &lt;= 10<sup>9</sup></li>\n</ul>\n\n"test_case": [\n  [5,-7,3,5]\n6\n  [7,-9,15,-2]\n-5\n  [1,2,3]\n-7\n],\n"test_case_output": [\'0\', \'1\', \'7\'],\n"test_case_explanation": [\n  "Choose the whole array as a subsequence, with a sum of 6.\nThis is equal to the goal, so the absolute difference is 0.\n"\n\n  "Choose the subsequence [7,-9,-2], with a sum of -4.\nThe absolute difference is abs(-4 - (-5)) = abs(1) = 1, which is the minimum.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given two strings word1 and word2. You want to construct a string merge in the following way: while either word1 or word2 are non-empty, choose one of the following options:\n<ul>\n\t<li>If word1 is non-empty, append the first character in word1 to merge and delete it from word1.\n\t<ul>\n\t\t<li>For example, if word1 = abc and merge = dv, then after choosing this operation, word1 = bc and merge = dva.</li>\n\t</ul>\n\t</li>\n\t<li>If word2 is non-empty, append the first character in word2 to merge and delete it from word2.\n\t<ul>\n\t\t<li>For example, if word2 = abc and merge = , then after choosing this operation, word2 = bc and merge = a.</li>\n\t</ul>\n\t</li>\n</ul>\nReturn the lexicographically largest merge you can construct.\nA string a is lexicographically larger than a string b (of the same length) if in the first position where a and b differ, a has a character strictly larger than the corresponding character in b. For example, abcd is lexicographically larger than abcc because the first position they differ is at the fourth character, and d is greater than c.<strong class="example">Example 1:\nInput: word1 = cabaa, word2 = bcaaa\nOutput: cbcabaaaaa\nExplanation: One way to get the lexicographically largest merge is:\n- Take from word1: merge = c, word1 = abaa, word2 = bcaaa\n- Take from word2: merge = cb, word1 = abaa, word2 = caaa\n- Take from word2: merge = cbc, word1 = abaa, word2 = aaa\n- Take from word1: merge = cbca, word1 = baa, word2 = aaa\n- Take from word1: merge = cbcab, word1 = aa, word2 = aaa\n- Append the remaining 5 a&#39;s from word1 and word2 at the end of merge.\n<strong class="example">Example 2:\nInput: word1 = abcabc, word2 = abdcaba\nOutput: abdcabcabcaba\nConstraints:\n<ul>\n\t<li>1 &lt;= word1.length, word2.length &lt;= 3000</li>\n\t<li>word1 and word2 consist only of lowercase English letters.</li>\n</ul>\n\n"test_case": [\n  "cabaa"\n"bcaaa"\n  "abcabc"\n"abdcaba"\n],\n"test_case_output": [\'cbcabaaaaa\', \'abdcabcabcaba\'],\n"test_case_explanation": [\n  "One way to get the lexicographically largest merge is:\n- Take from word1: merge = c, word1 = abaa, word2 = bcaaa\n- Take from word2: merge = cb, word1 = abaa, word2 = caaa\n- Take from word2: merge = cbc, word1 = abaa, word2 = aaa\n- Take from word1: merge = cbca, word1 = baa, word2 = aaa\n- Take from word1: merge = cbcab, word1 = aa, word2 = aaa\n- Append the remaining 5 a&#39;s from word1 and word2 at the end of merge.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are playing a solitaire game with three piles of stones of sizes a\u200b\u200b\u200b\u200b\u200b\u200b, b,\u200b\u200b\u200b\u200b\u200b\u200b and c\u200b\u200b\u200b\u200b\u200b\u200b respectively. Each turn you choose two different non-empty piles, take one stone from each, and add 1 point to your score. The game stops when there are fewer than two non-empty piles (meaning there are no more available moves).\nGiven three integers a\u200b\u200b\u200b\u200b\u200b, b,\u200b\u200b\u200b\u200b\u200b and c\u200b\u200b\u200b\u200b\u200b, return the maximum score you can get.<strong class="example">Example 1:\nInput: a = 2, b = 4, c = 6\nOutput: 6\nExplanation: The starting state is (2, 4, 6). One optimal set of moves is:\n- Take from 1st and 3rd piles, state is now (1, 4, 5)\n- Take from 1st and 3rd piles, state is now (0, 4, 4)\n- Take from 2nd and 3rd piles, state is now (0, 3, 3)\n- Take from 2nd and 3rd piles, state is now (0, 2, 2)\n- Take from 2nd and 3rd piles, state is now (0, 1, 1)\n- Take from 2nd and 3rd piles, state is now (0, 0, 0)\nThere are fewer than two non-empty piles, so the game ends. Total: 6 points.\n<strong class="example">Example 2:\nInput: a = 4, b = 4, c = 6\nOutput: 7\nExplanation: The starting state is (4, 4, 6). One optimal set of moves is:\n- Take from 1st and 2nd piles, state is now (3, 3, 6)\n- Take from 1st and 3rd piles, state is now (2, 3, 5)\n- Take from 1st and 3rd piles, state is now (1, 3, 4)\n- Take from 1st and 3rd piles, state is now (0, 3, 3)\n- Take from 2nd and 3rd piles, state is now (0, 2, 2)\n- Take from 2nd and 3rd piles, state is now (0, 1, 1)\n- Take from 2nd and 3rd piles, state is now (0, 0, 0)\nThere are fewer than two non-empty piles, so the game ends. Total: 7 points.\n<strong class="example">Example 3:\nInput: a = 1, b = 8, c = 8\nOutput: 8\nExplanation: One optimal set of moves is to take from the 2nd and 3rd piles for 8 turns until they are empty.\nAfter that, there are fewer than two non-empty piles, so the game ends.\nConstraints:\n<ul>\n\t<li>1 &lt;= a, b, c &lt;= 10<sup>5</sup></li>\n</ul>\n\n"test_case": [\n  2\n4\n6\n  4\n4\n6\n  1\n8\n8\n],\n"test_case_output": [\'6\', \'7\', \'8\'],\n"test_case_explanation": [\n  "The starting state is (2, 4, 6). One optimal set of moves is:\n- Take from 1st and 3rd piles, state is now (1, 4, 5)\n- Take from 1st and 3rd piles, state is now (0, 4, 4)\n- Take from 2nd and 3rd piles, state is now (0, 3, 3)\n- Take from 2nd and 3rd piles, state is now (0, 2, 2)\n- Take from 2nd and 3rd piles, state is now (0, 1, 1)\n- Take from 2nd and 3rd piles, state is now (0, 0, 0)\nThere are fewer than two non-empty piles, so the game ends. Total: 6 points.\n"\n\n  "The starting state is (4, 4, 6). One optimal set of moves is:\n- Take from 1st and 2nd piles, state is now (3, 3, 6)\n- Take from 1st and 3rd piles, state is now (2, 3, 5)\n- Take from 1st and 3rd piles, state is now (1, 3, 4)\n- Take from 1st and 3rd piles, state is now (0, 3, 3)\n- Take from 2nd and 3rd piles, state is now (0, 2, 2)\n- Take from 2nd and 3rd piles, state is now (0, 1, 1)\n- Take from 2nd and 3rd piles, state is now (0, 0, 0)\nThere are fewer than two non-empty piles, so the game ends. Total: 7 points.\n"\n\n  "One optimal set of moves is to take from the 2nd and 3rd piles for 8 turns until they are empty.\nAfter that, there are fewer than two non-empty piles, so the game ends.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an array nums, return true if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). Otherwise, return false.\nThere may be duplicates in the original array.\nNote: An array A rotated by x positions results in an array B of the same length such that A[i] == B[(i+x) % A.length], where % is the modulo operation.<strong class="example">Example 1:\nInput: nums = [3,4,5,1,2]\nOutput: true\nExplanation: [1,2,3,4,5] is the original sorted array.\nYou can rotate the array by x = 3 positions to begin on the the element of value 3: [3,4,5,1,2].\n<strong class="example">Example 2:\nInput: nums = [2,1,3,4]\nOutput: false\nExplanation: There is no sorted array once rotated that can make nums.\n<strong class="example">Example 3:\nInput: nums = [1,2,3]\nOutput: true\nExplanation: [1,2,3] is the original sorted array.\nYou can rotate the array by x = 0 positions (i.e. no rotation) to make nums.\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 100</li>\n\t<li>1 &lt;= nums[i] &lt;= 100</li>\n</ul>\n\n"test_case": [\n  [3,4,5,1,2]\n  [2,1,3,4]\n  [1,2,3]\n],\n"test_case_output": [\'true\', \'false\', \'true\'],\n"test_case_explanation": [\n  "[1,2,3,4,5] is the original sorted array.\nYou can rotate the array by x = 3 positions to begin on the the element of value 3: [3,4,5,1,2].\n"\n\n  "There is no sorted array once rotated that can make nums.\n"\n\n  "[1,2,3] is the original sorted array.\nYou can rotate the array by x = 0 positions (i.e. no rotation) to make nums.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an array of events where events[i] = [startDay<sub>i</sub>, endDay<sub>i</sub>, value<sub>i</sub>]. The i<sup>th</sup> event starts at startDay<sub>i</sub><sub> </sub>and ends at endDay<sub>i</sub>, and if you attend this event, you will receive a value of value<sub>i</sub>. You are also given an integer k which represents the maximum number of events you can attend.\nYou can only attend one event at a time. If you choose to attend an event, you must attend the entire event. Note that the end day is inclusive: that is, you cannot attend two events where one of them starts and the other ends on the same day.\nReturn the maximum sum of values that you can receive by attending events.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/10/screenshot-2021-01-11-at-60048-pm.png" style="width: 400px; height: 103px;" />\nInput: events = [[1,2,4],[3,4,3],[2,3,1]], k = 2\nOutput: 7\nExplanation: Choose the green events, 0 and 1 (0-indexed) for a total value of 4 + 3 = 7.\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/10/screenshot-2021-01-11-at-60150-pm.png" style="width: 400px; height: 103px;" />\nInput: events = [[1,2,4],[3,4,3],[2,3,10]], k = 2\nOutput: 10\nExplanation: Choose event 2 for a total value of 10.\nNotice that you cannot attend any other event as they overlap, and that you do not have to attend k events.\n<strong class="example">Example 3:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/10/screenshot-2021-01-11-at-60703-pm.png" style="width: 400px; height: 126px;" />\nInput: events = [[1,1,1],[2,2,2],[3,3,3],[4,4,4]], k = 3\nOutput: 9\nExplanation: Although the events do not overlap, you can only attend 3 events. Pick the highest valued three.Constraints:\n<ul>\n\t<li>1 &lt;= k &lt;= events.length</li>\n\t<li>1 &lt;= k * events.length &lt;= 10<sup>6</sup></li>\n\t<li>1 &lt;= startDay<sub>i</sub> &lt;= endDay<sub>i</sub> &lt;= 10<sup>9</sup></li>\n\t<li>1 &lt;= value<sub>i</sub> &lt;= 10<sup>6</sup></li>\n</ul>\n\n"test_case": [\n  [[1,2,4],[3,4,3],[2,3,1]]\n2\n  [[1,2,4],[3,4,3],[2,3,10]]\n2\n  [[1,1,1],[2,2,2],[3,3,3],[4,4,4]]\n3\n],\n"test_case_output": [\'7\', \'10\', \'9\'],\n"test_case_explanation": [\n  "Choose the green events, 0 and 1 (0-indexed) for a total value of 4 + 3 = 7.\n"\n\n  "Choose event 2 for a total value of 10.\nNotice that you cannot attend any other event as they overlap, and that you do not have to attend k events.\n"\n\n  "Although the events do not overlap, you can only attend 3 events. Pick the highest valued three.Constraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a string s consisting only of characters &#39;a&#39;, &#39;b&#39;, and &#39;c&#39;. You are asked to apply the following algorithm on the string any number of times:\n<ol>\n\t<li>Pick a non-empty prefix from the string s where all the characters in the prefix are equal.</li>\n\t<li>Pick a non-empty suffix from the string s where all the characters in this suffix are equal.</li>\n\t<li>The prefix and the suffix should not intersect at any index.</li>\n\t<li>The characters from the prefix and suffix must be the same.</li>\n\t<li>Delete both the prefix and the suffix.</li>\n</ol>\nReturn the minimum length of s after performing the above operation any number of times (possibly zero times).<strong class="example">Example 1:\nInput: s = ca\nOutput: 2\nExplanation: You can&#39;t remove any characters, so the string stays as is.\n<strong class="example">Example 2:\nInput: s = cabaabac\nOutput: 0\nExplanation: An optimal sequence of operations is:\n- Take prefix = c and suffix = c and remove them, s = abaaba.\n- Take prefix = a and suffix = a and remove them, s = baab.\n- Take prefix = b and suffix = b and remove them, s = aa.\n- Take prefix = a and suffix = a and remove them, s = .\n<strong class="example">Example 3:\nInput: s = aabccabba\nOutput: 3\nExplanation: An optimal sequence of operations is:\n- Take prefix = aa and suffix = a and remove them, s = bccabb.\n- Take prefix = b and suffix = bb and remove them, s = cca.\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 10<sup>5</sup></li>\n\t<li>s only consists of characters &#39;a&#39;, &#39;b&#39;, and &#39;c&#39;.</li>\n</ul>\n\n"test_case": [\n  "ca"\n  "cabaabac"\n  "aabccabba"\n],\n"test_case_output": [\'2\', \'0\', \'3\'],\n"test_case_explanation": [\n  "You can&#39;t remove any characters, so the string stays as is.\n"\n\n  "An optimal sequence of operations is:\n- Take prefix = c and suffix = c and remove them, s = abaaba.\n- Take prefix = a and suffix = a and remove them, s = baab.\n- Take prefix = b and suffix = b and remove them, s = aa.\n- Take prefix = a and suffix = a and remove them, s = .\n"\n\n  "An optimal sequence of operations is:\n- Take prefix = aa and suffix = a and remove them, s = bccabb.\n- Take prefix = b and suffix = bb and remove them, s = cca.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an integer array nums. The absolute sum of a subarray [nums<sub>l</sub>, nums<sub>l+1</sub>, ..., nums<sub>r-1</sub>, nums<sub>r</sub>] is abs(nums<sub>l</sub> + nums<sub>l+1</sub> + ... + nums<sub>r-1</sub> + nums<sub>r</sub>).\nReturn the maximum absolute sum of any (possibly empty) subarray of nums.\nNote that abs(x) is defined as follows:\n<ul>\n\t<li>If x is a negative integer, then abs(x) = -x.</li>\n\t<li>If x is a non-negative integer, then abs(x) = x.</li>\n</ul><strong class="example">Example 1:\nInput: nums = [1,-3,2,3,-4]\nOutput: 5\nExplanation: The subarray [2,3] has absolute sum = abs(2+3) = abs(5) = 5.\n<strong class="example">Example 2:\nInput: nums = [2,-5,1,-4,3,-2]\nOutput: 8\nExplanation: The subarray [-5,1,-4] has absolute sum = abs(-5+1-4) = abs(-8) = 8.\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>5</sup></li>\n\t<li>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  [1,-3,2,3,-4]\n  [2,-5,1,-4,3,-2]\n],\n"test_case_output": [\'5\', \'8\'],\n"test_case_explanation": [\n  "The subarray [2,3] has absolute sum = abs(2+3) = abs(5) = 5.\n"\n\n  "The subarray [-5,1,-4] has absolute sum = abs(-5+1-4) = abs(-8) = 8.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an integer array nums. The unique elements of an array are the elements that appear exactly once in the array.\nReturn the sum of all the unique elements of nums.<strong class="example">Example 1:\nInput: nums = [1,2,3,2]\nOutput: 4\nExplanation: The unique elements are [1,3], and the sum is 4.\n<strong class="example">Example 2:\nInput: nums = [1,1,1,1,1]\nOutput: 0\nExplanation: There are no unique elements, and the sum is 0.\n<strong class="example">Example 3:\nInput: nums = [1,2,3,4,5]\nOutput: 15\nExplanation: The unique elements are [1,2,3,4,5], and the sum is 15.\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 100</li>\n\t<li>1 &lt;= nums[i] &lt;= 100</li>\n</ul>\n\n"test_case": [\n  [1,2,3,2]\n  [1,1,1,1,1]\n  [1,2,3,4,5]\n],\n"test_case_output": [\'4\', \'0\', \'15\'],\n"test_case_explanation": [\n  "The unique elements are [1,3], and the sum is 4.\n"\n\n  "There are no unique elements, and the sum is 0.\n"\n\n  "The unique elements are [1,2,3,4,5], and the sum is 15.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThere is an integer array nums that consists of n unique elements, but you have forgotten it. However, you do remember every pair of adjacent elements in nums.\nYou are given a 2D integer array adjacentPairs of size n - 1 where each adjacentPairs[i] = [u<sub>i</sub>, v<sub>i</sub>] indicates that the elements u<sub>i</sub> and v<sub>i</sub> are adjacent in nums.\nIt is guaranteed that every adjacent pair of elements nums[i] and nums[i+1] will exist in adjacentPairs, either as [nums[i], nums[i+1]] or [nums[i+1], nums[i]]. The pairs can appear in any order.\nReturn the original array nums. If there are multiple solutions, return any of them.<strong class="example">Example 1:\nInput: adjacentPairs = [[2,1],[3,4],[3,2]]\nOutput: [1,2,3,4]\nExplanation: This array has all its adjacent pairs in adjacentPairs.\nNotice that adjacentPairs[i] may not be in left-to-right order.\n<strong class="example">Example 2:\nInput: adjacentPairs = [[4,-2],[1,4],[-3,1]]\nOutput: [-2,4,1,-3]\nExplanation: There can be negative numbers.\nAnother solution is [-3,1,4,-2], which would also be accepted.\n<strong class="example">Example 3:\nInput: adjacentPairs = [[100000,-100000]]\nOutput: [100000,-100000]\nConstraints:\n<ul>\n\t<li>nums.length == n</li>\n\t<li>adjacentPairs.length == n - 1</li>\n\t<li>adjacentPairs[i].length == 2</li>\n\t<li>2 &lt;= n &lt;= 10<sup>5</sup></li>\n\t<li>-10<sup>5</sup> &lt;= nums[i], u<sub>i</sub>, v<sub>i</sub> &lt;= 10<sup>5</sup></li>\n\t<li>There exists some nums that has adjacentPairs as its pairs.</li>\n</ul>\n\n"test_case": [\n  [[2,1],[3,4],[3,2]]\n  [[4,-2],[1,4],[-3,1]]\n  [[100000,-100000]]\n],\n"test_case_output": [\'[1,2,3,4]\', \'[-2,4,1,-3]\', \'[100000,-100000]\'],\n"test_case_explanation": [\n  "This array has all its adjacent pairs in adjacentPairs.\nNotice that adjacentPairs[i] may not be in left-to-right order.\n"\n\n  "There can be negative numbers.\nAnother solution is [-3,1,4,-2], which would also be accepted.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are working in a ball factory where you have n balls numbered from lowLimit up to highLimit inclusive (i.e., n == highLimit - lowLimit + 1), and an infinite number of boxes numbered from 1 to infinity.\nYour job at this factory is to put each ball in the box with a number equal to the sum of digits of the ball&#39;s number. For example, the ball number 321 will be put in the box number 3 + 2 + 1 = 6 and the ball number 10 will be put in the box number 1 + 0 = 1.\nGiven two integers lowLimit and highLimit, return the number of balls in the box with the most balls.<strong class="example">Example 1:\nInput: lowLimit = 1, highLimit = 10\nOutput: 2\nExplanation:\nBox Number:  1 2 3 4 5 6 7 8 9 10 11 ...\nBall Count:  2 1 1 1 1 1 1 1 1 0  0  ...\nBox 1 has the most number of balls with 2 balls.\n<strong class="example">Example 2:\nInput: lowLimit = 5, highLimit = 15\nOutput: 2\nExplanation:\nBox Number:  1 2 3 4 5 6 7 8 9 10 11 ...\nBall Count:  1 1 1 1 2 2 1 1 1 0  0  ...\nBoxes 5 and 6 have the most number of balls with 2 balls in each.\n<strong class="example">Example 3:\nInput: lowLimit = 19, highLimit = 28\nOutput: 2\nExplanation:\nBox Number:  1 2 3 4 5 6 7 8 9 10 11 12 ...\nBall Count:  0 1 1 1 1 1 1 1 1 2  0  0  ...\nBox 10 has the most number of balls with 2 balls.\nConstraints:\n<ul>\n\t<li>1 &lt;= lowLimit &lt;= highLimit &lt;= 10<sup>5</sup></li>\n</ul>\n\n"test_case": [\n  1\n10\n  5\n15\n  19\n28\n],\n"test_case_output": [\'2\', \'2\', \'2\'],\n"test_case_explanation": [\n  "Box Number:  1 2 3 4 5 6 7 8 9 10 11 ...\nBall Count:  2 1 1 1 1 1 1 1 1 0  0  ...\nBox 1 has the most number of balls with 2 balls.\n"\n\n  "Box Number:  1 2 3 4 5 6 7 8 9 10 11 ...\nBall Count:  1 1 1 1 2 2 1 1 1 0  0  ...\nBoxes 5 and 6 have the most number of balls with 2 balls in each.\n"\n\n  "Box Number:  1 2 3 4 5 6 7 8 9 10 11 12 ...\nBall Count:  0 1 1 1 1 1 1 1 1 2  0  0  ...\nBox 10 has the most number of balls with 2 balls.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou have a cubic storeroom where the width, length, and height of the room are all equal to n units. You are asked to place n boxes in this room where each box is a cube of unit side length. There are however some rules to placing the boxes:\n<ul>\n\t<li>You can place the boxes anywhere on the floor.</li>\n\t<li>If box x is placed on top of the box y, then each side of the four vertical sides of the box y must either be adjacent to another box or to a wall.</li>\n</ul>\nGiven an integer n, return the minimum possible number of boxes touching the floor.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/04/3-boxes.png" style="width: 135px; height: 143px;" />\nInput: n = 3\nOutput: 3\nExplanation: The figure above is for the placement of the three boxes.\nThese boxes are placed in the corner of the room, where the corner is on the left side.\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/04/4-boxes.png" style="width: 135px; height: 179px;" />\nInput: n = 4\nOutput: 3\nExplanation: The figure above is for the placement of the four boxes.\nThese boxes are placed in the corner of the room, where the corner is on the left side.\n<strong class="example">Example 3:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/04/10-boxes.png" style="width: 271px; height: 257px;" />\nInput: n = 10\nOutput: 6\nExplanation: The figure above is for the placement of the ten boxes.\nThese boxes are placed in the corner of the room, where the corner is on the back side.Constraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 10<sup>9</sup></li>\n</ul>\n\n"test_case": [\n  3\n  4\n  10\n],\n"test_case_output": [\'3\', \'3\', \'6\'],\n"test_case_explanation": [\n  "The figure above is for the placement of the three boxes.\nThese boxes are placed in the corner of the room, where the corner is on the left side.\n"\n\n  "The figure above is for the placement of the four boxes.\nThese boxes are placed in the corner of the room, where the corner is on the left side.\n"\n\n  "The figure above is for the placement of the ten boxes.\nThese boxes are placed in the corner of the room, where the corner is on the back side.Constraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThere is an integer array perm that is a permutation of the first n positive integers, where n is always odd.\nIt was encoded into another integer array encoded of length n - 1, such that encoded[i] = perm[i] XOR perm[i + 1]. For example, if perm = [1,3,2], then encoded = [2,1].\nGiven the encoded array, return the original array perm. It is guaranteed that the answer exists and is unique.<strong class="example">Example 1:\nInput: encoded = [3,1]\nOutput: [1,2,3]\nExplanation: If perm = [1,2,3], then encoded = [1 XOR 2,2 XOR 3] = [3,1]\n<strong class="example">Example 2:\nInput: encoded = [6,5,4,6]\nOutput: [2,4,1,5,3]\nConstraints:\n<ul>\n\t<li>3 &lt;= n &lt;10<sup>5</sup></li>\n\t<li>nis odd.</li>\n\t<li>encoded.length == n - 1</li>\n</ul>\n\n"test_case": [\n  [3,1]\n  [6,5,4,6]\n],\n"test_case_output": [\'[1,2,3]\', \'[2,4,1,5,3]\'],\n"test_case_explanation": [\n  "If perm = [1,2,3], then encoded = [1 XOR 2,2 XOR 3] = [3,1]\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nOn a social network consisting of m users and some friendships between users, two users can communicate with each other if they know a common language.\nYou are given an integer n, an array languages, and an array friendships where:\n<ul>\n\t<li>There are n languages numbered 1 through n,</li>\n\t<li>languages[i] is the set of languages the i<sup>\u200b\u200b\u200b\u200b\u200b\u200bth</sup>\u200b\u200b\u200b\u200b user knows, and</li>\n\t<li>friendships[i] = [u<sub>\u200b\u200b\u200b\u200b\u200b\u200bi</sub>\u200b\u200b\u200b, v<sub>\u200b\u200b\u200b\u200b\u200b\u200bi</sub>] denotes a friendship between the users u<sup>\u200b\u200b\u200b\u200b\u200b</sup><sub>\u200b\u200b\u200b\u200b\u200b\u200bi</sub>\u200b\u200b\u200b\u200b\u200b and v<sub>i</sub>.</li>\n</ul>\nYou can choose one language and teach it to some users so that all friends can communicate with each other. Return <i data-stringify-type="italic">the</i> <i>minimum </i><i data-stringify-type="italic">number of users you need to teach.</i>\nNote that friendships are not transitive, meaning if x is a friend of y and y is a friend of z, this doesn&#39;t guarantee that x is a friend of z.<strong class="example">Example 1:\nInput: n = 2, languages = [[1],[2],[1,2]], friendships = [[1,2],[1,3],[2,3]]\nOutput: 1\nExplanation: You can either teach user 1 the second language or user 2 the first language.\n<strong class="example">Example 2:\nInput: n = 3, languages = [[2],[1,3],[1,2],[3]], friendships = [[1,4],[1,2],[3,4],[2,3]]\nOutput: 2\nExplanation: Teach the third language to users 1 and 3, yielding two users to teach.\nConstraints:\n<ul>\n\t<li>2 &lt;= n &lt;= 500</li>\n\t<li>languages.length == m</li>\n\t<li>1 &lt;= m &lt;= 500</li>\n\t<li>1 &lt;= languages[i].length &lt;= n</li>\n\t<li>1 &lt;= languages[i][j] &lt;= n</li>\n\t<li>1 &lt;= u<sub>\u200b\u200b\u200b\u200b\u200b\u200bi</sub> &lt; v<sub>\u200b\u200b\u200b\u200b\u200b\u200bi</sub> &lt;= languages.length</li>\n\t<li>1 &lt;= friendships.length &lt;= 500</li>\n\t<li>All tuples (u<sub>\u200b\u200b\u200b\u200b\u200bi, </sub>v<sub>\u200b\u200b\u200b\u200b\u200b\u200bi</sub>) are unique</li>\n\t<li>languages[i] contains only unique values</li>\n</ul>\n\n"test_case": [\n  2\n[[1],[2],[1,2]]\n[[1,2],[1,3],[2,3]]\n  3\n[[2],[1,3],[1,2],[3]]\n[[1,4],[1,2],[3,4],[2,3]]\n],\n"test_case_output": [\'1\', \'2\'],\n"test_case_explanation": [\n  "You can either teach user 1 the second language or user 2 the first language.\n"\n\n  "Teach the third language to users 1 and 3, yielding two users to teach.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThere is a biker going on a road trip. The road trip consists of n + 1 points at different altitudes. The biker starts his trip on point 0 with altitude equal 0.\nYou are given an integer array gain of length n where gain[i] is the net gain in altitude between points i\u200b\u200b\u200b\u200b\u200b\u200b and i + 1 for all (0 &lt;= i &lt; n). Return the highest altitude of a point.<strong class="example">Example 1:\nInput: gain = [-5,1,5,0,-7]\nOutput: 1\nExplanation: The altitudes are [0,-5,-4,1,1,-6]. The highest is 1.\n<strong class="example">Example 2:\nInput: gain = [-4,-3,-2,-1,4,3,2]\nOutput: 0\nExplanation: The altitudes are [0,-4,-7,-9,-10,-6,-3,-1]. The highest is 0.\nConstraints:\n<ul>\n\t<li>n == gain.length</li>\n\t<li>1 &lt;= n &lt;= 100</li>\n\t<li>-100 &lt;= gain[i] &lt;= 100</li>\n</ul>\n\n"test_case": [\n  [-5,1,5,0,-7]\n  [-4,-3,-2,-1,4,3,2]\n],\n"test_case_output": [\'1\', \'0\'],\n"test_case_explanation": [\n  "The altitudes are [0,-5,-4,1,1,-6]. The highest is 1.\n"\n\n  "The altitudes are [0,-4,-7,-9,-10,-6,-3,-1]. The highest is 0.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a binary matrix matrix of size m x n, and you are allowed to rearrange the columns of the matrix in any order.\nReturn the area of the largest submatrix within matrix where every element of the submatrix is 1 after reordering the columns optimally.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/12/29/screenshot-2020-12-30-at-40536-pm.png" style="width: 500px; height: 240px;" />\nInput: matrix = [[0,0,1],[1,1,1],[1,0,1]]\nOutput: 4\nExplanation: You can rearrange the columns as shown above.\nThe largest submatrix of 1s, in bold, has an area of 4.\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/12/29/screenshot-2020-12-30-at-40852-pm.png" style="width: 500px; height: 62px;" />\nInput: matrix = [[1,0,1,0,1]]\nOutput: 3\nExplanation: You can rearrange the columns as shown above.\nThe largest submatrix of 1s, in bold, has an area of 3.\n<strong class="example">Example 3:\nInput: matrix = [[1,1,0],[1,0,1]]\nOutput: 2\nExplanation: Notice that you must rearrange entire columns, and there is no way to make a submatrix of 1s larger than an area of 2.\nConstraints:\n<ul>\n\t<li>m == matrix.length</li>\n\t<li>n == matrix[i].length</li>\n\t<li>1 &lt;= m * n &lt;= 10<sup>5</sup></li>\n\t<li>matrix[i][j] is either 0 or 1.</li>\n</ul>\n\n"test_case": [\n  [[0,0,1],[1,1,1],[1,0,1]]\n  [[1,0,1,0,1]]\n  [[1,1,0],[1,0,1]]\n],\n"test_case_output": [\'4\', \'3\', \'2\'],\n"test_case_explanation": [\n  "You can rearrange the columns as shown above.\nThe largest submatrix of 1s, in bold, has an area of 4.\n"\n\n  "You can rearrange the columns as shown above.\nThe largest submatrix of 1s, in bold, has an area of 3.\n"\n\n  "Notice that you must rearrange entire columns, and there is no way to make a submatrix of 1s larger than an area of 2.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an array nums of distinct positive integers, return the number of tuples (a, b, c, d) such that a * b = c * d where a, b, c, and d are elements of nums, and a != b != c != d.<strong class="example">Example 1:\nInput: nums = [2,3,4,6]\nOutput: 8\nExplanation: There are 8 valid tuples:\n(2,6,3,4) , (2,6,4,3) , (6,2,3,4) , (6,2,4,3)\n(3,4,2,6) , (4,3,2,6) , (3,4,6,2) , (4,3,6,2)\n<strong class="example">Example 2:\nInput: nums = [1,2,4,5,10]\nOutput: 16\nExplanation: There are 16 valid tuples:\n(1,10,2,5) , (1,10,5,2) , (10,1,2,5) , (10,1,5,2)\n(2,5,1,10) , (2,5,10,1) , (5,2,1,10) , (5,2,10,1)\n(2,10,4,5) , (2,10,5,4) , (10,2,4,5) , (10,2,5,4)\n(4,5,2,10) , (4,5,10,2) , (5,4,2,10) , (5,4,10,2)\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 1000</li>\n\t<li>1 &lt;= nums[i] &lt;= 10<sup>4</sup></li>\n\t<li>All elements in nums are distinct.</li>\n</ul>\n\n"test_case": [\n  [2,3,4,6]\n  [1,2,4,5,10]\n],\n"test_case_output": [\'8\', \'16\'],\n"test_case_explanation": [\n  "There are 8 valid tuples:\n(2,6,3,4) , (2,6,4,3) , (6,2,3,4) , (6,2,4,3)\n(3,4,2,6) , (4,3,2,6) , (3,4,6,2) , (4,3,6,2)\n"\n\n  "There are 16 valid tuples:\n(1,10,2,5) , (1,10,5,2) , (10,1,2,5) , (10,1,5,2)\n(2,5,1,10) , (2,5,10,1) , (5,2,1,10) , (5,2,10,1)\n(2,10,4,5) , (2,10,5,4) , (10,2,4,5) , (10,2,5,4)\n(4,5,2,10) , (4,5,10,2) , (5,4,2,10) , (5,4,10,2)\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an array rectangles where rectangles[i] = [l<sub>i</sub>, w<sub>i</sub>] represents the i<sup>th</sup> rectangle of length l<sub>i</sub> and width w<sub>i</sub>.\r\n\r\nYou can cut the i<sup>th</sup> rectangle to form a square with a side length of k if both k &lt;= l<sub>i</sub> and k &lt;= w<sub>i</sub>. For example, if you have a rectangle [4,6], you can cut it to get a square with a side length of at most 4.\r\n\r\nLet maxLen be the side length of the largest square you can obtain from any of the given rectangles.\r\n\r\nReturn the number of rectangles that can make a square with a side length of maxLen.\r\n\r\n\r\n<strong class="example">Example 1:\r\n\r\n\r\nInput: rectangles = [[5,8],[3,9],[5,12],[16,5]]\r\nOutput: 3\r\nExplanation: The largest squares you can get from each rectangle are of lengths [5,3,5,5].\r\nThe largest possible square is of length 5, and you can get it out of 3 rectangles.\r\n\r\n\r\n<strong class="example">Example 2:\r\n\r\n\r\nInput: rectangles = [[2,3],[3,7],[4,3],[3,7]]\r\nOutput: 3\r\n\r\n\r\n\r\nConstraints:\r\n\r\n<ul>\r\n\t<li>1 &lt;= rectangles.length &lt;= 1000</li>\r\n\t<li>rectangles[i].length == 2</li>\r\n\t<li>1 &lt;= l<sub>i</sub>, w<sub>i</sub> &lt;= 10<sup>9</sup></li>\r\n\t<li>l<sub>i</sub> != w<sub>i</sub></li>\r\n</ul>\n"test_case": [\n  [[5,8],[3,9],[5,12],[16,5]]\n  [[2,3],[3,7],[4,3],[3,7]]\n],\n"test_case_output": [\'3\\r\', \'3\\r\'],\n"test_case_explanation": [\n  "The largest squares you can get from each rectangle are of lengths [5,3,5,5].\r\nThe largest possible square is of length 5, and you can get it out of 3 rectangles.\r\n\r\n\r\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer n, find a sequence that satisfies all of the following:\n<ul>\n\t<li>The integer 1 occurs once in the sequence.</li>\n\t<li>Each integer between 2 and n occurs twice in the sequence.</li>\n\t<li>For every integer i between 2 and n, the distance between the two occurrences of i is exactly i.</li>\n</ul>\nThe distance between two numbers on the sequence, a[i] and a[j], is the absolute difference of their indices, |j - i|.\nReturn the lexicographically largest sequence. It is guaranteed that under the given constraints, there is always a solution. \nA sequence a is lexicographically larger than a sequence b (of the same length) if in the first position where a and b differ, sequence a has a number greater than the corresponding number in b. For example, [0,1,9,0] is lexicographically larger than [0,1,5,6] because the first position they differ is at the third number, and 9 is greater than 5.<strong class="example">Example 1:\nInput: n = 3\nOutput: [3,1,2,3,2]\nExplanation: [2,3,2,1,3] is also a valid sequence, but [3,1,2,3,2] is the lexicographically largest valid sequence.\n<strong class="example">Example 2:\nInput: n = 5\nOutput: [5,3,1,4,3,5,2,4,2]\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 20</li>\n</ul>\n\n"test_case": [\n  3\n  5\n],\n"test_case_output": [\'[3,1,2,3,2]\', \'[5,3,1,4,3,5,2,4,2]\'],\n"test_case_explanation": [\n  "[2,3,2,1,3] is also a valid sequence, but [3,1,2,3,2] is the lexicographically largest valid sequence.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nHercy wants to save money for his first car. He puts money in the Leetcodebank every day.\nHe starts by putting in $1 on Monday, the first day. Every day from Tuesday to Sunday, he will put in $1 more than the day before. On every subsequent Monday, he will put in $1 more than the previous Monday.<span style="display: none;"> </span>\nGiven n, return the total amount of money he will have in the Leetcode bank at the end of the n<sup>th</sup> day.<strong class="example">Example 1:\nInput: n = 4\nOutput: 10\nExplanation:After the 4<sup>th</sup> day, the total is 1 + 2 + 3 + 4 = 10.\n<strong class="example">Example 2:\nInput: n = 10\nOutput: 37\nExplanation:After the 10<sup>th</sup> day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37. Notice that on the 2<sup>nd</sup> Monday, Hercy only puts in $2.\n<strong class="example">Example 3:\nInput: n = 20\nOutput: 96\nExplanation:After the 20<sup>th</sup> day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96.\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  4\n  10\n  20\n],\n"test_case_output": [\'10\', \'37\', \'96\'],\n"test_case_explanation": [\n  "After the 4"\n\n  "After the 10"\n\n  "After the 20"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nA split of an integer array is good if:\n<ul>\n\t<li>The array is split into three non-empty contiguous subarrays - named left, mid, right respectively from left to right.</li>\n\t<li>The sum of the elements in left is less than or equal to the sum of the elements in mid, and the sum of the elements in mid is less than or equal to the sum of the elements in right.</li>\n</ul>\nGiven nums, an array of non-negative integers, return the number of good ways to split nums. As the number may be too large, return it modulo 10<sup>9 </sup>+ 7.<strong class="example">Example 1:\nInput: nums = [1,1,1]\nOutput: 1\nExplanation: The only good way to split nums is [1] [1] [1].\n<strong class="example">Example 2:\nInput: nums = [1,2,2,2,5,0]\nOutput: 3\nExplanation: There are three good ways of splitting nums:\n[1] [2] [2,2,5,0]\n[1] [2,2] [2,5,0]\n[1,2] [2,2] [5,0]\n<strong class="example">Example 3:\nInput: nums = [3,2,1]\nOutput: 0\nExplanation: There is no good way to split nums.Constraints:\n<ul>\n\t<li>3 &lt;= nums.length &lt;= 10<sup>5</sup></li>\n\t<li>0 &lt;= nums[i] &lt;= 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  [1,1,1]\n  [1,2,2,2,5,0]\n  [3,2,1]\n],\n"test_case_output": [\'1\', \'3\', \'0\'],\n"test_case_explanation": [\n  "The only good way to split nums is [1] [1] [1].\n"\n\n  "There are three good ways of splitting nums:\n[1] [2] [2,2,5,0]\n[1] [2,2] [2,5,0]\n[1,2] [2,2] [5,0]\n"\n\n  "There is no good way to split nums.Constraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nA good meal is a meal that contains exactly two different food items with a sum of deliciousness equal to a power of two.\nYou can pick any two different foods to make a good meal.\nGiven an array of integers deliciousness where deliciousness[i] is the deliciousness of the i<sup>\u200b\u200b\u200b\u200b\u200b\u200bth</sup>\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b item of food, return the number of different good meals you can make from this list modulo 10<sup>9</sup> + 7.\nNote that items with different indices are considered different even if they have the same deliciousness value.<strong class="example">Example 1:\nInput: deliciousness = [1,3,5,7,9]\nOutput: 4\nExplanation: The good meals are (1,3), (1,7), (3,5) and, (7,9).\nTheir respective sums are 4, 8, 8, and 16, all of which are powers of 2.\n<strong class="example">Example 2:\nInput: deliciousness = [1,1,1,3,3,3,7]\nOutput: 15\nExplanation: The good meals are (1,1) with 3 ways, (1,3) with 9 ways, and (1,7) with 3 ways.Constraints:\n<ul>\n\t<li>1 &lt;= deliciousness.length &lt;= 10<sup>5</sup></li>\n\t<li>0 &lt;= deliciousness[i] &lt;= 2<sup>20</sup></li>\n</ul>\n\n"test_case": [\n  [1,3,5,7,9]\n  [1,1,1,3,3,3,7]\n],\n"test_case_output": [\'4\', \'15\'],\n"test_case_explanation": [\n  "The good meals are (1,3), (1,7), (3,5) and, (7,9).\nTheir respective sums are 4, 8, 8, and 16, all of which are powers of 2.\n"\n\n  "The good meals are (1,1) with 3 ways, (1,3) with 9 ways, and (1,7) with 3 ways.Constraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are assigned to put some amount of boxes onto one truck. You are given a 2D array boxTypes, where boxTypes[i] = [numberOfBoxes<sub>i</sub>, numberOfUnitsPerBox<sub>i</sub>]:\n<ul>\n\t<li>numberOfBoxes<sub>i</sub> is the number of boxes of type i.</li>\n\t<li>numberOfUnitsPerBox<sub>i</sub><sub> </sub>is the number of units in each box of the type i.</li>\n</ul>\nYou are also given an integer truckSize, which is the maximum number of boxes that can be put on the truck. You can choose any boxes to put on the truck as long as the numberof boxes does not exceed truckSize.\nReturn the maximum total number of units that can be put on the truck.<strong class="example">Example 1:\nInput: boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4\nOutput: 8\nExplanation: There are:\n- 1 box of the first type that contains 3 units.\n- 2 boxes of the second type that contain 2 units each.\n- 3 boxes of the third type that contain 1 unit each.\nYou can take all the boxes of the first and second types, and one box of the third type.\nThe total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8.\n<strong class="example">Example 2:\nInput: boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10\nOutput: 91\nConstraints:\n<ul>\n\t<li>1 &lt;= boxTypes.length &lt;= 1000</li>\n\t<li>1 &lt;= numberOfBoxes<sub>i</sub>, numberOfUnitsPerBox<sub>i</sub> &lt;= 1000</li>\n\t<li>1 &lt;= truckSize &lt;= 10<sup>6</sup></li>\n</ul>\n\n"test_case": [\n  [[1,3],[2,2],[3,1]]\n4\n  [[5,10],[2,5],[4,7],[3,9]]\n10\n],\n"test_case_output": [\'8\', \'91\'],\n"test_case_explanation": [\n  "There are:\n- 1 box of the first type that contains 3 units.\n- 2 boxes of the second type that contain 2 units each.\n- 3 boxes of the third type that contain 1 unit each.\nYou can take all the boxes of the first and second types, and one box of the third type.\nThe total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThe school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers 0 and 1 respectively. All students stand in a queue. Each student either prefers square or circular sandwiches.\nThe number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in a stack. At each step:\n<ul>\n\t<li>If the student at the front of the queue prefers the sandwich on the top of the stack, they will take it and leave the queue.</li>\n\t<li>Otherwise, they will leave it and go to the queue&#39;s end.</li>\n</ul>\nThis continues until none of the queue students want to take the top sandwich and are thus unable to eat.\nYou are given two integer arrays students and sandwiches where sandwiches[i] is the type of the i<sup>\u200b\u200b\u200b\u200b\u200b\u200bth</sup> sandwich in the stack (i = 0 is the top of the stack) and students[j] is the preference of the j<sup>\u200b\u200b\u200b\u200b\u200b\u200bth</sup> student in the initial queue (j = 0 is the front of the queue). Return the number of students that are unable to eat.<strong class="example">Example 1:\nInput: students = [1,1,0,0], sandwiches = [0,1,0,1]\nOutput: 0 \nExplanation:\n- Front student leaves the top sandwich and returns to the end of the line making students = [1,0,0,1].\n- Front student leaves the top sandwich and returns to the end of the line making students = [0,0,1,1].\n- Front student takes the top sandwich and leaves the line making students = [0,1,1] and sandwiches = [1,0,1].\n- Front student leaves the top sandwich and returns to the end of the line making students = [1,1,0].\n- Front student takes the top sandwich and leaves the line making students = [1,0] and sandwiches = [0,1].\n- Front student leaves the top sandwich and returns to the end of the line making students = [0,1].\n- Front student takes the top sandwich and leaves the line making students = [1] and sandwiches = [1].\n- Front student takes the top sandwich and leaves the line making students = [] and sandwiches = [].\nHence all students are able to eat.\n<strong class="example">Example 2:\nInput: students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1]\nOutput: 3\nConstraints:\n<ul>\n\t<li>1 &lt;= students.length, sandwiches.length &lt;= 100</li>\n\t<li>students.length == sandwiches.length</li>\n\t<li>sandwiches[i] is 0 or 1.</li>\n\t<li>students[i] is 0 or 1.</li>\n</ul>\n\n"test_case": [\n  [1,1,0,0]\n[0,1,0,1]\n  [1,1,1,0,0,1]\n[1,0,0,0,1,1]\n],\n"test_case_output": [\'0 \', \'3\'],\n"test_case_explanation": [\n  "- Front student leaves the top sandwich and returns to the end of the line making students = [1,0,0,1].\n- Front student leaves the top sandwich and returns to the end of the line making students = [0,0,1,1].\n- Front student takes the top sandwich and leaves the line making students = [0,1,1] and sandwiches = [1,0,1].\n- Front student leaves the top sandwich and returns to the end of the line making students = [1,1,0].\n- Front student takes the top sandwich and leaves the line making students = [1,0] and sandwiches = [0,1].\n- Front student leaves the top sandwich and returns to the end of the line making students = [0,1].\n- Front student takes the top sandwich and leaves the line making students = [1] and sandwiches = [1].\n- Front student takes the top sandwich and leaves the line making students = [] and sandwiches = [].\nHence all students are able to eat.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an array of positive integers nums and want to erase a subarray containingunique elements. The score you get by erasing the subarray is equal to the sum of its elements.\nReturn the maximum score you can get by erasing exactly one subarray.\nAn array b is called to be a <span class="tex-font-style-it">subarray</span> of a if it forms a contiguous subsequence of a, that is, if it is equal to a[l],a[l+1],...,a[r] for some (l,r).<strong class="example">Example 1:\nInput: nums = [4,2,4,5,6]\nOutput: 17\nExplanation: The optimal subarray here is [2,4,5,6].\n<strong class="example">Example 2:\nInput: nums = [5,2,1,2,5,2,1,2,5]\nOutput: 8\nExplanation: The optimal subarray here is [5,2,1] or [1,2,5].\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>5</sup></li>\n\t<li>1 &lt;= nums[i] &lt;= 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  [4,2,4,5,6]\n  [5,2,1,2,5,2,1,2,5]\n],\n"test_case_output": [\'17\', \'8\'],\n"test_case_explanation": [\n  "The optimal subarray here is [2,4,5,6].\n"\n\n  "The optimal subarray here is [5,2,1] or [1,2,5].\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a phone number as a string number. number consists of digits, spaces &#39; &#39;, and/or dashes &#39;-&#39;.\nYou would like to reformat the phone number in a certain manner. Firstly, remove all spaces and dashes. Then, group the digits from left to right into blocks of length 3 until there are 4 or fewer digits. The final digits are then grouped as follows:\n<ul>\n\t<li>2 digits: A single block of length 2.</li>\n\t<li>3 digits: A single block of length 3.</li>\n\t<li>4 digits: Two blocks of length 2 each.</li>\n</ul>\nThe blocks are then joined by dashes. Notice that the reformatting process should never produce any blocks of length 1 and produce at most two blocks of length 2.\nReturn the phone number after formatting.<strong class="example">Example 1:\nInput: number = 1-23-45 6\nOutput: 123-456\nExplanation: The digits are 123456.\nStep 1: There are more than 4 digits, so group the next 3 digits. The 1st block is 123.\nStep 2: There are 3 digits remaining, so put them in a single block of length 3. The 2nd block is 456.\nJoining the blocks gives 123-456.\n<strong class="example">Example 2:\nInput: number = 123 4-567\nOutput: 123-45-67\nExplanation: The digits are 1234567.\nStep 1: There are more than 4 digits, so group the next 3 digits. The 1st block is 123.\nStep 2: There are 4 digits left, so split them into two blocks of length 2. The blocks are 45 and 67.\nJoining the blocks gives 123-45-67.\n<strong class="example">Example 3:\nInput: number = 123 4-5678\nOutput: 123-456-78\nExplanation: The digits are 12345678.\nStep 1: The 1st block is 123.\nStep 2: The 2nd block is 456.\nStep 3: There are 2 digits left, so put them in a single block of length 2. The 3rd block is 78.\nJoining the blocks gives 123-456-78.\nConstraints:\n<ul>\n\t<li>2 &lt;= number.length &lt;= 100</li>\n\t<li>number consists of digits and the characters &#39;-&#39; and &#39; &#39;.</li>\n\t<li>There are at least two digits in number.</li>\n</ul>\n\n"test_case": [\n  "1-23-45 6"\n  "123 4-567"\n  "123 4-5678"\n],\n"test_case_output": [\'123-456\', \'123-45-67\', \'123-456-78\'],\n"test_case_explanation": [\n  "The digits are 123456.\nStep 1: There are more than 4 digits, so group the next 3 digits. The 1st block is 123.\nStep 2: There are 3 digits remaining, so put them in a single block of length 3. The 2nd block is 456.\nJoining the blocks gives 123-456.\n"\n\n  "The digits are 1234567.\nStep 1: There are more than 4 digits, so group the next 3 digits. The 1st block is 123.\nStep 2: There are 4 digits left, so split them into two blocks of length 2. The blocks are 45 and 67.\nJoining the blocks gives 123-45-67.\n"\n\n  "The digits are 12345678.\nStep 1: The 1st block is 123.\nStep 2: The 2nd block is 456.\nStep 3: There are 2 digits left, so put them in a single block of length 2. The 3rd block is 78.\nJoining the blocks gives 123-456-78.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a string s of even length consisting of digits from 0 to 9, and two integers a and b.\nYou can apply either of the following two operations any number of times and in any order on s:\n<ul>\n\t<li>Add a to all odd indices of s (0-indexed). Digits post 9 are cycled back to 0. For example, if s = 3456 and a = 5, s becomes 3951.</li>\n\t<li>Rotate s to the right by b positions. For example, if s = 3456 and b = 1, s becomes 6345.</li>\n</ul>\nReturn the lexicographically smallest string you can obtain by applying the above operations any number of times on s.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. For example, 0158 is lexicographically smaller than 0190 because the first position they differ is at the third letter, and &#39;5&#39; comes before &#39;9&#39;.<strong class="example">Example 1:\nInput: s = 5525, a = 9, b = 2\nOutput: 2050\nExplanation: We can apply the following operations:\nStart:  5525\nRotate: 2555\nAdd:    2454\nAdd:    2353\nRotate: 5323\nAdd:    5222\nAdd:    5121\nRotate: 2151\nAdd:    2050\u200b\u200b\u200b\u200b\u200b\nThere is no way to obtain a string that is lexicographically smaller than 2050.\n<strong class="example">Example 2:\nInput: s = 74, a = 5, b = 1\nOutput: 24\nExplanation: We can apply the following operations:\nStart:  74\nRotate: 47\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bAdd:    42\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bRotate: 24\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\nThere is no way to obtain a string that is lexicographically smaller than 24.\n<strong class="example">Example 3:\nInput: s = 0011, a = 4, b = 2\nOutput: 0011\nExplanation: There are no sequence of operations that will give us a lexicographically smaller string than 0011.\nConstraints:\n<ul>\n\t<li>2 &lt;= s.length &lt;= 100</li>\n\t<li>s.length is even.</li>\n\t<li>s consists of digits from 0 to 9 only.</li>\n\t<li>1 &lt;= a &lt;= 9</li>\n\t<li>1 &lt;= b &lt;= s.length - 1</li>\n</ul>\n\n"test_case": [\n  "5525"\n9\n2\n  "74"\n5\n1\n  "0011"\n4\n2\n],\n"test_case_output": [\'2050\', \'24\', \'0011\'],\n"test_case_explanation": [\n  "We can apply the following operations:\nStart:  5525\nRotate: 2555\nAdd:    2454\nAdd:    2353\nRotate: 5323\nAdd:    5222\nAdd:    5121\nRotate: 2151\nAdd:    2050\u200b\u200b\u200b\u200b\u200b\nThere is no way to obtain a string that is lexicographically smaller than 2050.\n"\n\n  "We can apply the following operations:\nStart:  74\nRotate: 47\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bAdd:    42\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bRotate: 24\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\nThere is no way to obtain a string that is lexicographically smaller than 24.\n"\n\n  "There are no sequence of operations that will give us a lexicographically smaller string than 0011.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a string s, return the length of the longest substring between two equal characters, excluding the two characters. If there is no such substring return -1.\nA substring is a contiguous sequence of characters within a string.<strong class="example">Example 1:\nInput: s = aa\nOutput: 0\nExplanation: The optimal substring here is an empty substring between the two &#39;a&#39;s.\n<strong class="example">Example 2:\nInput: s = abca\nOutput: 2\nExplanation: The optimal substring here is bc.\n<strong class="example">Example 3:\nInput: s = cbzxy\nOutput: -1\nExplanation: There are no characters that appear twice in s.\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 300</li>\n\t<li>s contains only lowercase English letters.</li>\n</ul>\n\n"test_case": [\n  "aa"\n  "abca"\n  "cbzxy"\n],\n"test_case_output": [\'0\', \'2\', \'-1\'],\n"test_case_explanation": [\n  "The optimal substring here is an empty substring between the two &#39;a&#39;s.\n"\n\n  "The optimal substring here is bc.\n"\n\n  "There are no characters that appear twice in s.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given two arrays rowSum and colSum of non-negative integers where rowSum[i] is the sum of the elements in the i<sup>th</sup> row and colSum[j] is the sum of the elements of the j<sup>th</sup> column of a 2D matrix. In other words, you do not know the elements of the matrix, but you do know the sums of each row and column.\nFind any matrix of non-negative integers of size rowSum.length x colSum.length that satisfies the rowSum and colSum requirements.\nReturn a 2D array representing any matrix that fulfills the requirements. It&#39;s guaranteed that at least one matrix that fulfills the requirements exists.<strong class="example">Example 1:\nInput: rowSum = [3,8], colSum = [4,7]\nOutput: [[3,0],\n         [1,7]]\nExplanation: \n0<sup>th</sup> row: 3 + 0 = 3 == rowSum[0]\n1<sup>st</sup> row: 1 + 7 = 8 == rowSum[1]\n0<sup>th</sup> column: 3 + 1 = 4 == colSum[0]\n1<sup>st</sup> column: 0 + 7 = 7 == colSum[1]\nThe row and column sums match, and all matrix elements are non-negative.\nAnother possible matrix is: [[1,2],\n                             [3,5]]\n<strong class="example">Example 2:\nInput: rowSum = [5,7,10], colSum = [8,6,8]\nOutput: [[0,5,0],\n         [6,1,0],\n         [2,0,8]]\nConstraints:\n<ul>\n\t<li>1 &lt;= rowSum.length, colSum.length &lt;= 500</li>\n\t<li>0 &lt;= rowSum[i], colSum[i] &lt;= 10<sup>8</sup></li>\n\t<li>sum(rowSum) == sum(colSum)</li>\n</ul>\n\n"test_case": [\n  [3,8]\n[4,7]\n  [5,7,10]\n[8,6,8]\n],\n"test_case_output": [\'[[3,0],\', \'[[0,5,0],\'],\n"test_case_explanation": [\n  "0"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a binary string s, you can split s into 3 non-empty strings s1, s2, and s3 where s1 + s2 + s3 = s.\nReturn the number of ways s can be split such that the number of ones is the same in s1, s2, and s3. Since the answer may be too large, return it modulo 10<sup>9</sup> + 7.<strong class="example">Example 1:\nInput: s = 10101\nOutput: 4\nExplanation: There are four ways to split s in 3 parts where each part contain the same number of letters &#39;1&#39;.\n1|010|1\n1|01|01\n10|10|1\n10|1|01\n<strong class="example">Example 2:\nInput: s = 1001\nOutput: 0\n<strong class="example">Example 3:\nInput: s = 0000\nOutput: 3\nExplanation: There are three ways to split s in 3 parts.\n0|0|00\n0|00|0\n00|0|0\nConstraints:\n<ul>\n\t<li>3 &lt;= s.length &lt;= 10<sup>5</sup></li>\n\t<li>s[i] is either &#39;0&#39; or &#39;1&#39;.</li>\n</ul>\n\n"test_case": [\n  "10101"\n  "1001"\n  "0000"\n],\n"test_case_output": [\'4\', \'0\', \'3\'],\n"test_case_explanation": [\n  "There are four ways to split s in 3 parts where each part contain the same number of letters &#39;1&#39;.\n1|010|1\n1|01|01\n10|10|1\n10|1|01\n"\n\n  "There are three ways to split s in 3 parts.\n0|0|00\n0|00|0\n00|0|0\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer n, add a dot (.) as the thousands separator and return it in string format.<strong class="example">Example 1:\nInput: n = 987\nOutput: 987\n<strong class="example">Example 2:\nInput: n = 1234\nOutput: 1.234\nConstraints:\n<ul>\n\t<li>0 &lt;= n &lt;= 2<sup>31</sup> - 1</li>\n</ul>\n\n"test_case": [\n  987\n  1234\n],\n"test_case_output": [\'987\', \'1.234\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou have an array arr of length n where arr[i] = (2 * i) + 1 for all valid values of i (i.e.,0 &lt;= i &lt; n).\nIn one operation, you can select two indices x and y where 0 &lt;= x, y &lt; n and subtract 1 from arr[x] and add 1 to arr[y] (i.e., perform arr[x] -=1 and arr[y] += 1). The goal is to make all the elements of the array equal. It is guaranteed that all the elements of the array can be made equal using some operations.\nGiven an integer n, the length of the array, return the minimum number of operations needed to make all the elements of arr equal.<strong class="example">Example 1:\nInput: n = 3\nOutput: 2\nExplanation: arr = [1, 3, 5]\nFirst operation choose x = 2 and y = 0, this leads arr to be [2, 3, 4]\nIn the second operation choose x = 2 and y = 0 again, thus arr = [3, 3, 3].\n<strong class="example">Example 2:\nInput: n = 6\nOutput: 9\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  3\n  6\n],\n"test_case_output": [\'2\', \'9\'],\n"test_case_explanation": [\n  "arr = [1, 3, 5]\nFirst operation choose x = 2 and y = 0, this leads arr to be [2, 3, 4]\nIn the second operation choose x = 2 and y = 0 again, thus arr = [3, 3, 3].\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array arr, return trueif there are three consecutive odd numbers in the array. Otherwise, returnfalse.<strong class="example">Example 1:\nInput: arr = [2,6,4,1]\nOutput: false\nExplanation: There are no three consecutive odds.\n<strong class="example">Example 2:\nInput: arr = [1,2,34,3,4,5,7,23,12]\nOutput: true\nExplanation: [5,7,23] are three consecutive odds.\nConstraints:\n<ul>\n\t<li>1 &lt;= arr.length &lt;= 1000</li>\n\t<li>1 &lt;= arr[i] &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  [2,6,4,1]\n  [1,2,34,3,4,5,7,23,12]\n],\n"test_case_output": [\'false\', \'true\'],\n"test_case_explanation": [\n  "There are no three consecutive odds.\n"\n\n  "[5,7,23] are three consecutive odds.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array arr of distinct integers and an integer k.\nA game will be played between the first two elements of the array (i.e. arr[0] and arr[1]). In each round of the game, we compare arr[0] with arr[1], the larger integer wins and remains at position 0, and the smaller integer moves to the end of the array. The game ends when an integer wins k consecutive rounds.\nReturn the integer which will win the game.\nIt is guaranteed that there will be a winner of the game.<strong class="example">Example 1:\nInput: arr = [2,1,3,5,4,6,7], k = 2\nOutput: 5\nExplanation: Let&#39;s see the rounds of the game:\nRound |       arr       | winner | win_count\n  1   | [2,1,3,5,4,6,7] | 2      | 1\n  2   | [2,3,5,4,6,7,1] | 3      | 1\n  3   | [3,5,4,6,7,1,2] | 5      | 1\n  4   | [5,4,6,7,1,2,3] | 5      | 2\nSo we can see that 4 rounds will be played and 5 is the winner because it wins 2 consecutive games.\n<strong class="example">Example 2:\nInput: arr = [3,2,1], k = 10\nOutput: 3\nExplanation: 3 will win the first 10 rounds consecutively.\nConstraints:\n<ul>\n\t<li>2 &lt;= arr.length &lt;= 10<sup>5</sup></li>\n\t<li>1 &lt;= arr[i] &lt;= 10<sup>6</sup></li>\n\t<li>arr contains distinct integers.</li>\n\t<li>1 &lt;= k &lt;= 10<sup>9</sup></li>\n</ul>\n\n"test_case": [\n  [2,1,3,5,4,6,7]\n2\n  [3,2,1]\n10\n],\n"test_case_output": [\'5\', \'3\'],\n"test_case_explanation": [\n  "Let&#39;s see the rounds of the game:\nRound |       arr       | winner | win_count\n  1   | [2,1,3,5,4,6,7] | 2      | 1\n  2   | [2,3,5,4,6,7,1] | 3      | 1\n  3   | [3,5,4,6,7,1,2] | 5      | 1\n  4   | [5,4,6,7,1,2,3] | 5      | 2\nSo we can see that 4 rounds will be played and 5 is the winner because it wins 2 consecutive games.\n"\n\n  "3 will win the first 10 rounds consecutively.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a string s.\nA split is called good if you can split s into two non-empty strings s<sub>left</sub> and s<sub>right</sub> where their concatenation is equal to s (i.e., s<sub>left</sub> + s<sub>right</sub> = s) and the number of distinct letters in s<sub>left</sub> and s<sub>right</sub> is the same.\nReturn the number of good splits you can make in s.<strong class="example">Example 1:\nInput: s = aacaba\nOutput: 2\nExplanation: There are 5 ways to split aacaba and 2 of them are good. \n(a, acaba) Left string and right string contains 1 and 3 different letters respectively.\n(aa, caba) Left string and right string contains 1 and 3 different letters respectively.\n(aac, aba) Left string and right string contains 2 and 2 different letters respectively (good split).\n(aaca, ba) Left string and right string contains 2 and 2 different letters respectively (good split).\n(aacab, a) Left string and right string contains 3 and 1 different letters respectively.\n<strong class="example">Example 2:\nInput: s = abcd\nOutput: 1\nExplanation: Split the string as follows (ab, cd).\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 10<sup>5</sup></li>\n\t<li>s consists of only lowercase English letters.</li>\n</ul>\n\n"test_case": [\n  "aacaba"\n  "abcd"\n],\n"test_case_output": [\'2\', \'1\'],\n"test_case_explanation": [\n  "There are 5 ways to split aacaba and 2 of them are good. \n(a, acaba) Left string and right string contains 1 and 3 different letters respectively.\n(aa, caba) Left string and right string contains 1 and 3 different letters respectively.\n(aac, aba) Left string and right string contains 2 and 2 different letters respectively (good split).\n(aaca, ba) Left string and right string contains 2 and 2 different letters respectively (good split).\n(aacab, a) Left string and right string contains 3 and 1 different letters respectively.\n"\n\n  "Split the string as follows (ab, cd).\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an array of integers arr, return the number of subarrays with an odd sum.\nSince the answer can be very large, return it modulo 10<sup>9</sup> + 7.<strong class="example">Example 1:\nInput: arr = [1,3,5]\nOutput: 4\nExplanation: All subarrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]]\nAll sub-arrays sum are [1,4,9,3,8,5].\nOdd sums are [1,9,3,5] so the answer is 4.\n<strong class="example">Example 2:\nInput: arr = [2,4,6]\nOutput: 0\nExplanation: All subarrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]]\nAll sub-arrays sum are [2,6,12,4,10,6].\nAll sub-arrays have even sum and the answer is 0.\n<strong class="example">Example 3:\nInput: arr = [1,2,3,4,5,6,7]\nOutput: 16\nConstraints:\n<ul>\n\t<li>1 &lt;= arr.length &lt;= 10<sup>5</sup></li>\n\t<li>1 &lt;= arr[i] &lt;= 100</li>\n</ul>\n\n"test_case": [\n  [1,3,5]\n  [2,4,6]\n  [1,2,3,4,5,6,7]\n],\n"test_case_output": [\'4\', \'0\', \'16\'],\n"test_case_explanation": [\n  "All subarrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]]\nAll sub-arrays sum are [1,4,9,3,8,5].\nOdd sums are [1,9,3,5] so the answer is 4.\n"\n\n  "All subarrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]]\nAll sub-arrays sum are [2,6,12,4,10,6].\nAll sub-arrays have even sum and the answer is 0.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven two non-negative integers low and <font face="monospace">high</font>. Return the count of odd numbers between low and <font face="monospace">high</font>(inclusive).\r\n\r\n\r\n<strong class="example">Example 1:\r\n\r\n\r\nInput: low = 3, high = 7\r\nOutput: 3\r\nExplanation: The odd numbers between 3 and 7 are [3,5,7].\r\n\r\n<strong class="example">Example 2:\r\n\r\n\r\nInput: low = 8, high = 10\r\nOutput: 1\r\nExplanation: The odd numbers between 8 and 10 are [9].\r\n\r\n\r\nConstraints:\r\n\r\n<ul>\r\n\t<li>0 &lt;= low &lt;= high&lt;= 10^9</li>\r\n</ul>\n"test_case": [\n  3\n7\n  8\n10\n],\n"test_case_output": [\'3\\r\', \'1\\r\'],\n"test_case_explanation": [\n  "The odd numbers between 3 and 7 are [3,5,7].\r\n\r\n"\n\n  "The odd numbers between 8 and 10 are [9].\r\n\r\n\r\nConstraints:\r\n\r\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a binary string s, return the number of substrings with all characters 1&#39;s. Since the answer may be too large, return it modulo 10<sup>9</sup> + 7.<strong class="example">Example 1:\nInput: s = 0110111\nOutput: 9\nExplanation: There are 9 substring in total with only 1&#39;s characters.\n1 -&gt; 5 times.\n11 -&gt; 3 times.\n111 -&gt; 1 time.\n<strong class="example">Example 2:\nInput: s = 101\nOutput: 2\nExplanation: Substring 1 is shown 2 times in s.\n<strong class="example">Example 3:\nInput: s = 111111\nOutput: 21\nExplanation: Each substring contains only 1&#39;s characters.\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 10<sup>5</sup></li>\n\t<li>s[i] is either &#39;0&#39; or &#39;1&#39;.</li>\n</ul>\n\n"test_case": [\n  "0110111"\n  "101"\n  "111111"\n],\n"test_case_output": [\'9\', \'2\', \'21\'],\n"test_case_explanation": [\n  "There are 9 substring in total with only 1&#39;s characters.\n1 -&gt; 5 times.\n11 -&gt; 3 times.\n111 -&gt; 1 time.\n"\n\n  "Substring 1 is shown 2 times in s.\n"\n\n  "Each substring contains only 1&#39;s characters.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the array nums consisting of 2n elements in the form [x<sub>1</sub>,x<sub>2</sub>,...,x<sub>n</sub>,y<sub>1</sub>,y<sub>2</sub>,...,y<sub>n</sub>].\r\n\r\nReturn the array in the form [x<sub>1</sub>,y<sub>1</sub>,x<sub>2</sub>,y<sub>2</sub>,...,x<sub>n</sub>,y<sub>n</sub>].\r\n\r\n\r\n<strong class="example">Example 1:\r\n\r\n\r\nInput: nums = [2,5,1,3,4,7], n = 3\r\nOutput: [2,3,5,4,1,7] \r\nExplanation: Since x<sub>1</sub>=2, x<sub>2</sub>=5, x<sub>3</sub>=1, y<sub>1</sub>=3, y<sub>2</sub>=4, y<sub>3</sub>=7 then the answer is [2,3,5,4,1,7].\r\n\r\n\r\n<strong class="example">Example 2:\r\n\r\n\r\nInput: nums = [1,2,3,4,4,3,2,1], n = 4\r\nOutput: [1,4,2,3,3,2,4,1]\r\n\r\n\r\n<strong class="example">Example 3:\r\n\r\n\r\nInput: nums = [1,1,2,2], n = 2\r\nOutput: [1,2,1,2]\r\n\r\n\r\n\r\nConstraints:\r\n\r\n<ul>\r\n\t<li>1 &lt;= n &lt;= 500</li>\r\n\t<li>nums.length == 2n</li>\r\n\t<li>1 &lt;= nums[i] &lt;= 10^3</li>\r\n</ul>\n"test_case": [\n  [2,5,1,3,4,7]\n3\n  [1,2,3,4,4,3,2,1]\n4\n  [1,1,2,2]\n2\n],\n"test_case_output": [\'[2,3,5,4,1,7] \\r\', \'[1,4,2,3,3,2,4,1]\\r\', \'[1,2,1,2]\\r\'],\n"test_case_explanation": [\n  "Since x"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the array of integers nums, you will choose two different indices i and j of that array. Return the maximum value of (nums[i]-1)*(nums[j]-1).<strong class="example">Example 1:\nInput: nums = [3,4,5,2]\nOutput: 12 \nExplanation: If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12. \n<strong class="example">Example 2:\nInput: nums = [1,5,4,5]\nOutput: 16\nExplanation: Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16.\n<strong class="example">Example 3:\nInput: nums = [3,7]\nOutput: 12\nConstraints:\n<ul>\n\t<li>2 &lt;= nums.length &lt;= 500</li>\n\t<li>1 &lt;= nums[i] &lt;= 10^3</li>\n</ul>\n\n"test_case": [\n  [3,4,5,2]\n  [1,5,4,5]\n  [3,7]\n],\n"test_case_output": [\'12 \', \'16\', \'12\'],\n"test_case_explanation": [\n  "If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12. \n"\n\n  "Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nA company has n employees with a unique ID for each employee from 0 to n - 1. The head of the company is the one with headID.\nEach employee has one direct manager given in the manager array where manager[i] is the direct manager of the i-th employee, manager[headID] = -1. Also, it is guaranteed that the subordination relationships have a tree structure.\nThe head of the company wants to inform all the company employees of an urgent piece of news. He will inform his direct subordinates, and they will inform their subordinates, and so on until all employees know about the urgent news.\nThe i-th employee needs informTime[i] minutes to inform all of his direct subordinates (i.e., After informTime[i] minutes, all his direct subordinates can start spreading the news).\nReturn the number of minutes needed to inform all the employees about the urgent news.<strong class="example">Example 1:\nInput: n = 1, headID = 0, manager = [-1], informTime = [0]\nOutput: 0\nExplanation: The head of the company is the only employee in the company.\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/02/27/graph.png" style="width: 404px; height: 174px;" />\nInput: n = 6, headID = 2, manager = [2,2,-1,2,2,2], informTime = [0,0,1,0,0,0]\nOutput: 1\nExplanation: The head of the company with id = 2 is the direct manager of all the employees in the company and needs 1 minute to inform them all.\nThe tree structure of the employees in the company is shown.\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 10<sup>5</sup></li>\n\t<li>0 &lt;= headID &lt; n</li>\n\t<li>manager.length == n</li>\n\t<li>0 &lt;= manager[i] &lt; n</li>\n\t<li>manager[headID] == -1</li>\n\t<li>informTime.length == n</li>\n\t<li>0 &lt;= informTime[i] &lt;= 1000</li>\n\t<li>informTime[i] == 0 if employee i has no subordinates.</li>\n\t<li>It is guaranteed that all the employees can be informed.</li>\n</ul>\n\n"test_case": [\n  1\n0\n[-1]\n[0]\n  6\n2\n[2,2,-1,2,2,2]\n[0,0,1,0,0,0]\n],\n"test_case_output": [\'0\', \'1\'],\n"test_case_explanation": [\n  "The head of the company is the only employee in the company.\n"\n\n  "The head of the company with id = 2 is the direct manager of all the employees in the company and needs 1 minute to inform them all.\nThe tree structure of the employees in the company is shown.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an array of events where events[i] = [startDay<sub>i</sub>, endDay<sub>i</sub>]. Every event i starts at startDay<sub>i</sub><sub> </sub>and ends at endDay<sub>i</sub>.\nYou can attend an event i at any day d where startTime<sub>i</sub> &lt;= d &lt;= endTime<sub>i</sub>. You can only attend one event at any time d.\nReturn the maximum number of events you can attend.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/02/05/e1.png" style="width: 400px; height: 267px;" />\nInput: events = [[1,2],[2,3],[3,4]]\nOutput: 3\nExplanation: You can attend all the three events.\nOne way to attend them all is as shown.\nAttend the first event on day 1.\nAttend the second event on day 2.\nAttend the third event on day 3.\n<strong class="example">Example 2:\nInput: events= [[1,2],[2,3],[3,4],[1,2]]\nOutput: 4\nConstraints:\n<ul>\n\t<li>1 &lt;= events.length &lt;= 10<sup>5</sup></li>\n\t<li>events[i].length == 2</li>\n\t<li>1 &lt;= startDay<sub>i</sub> &lt;= endDay<sub>i</sub> &lt;= 10<sup>5</sup></li>\n</ul>\n\n"test_case": [\n  [[1,2],[2,3],[3,4]]\n  [[1,2],[2,3],[3,4],[1,2]]\n],\n"test_case_output": [\'3\', \'4\'],\n"test_case_explanation": [\n  "You can attend all the three events.\nOne way to attend them all is as shown.\nAttend the first event on day 1.\nAttend the second event on day 2.\nAttend the third event on day 3.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the array restaurants where restaurants[i] = [id<sub>i</sub>, rating<sub>i</sub>, veganFriendly<sub>i</sub>, price<sub>i</sub>, distance<sub>i</sub>]. You have to filter the restaurants using three filters.\nThe veganFriendly filter will be either true (meaning you should only include restaurants with veganFriendly<sub>i</sub> set to true)or false(meaning you can include any restaurant). In addition, you have the filtersmaxPrice and maxDistancewhichare the maximum value for price and distance of restaurants you should consider respectively.\nReturn the array of restaurant IDs after filtering, ordered by rating from highest to lowest. For restaurants with the same rating, order them by id from highest to lowest. For simplicity veganFriendly<sub>i</sub> and veganFriendly take value 1 when it is true, and 0 when it is false.<strong class="example">Example 1:\nInput: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 1, maxPrice = 50, maxDistance = 10\nOutput: [3,1,5] \nExplanation: \nThe restaurants are:\nRestaurant 1 [id=1, rating=4, veganFriendly=1, price=40, distance=10]\nRestaurant 2 [id=2, rating=8, veganFriendly=0, price=50, distance=5]\nRestaurant 3 [id=3, rating=8, veganFriendly=1, price=30, distance=4]\nRestaurant 4 [id=4, rating=10, veganFriendly=0, price=10, distance=3]\nRestaurant 5 [id=5, rating=1, veganFriendly=1, price=15, distance=1] \nAfter filter restaurants with veganFriendly = 1, maxPrice = 50 and maxDistance = 10 we have restaurant 3, restaurant 1 and restaurant 5 (ordered by rating from highest to lowest). \n<strong class="example">Example 2:\nInput: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 50, maxDistance = 10\nOutput: [4,3,2,1,5]\nExplanation: The restaurants are the same as in example 1, but in this case the filter veganFriendly = 0, therefore all restaurants are considered.\n<strong class="example">Example 3:\nInput: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 30, maxDistance = 3\nOutput: [4,5]\nConstraints:\n<ul>\n\t<li>1 &lt;=restaurants.length &lt;= 10^4</li>\n\t<li>restaurants[i].length == 5</li>\n\t<li>1 &lt;=id<sub>i</sub>, rating<sub>i</sub>, price<sub>i</sub>, distance<sub>i </sub>&lt;= 10^5</li>\n\t<li>1 &lt;=maxPrice,maxDistance &lt;= 10^5</li>\n\t<li>veganFriendly<sub>i</sub> andveganFriendlyare0 or 1.</li>\n\t<li>All id<sub>i</sub> are distinct.</li>\n</ul>\n\n"test_case": [\n  [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]]\n1\n50\n10\n  [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]]\n0\n50\n10\n  [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]]\n0\n30\n3\n],\n"test_case_output": [\'[3,1,5] \', \'[4,3,2,1,5]\', \'[4,5]\'],\n"test_case_explanation": [\n  "The restaurants are:\nRestaurant 1 [id=1, rating=4, veganFriendly=1, price=40, distance=10]\nRestaurant 2 [id=2, rating=8, veganFriendly=0, price=50, distance=5]\nRestaurant 3 [id=3, rating=8, veganFriendly=1, price=30, distance=4]\nRestaurant 4 [id=4, rating=10, veganFriendly=0, price=10, distance=3]\nRestaurant 5 [id=5, rating=1, veganFriendly=1, price=15, distance=1] \nAfter filter restaurants with veganFriendly = 1, maxPrice = 50 and maxDistance = 10 we have restaurant 3, restaurant 1 and restaurant 5 (ordered by rating from highest to lowest). \n"\n\n  "The restaurants are the same as in example 1, but in this case the filter veganFriendly = 0, therefore all restaurants are considered.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an array of integers arr, return true if the number of occurrences of each value in the array is unique or false otherwise.<strong class="example">Example 1:\nInput: arr = [1,2,2,1,1,3]\nOutput: true\nExplanation:The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.\n<strong class="example">Example 2:\nInput: arr = [1,2]\nOutput: false\n<strong class="example">Example 3:\nInput: arr = [-3,0,1,-3,1,1,1,-3,10,0]\nOutput: true\nConstraints:\n<ul>\n\t<li>1 &lt;= arr.length &lt;= 1000</li>\n\t<li>-1000 &lt;= arr[i] &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  [1,2,2,1,1,3]\n  [1,2]\n  [-3,0,1,-3,1,1,1,-3,10,0]\n],\n"test_case_output": [\'true\', \'false\', \'true\'],\n"test_case_explanation": [\n  "The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nLet the function f(s) be the frequency of the lexicographically smallest character in a non-empty string s. For example, if s = dcce then f(s) = 2 because the lexicographically smallest character is &#39;c&#39;, which has a frequency of 2.\nYou are given an array of strings words and another array of query strings queries. For each query queries[i], count the number of words in words such that f(queries[i]) &lt; f(W) for each W in words.\nReturn an integer array answer, where each answer[i] is the answer to the i<sup>th</sup> query.<strong class="example">Example 1:\nInput: queries = [cbd], words = [zaaaz]\nOutput: [1]\nExplanation: On the first query we have f(cbd) = 1, f(zaaaz) = 3 so f(cbd) &lt; f(zaaaz).\n<strong class="example">Example 2:\nInput: queries = [bbb,cc], words = [a,aa,aaa,aaaa]\nOutput: [1,2]\nExplanation: On the first query only f(bbb) &lt; f(aaaa). On the second query both f(aaa) and f(aaaa) are both &gt; f(cc).\nConstraints:\n<ul>\n\t<li>1 &lt;= queries.length &lt;= 2000</li>\n\t<li>1 &lt;= words.length &lt;= 2000</li>\n\t<li>1 &lt;= queries[i].length, words[i].length &lt;= 10</li>\n\t<li>queries[i][j], words[i][j] consist of lowercase English letters.</li>\n</ul>\n\n"test_case": [\n  ["cbd"]\n["zaaaz"]\n  ["bbb","cc"]\n["a","aa","aaa","aaaa"]\n],\n"test_case_output": [\'[1]\', \'[1,2]\'],\n"test_case_explanation": [\n  "On the first query we have f(cbd) = 1, f(zaaaz) = 3 so f(cbd) &lt; f(zaaaz).\n"\n\n  "On the first query only f(bbb) &lt; f(aaaa). On the second query both f(aaa) and f(aaaa) are both &gt; f(cc).\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nFor two strings s and t, we say t divides s if and only if s = t + t + t + ... + t + t (i.e., t is concatenated with itself one or more times).\nGiven two strings str1 and str2, return the largest string x such that x divides both str1 and str2.<strong class="example">Example 1:\nInput: str1 = ABCABC, str2 = ABC\nOutput: ABC\n<strong class="example">Example 2:\nInput: str1 = ABABAB, str2 = ABAB\nOutput: AB\n<strong class="example">Example 3:\nInput: str1 = LEET, str2 = CODE\nOutput: \nConstraints:\n<ul>\n\t<li>1 &lt;= str1.length, str2.length &lt;= 1000</li>\n\t<li>str1 and str2 consist of English uppercase letters.</li>\n</ul>\n\n"test_case": [\n  "ABCABC"\n"ABC"\n  "ABABAB"\n"ABAB"\n  "LEET"\n"CODE"\n],\n"test_case_output": [\'ABC\', \'AB\', \'\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given four integers row, cols, rCenter, and cCenter. There is a rows x cols matrix and you are on the cell with the coordinates (rCenter, cCenter).\nReturn the coordinates of all cells in the matrix, sorted by their distance from (rCenter, cCenter) from the smallest distance to the largest distance. You may return the answer in any order that satisfies this condition.\nThe distance between two cells (r<sub>1</sub>, c<sub>1</sub>) and (r<sub>2</sub>, c<sub>2</sub>) is |r<sub>1</sub> - r<sub>2</sub>| + |c<sub>1</sub> - c<sub>2</sub>|.<strong class="example">Example 1:\nInput: rows = 1, cols = 2, rCenter = 0, cCenter = 0\nOutput: [[0,0],[0,1]]\nExplanation: The distances from (0, 0) to other cells are: [0,1]\n<strong class="example">Example 2:\nInput: rows = 2, cols = 2, rCenter = 0, cCenter = 1\nOutput: [[0,1],[0,0],[1,1],[1,0]]\nExplanation: The distances from (0, 1) to other cells are: [0,1,1,2]\nThe answer [[0,1],[1,1],[0,0],[1,0]] would also be accepted as correct.\n<strong class="example">Example 3:\nInput: rows = 2, cols = 3, rCenter = 1, cCenter = 2\nOutput: [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]\nExplanation: The distances from (1, 2) to other cells are: [0,1,1,2,2,3]\nThere are other answers that would also be accepted as correct, such as [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]].\nConstraints:\n<ul>\n\t<li>1 &lt;= rows, cols &lt;= 100</li>\n\t<li>0 &lt;= rCenter &lt; rows</li>\n\t<li>0 &lt;= cCenter &lt; cols</li>\n</ul>\n\n"test_case": [\n  1\n2\n0\n0\n  2\n2\n0\n1\n  2\n3\n1\n2\n],\n"test_case_output": [\'[[0,0],[0,1]]\', \'[[0,1],[0,0],[1,1],[1,0]]\', \'[[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]\'],\n"test_case_explanation": [\n  "The distances from (0, 0) to other cells are: [0,1]\n"\n\n  "The distances from (0, 1) to other cells are: [0,1,1,2]\nThe answer [[0,1],[1,1],[0,0],[1,0]] would also be accepted as correct.\n"\n\n  "The distances from (1, 2) to other cells are: [0,1,1,2,2,3]\nThere are other answers that would also be accepted as correct, such as [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]].\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nA company is planning to interview 2n people. Given the array costs where costs[i] = [aCost<sub>i</sub>, bCost<sub>i</sub>],the cost of flying the i<sup>th</sup> person to city a is aCost<sub>i</sub>, and the cost of flying the i<sup>th</sup> person to city b is bCost<sub>i</sub>.\nReturn the minimum cost to fly every person to a city such that exactly n people arrive in each city.<strong class="example">Example 1:\nInput: costs = [[10,20],[30,200],[400,50],[30,20]]\nOutput: 110\nExplanation: \nThe first person goes to city A for a cost of 10.\nThe second person goes to city A for a cost of 30.\nThe third person goes to city B for a cost of 50.\nThe fourth person goes to city B for a cost of 20.\nThe total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city.\n<strong class="example">Example 2:\nInput: costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]\nOutput: 1859\n<strong class="example">Example 3:\nInput: costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]\nOutput: 3086\nConstraints:\n<ul>\n\t<li>2 * n == costs.length</li>\n\t<li>2 &lt;= costs.length &lt;= 100</li>\n\t<li>costs.length is even.</li>\n\t<li>1 &lt;= aCost<sub>i</sub>, bCost<sub>i</sub> &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  [[10,20],[30,200],[400,50],[30,20]]\n  [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]\n  [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]\n],\n"test_case_output": [\'110\', \'1859\', \'3086\'],\n"test_case_explanation": [\n  "The first person goes to city A for a cost of 10.\nThe second person goes to city A for a cost of 30.\nThe third person goes to city B for a cost of 50.\nThe fourth person goes to city B for a cost of 20.\nThe total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nWe run apreorderdepth-first search (DFS) on the root of a binary tree.\nAt each node in this traversal, we output D dashes (where D is the depth of this node), then we output the value of this node. If the depth of a node is D, the depth of its immediate child is D + 1. The depth of the root node is 0.\nIf a node has only one child, that child is guaranteed to be the left child.\nGiven the output traversal of this traversal, recover the tree and return its root.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2019/04/08/recover-a-tree-from-preorder-traversal.png" style="width: 320px; height: 200px;" />\nInput: traversal = 1-2--3--4-5--6--7\nOutput: [1,2,5,3,4,6,7]\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2019/04/11/screen-shot-2019-04-10-at-114101-pm.png" style="width: 256px; height: 250px;" />\nInput: traversal = 1-2--3---4-5--6---7\nOutput: [1,2,5,3,null,6,null,4,null,7]\n<strong class="example">Example 3:\n<img alt="" src="https://assets.leetcode.com/uploads/2019/04/11/screen-shot-2019-04-10-at-114955-pm.png" style="width: 276px; height: 250px;" />\nInput: traversal = 1-401--349---90--88\nOutput: [1,401,null,349,88,90]\nConstraints:\n<ul>\n\t<li>The number of nodes in the original tree is in the range [1, 1000].</li>\n\t<li>1 &lt;= Node.val &lt;= 10<sup>9</sup></li>\n</ul>\n\n"test_case": [\n  "1-2--3--4-5--6--7"\n  "1-2--3---4-5--6---7"\n  "1-401--349---90--88"\n],\n"test_case_output": [\'[1,2,5,3,4,6,7]\', \'[1,2,5,3,null,6,null,4,null,7]\', \'[1,401,null,349,88,90]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a series of video clips from a sporting event that lasted time seconds. These video clips can be overlapping with each other and have varying lengths.\nEach video clip is described by an array clips where clips[i] = [start<sub>i</sub>, end<sub>i</sub>] indicates that the ith clip started at start<sub>i</sub> and ended at end<sub>i</sub>.\nWe can cut these clips into segments freely.\n<ul>\n\t<li>For example, a clip [0, 7] can be cut into segments [0, 1] + [1, 3] + [3, 7].</li>\n</ul>\nReturn the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event [0, time]. If the task is impossible, return -1.<strong class="example">Example 1:\nInput: clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], time = 10\nOutput: 3\nExplanation: We take the clips [0,2], [8,10], [1,9]; a total of 3 clips.\nThen, we can reconstruct the sporting event as follows:\nWe cut [1,9] into segments [1,2] + [2,8] + [8,9].\nNow we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10].\n<strong class="example">Example 2:\nInput: clips = [[0,1],[1,2]], time = 5\nOutput: -1\nExplanation: We cannot cover [0,5] with only [0,1] and [1,2].\n<strong class="example">Example 3:\nInput: clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], time = 9\nOutput: 3\nExplanation: We can take clips [0,4], [4,7], and [6,9].\nConstraints:\n<ul>\n\t<li>1 &lt;= clips.length &lt;= 100</li>\n\t<li>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 100</li>\n\t<li>1 &lt;= time &lt;= 100</li>\n</ul>\n\n"test_case": [\n  [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]]\n10\n  [[0,1],[1,2]]\n5\n  [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]]\n9\n],\n"test_case_output": [\'3\', \'-1\', \'3\'],\n"test_case_explanation": [\n  "We take the clips [0,2], [8,10], [1,9]; a total of 3 clips.\nThen, we can reconstruct the sporting event as follows:\nWe cut [1,9] into segments [1,2] + [2,8] + [8,9].\nNow we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10].\n"\n\n  "We cannot cover [0,5] with only [0,1] and [1,2].\n"\n\n  "We can take clips [0,4], [4,7], and [6,9].\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the root of a binary tree with unique values and the values of two different nodes of the tree x and y, return true if the nodes corresponding to the values x and y in the tree are cousins, or false otherwise.\nTwo nodes of a binary tree are cousins if they have the same depth with different parents.\nNote that in a binary tree, the root node is at the depth 0, and children of each depth k node are at the depth k + 1.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2019/02/12/q1248-01.png" style="width: 304px; height: 270px;" />\nInput: root = [1,2,3,4], x = 4, y = 3\nOutput: false\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2019/02/12/q1248-02.png" style="width: 334px; height: 266px;" />\nInput: root = [1,2,3,null,4,null,5], x = 5, y = 4\nOutput: true\n<strong class="example">Example 3:\n<img alt="" src="https://assets.leetcode.com/uploads/2019/02/13/q1248-03.png" style="width: 267px; height: 258px;" />\nInput: root = [1,2,3,null,4], x = 2, y = 3\nOutput: false\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [2, 100].</li>\n\t<li>1 &lt;= Node.val &lt;= 100</li>\n\t<li>Each node has a unique value.</li>\n\t<li>x != y</li>\n\t<li>x and y are exist in the tree.</li>\n</ul>\n\n"test_case": [\n  [1,2,3,4]\n4\n3\n  [1,2,3,null,4,null,5]\n5\n4\n  [1,2,3,null,4]\n2\n3\n],\n"test_case_output": [\'false\', \'true\', \'false\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThere is a broken calculator that has the integer startValue on its display initially. In one operation, you can:\n<ul>\n\t<li>multiply the number on display by 2, or</li>\n\t<li>subtract 1 from the number on display.</li>\n</ul>\nGiven two integers startValue and target, return the minimum number of operations needed to display target on the calculator.<strong class="example">Example 1:\nInput: startValue = 2, target = 3\nOutput: 2\nExplanation: Use double operation and then decrement operation {2 -&gt; 4 -&gt; 3}.\n<strong class="example">Example 2:\nInput: startValue = 5, target = 8\nOutput: 2\nExplanation: Use decrement and then double {5 -&gt; 4 -&gt; 8}.\n<strong class="example">Example 3:\nInput: startValue = 3, target = 10\nOutput: 3\nExplanation: Use double, decrement and double {3 -&gt; 6 -&gt; 5 -&gt; 10}.\nConstraints:\n<ul>\n\t<li>1 &lt;= startValue, target &lt;= 10<sup>9</sup></li>\n</ul>\n\n"test_case": [\n  2\n3\n  5\n8\n  3\n10\n],\n"test_case_output": [\'2\', \'2\', \'3\'],\n"test_case_explanation": [\n  "Use double operation and then decrement operation {2 -&gt; 4 -&gt; 3}.\n"\n\n  "Use decrement and then double {5 -&gt; 4 -&gt; 8}.\n"\n\n  "Use double, decrement and double {3 -&gt; 6 -&gt; 5 -&gt; 10}.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an array of strings equations that represent relationships between variables where each string equations[i] is of length 4 and takes one of two different forms: x<sub>i</sub>==y<sub>i</sub> or x<sub>i</sub>!=y<sub>i</sub>.Here, x<sub>i</sub> and y<sub>i</sub> are lowercase letters (not necessarily different) that represent one-letter variable names.\nReturn true if it is possible to assign integers to variable names so as to satisfy all the given equations, or false otherwise.<strong class="example">Example 1:\nInput: equations = [a==b,b!=a]\nOutput: false\nExplanation: If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.\nThere is no way to assign the variables to satisfy both equations.\n<strong class="example">Example 2:\nInput: equations = [b==a,a==b]\nOutput: true\nExplanation: We could assign a = 1 and b = 1 to satisfy both equations.\nConstraints:\n<ul>\n\t<li>1 &lt;= equations.length &lt;= 500</li>\n\t<li>equations[i].length == 4</li>\n\t<li>equations[i][0] is a lowercase letter.</li>\n\t<li>equations[i][1] is either &#39;=&#39; or &#39;!&#39;.</li>\n\t<li>equations[i][2] is &#39;=&#39;.</li>\n\t<li>equations[i][3] is a lowercase letter.</li>\n</ul>\n\n"test_case": [\n  ["a==b","b!=a"]\n  ["b==a","a==b"]\n],\n"test_case_output": [\'false\', \'true\'],\n"test_case_explanation": [\n  "If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.\nThere is no way to assign the variables to satisfy both equations.\n"\n\n  "We could assign a = 1 and b = 1 to satisfy both equations.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThe array-form of an integer num is an array representing its digits in left to right order.\n<ul>\n\t<li>For example, for num = 1321, the array form is [1,3,2,1].</li>\n</ul>\nGiven num, the array-form of an integer, and an integer k, return the array-form of the integer num + k.<strong class="example">Example 1:\nInput: num = [1,2,0,0], k = 34\nOutput: [1,2,3,4]\nExplanation: 1200 + 34 = 1234\n<strong class="example">Example 2:\nInput: num = [2,7,4], k = 181\nOutput: [4,5,5]\nExplanation: 274 + 181 = 455\n<strong class="example">Example 3:\nInput: num = [2,1,5], k = 806\nOutput: [1,0,2,1]\nExplanation: 215 + 806 = 1021\nConstraints:\n<ul>\n\t<li>1 &lt;= num.length &lt;= 10<sup>4</sup></li>\n\t<li>0 &lt;= num[i] &lt;= 9</li>\n\t<li>num does not contain any leading zeros except for the zero itself.</li>\n\t<li>1 &lt;= k &lt;= 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  [1,2,0,0]\n34\n  [2,7,4]\n181\n  [2,1,5]\n806\n],\n"test_case_output": [\'[1,2,3,4]\', \'[4,5,5]\', \'[1,0,2,1]\'],\n"test_case_explanation": [\n  "1200 + 34 = 1234\n"\n\n  "274 + 181 = 455\n"\n\n  "215 + 806 = 1021\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given the root of a binary tree where each node has a value in the range [0, 25] representing the letters &#39;a&#39; to &#39;z&#39;.\nReturn the lexicographically smallest string that starts at a leaf of this tree and ends at the root.\nAs a reminder, any shorter prefix of a string is lexicographically smaller.\n<ul>\n\t<li>For example, ab is lexicographically smaller than aba.</li>\n</ul>\nA leaf of a node is a node that has no children.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2019/01/30/tree1.png" style="width: 534px; height: 358px;" />\nInput: root = [0,1,2,3,4,3,4]\nOutput: dba\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2019/01/30/tree2.png" style="width: 534px; height: 358px;" />\nInput: root = [25,1,3,1,3,0,2]\nOutput: adz\n<strong class="example">Example 3:\n<img alt="" src="https://assets.leetcode.com/uploads/2019/02/01/tree3.png" style="height: 490px; width: 468px;" />\nInput: root = [2,2,1,null,1,0,null,0]\nOutput: abc\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [1, 8500].</li>\n\t<li>0 &lt;= Node.val &lt;= 25</li>\n</ul>\n\n"test_case": [\n  [0,1,2,3,4,3,4]\n  [25,1,3,1,3,0,2]\n  [2,2,1,null,1,0,null,0]\n],\n"test_case_output": [\'dba\', \'adz\', \'abc\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the root of a binary tree, calculate the vertical order traversal of the binary tree.\nFor each node at position (row, col), its left and right children will be at positions (row + 1, col - 1) and (row + 1, col + 1) respectively. The root of the tree is at (0, 0).\nThe vertical order traversal of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values.\nReturn the vertical order traversal of the binary tree.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/29/vtree1.jpg" style="width: 431px; height: 304px;" />\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[9],[3,15],[20],[7]]\nExplanation:\nColumn -1: Only node 9 is in this column.\nColumn 0: Nodes 3 and 15 are in this column in that order from top to bottom.\nColumn 1: Only node 20 is in this column.\nColumn 2: Only node 7 is in this column.\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/29/vtree2.jpg" style="width: 512px; height: 304px;" />\nInput: root = [1,2,3,4,5,6,7]\nOutput: [[4],[2],[1,5,6],[3],[7]]\nExplanation:\nColumn -2: Only node 4 is in this column.\nColumn -1: Only node 2 is in this column.\nColumn 0: Nodes 1, 5, and 6 are in this column.\n          1 is at the top, so it comes first.\n          5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6.\nColumn 1: Only node 3 is in this column.\nColumn 2: Only node 7 is in this column.\n<strong class="example">Example 3:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/29/vtree3.jpg" style="width: 512px; height: 304px;" />\nInput: root = [1,2,3,4,6,5,7]\nOutput: [[4],[2],[1,5,6],[3],[7]]\nExplanation:\nThis case is the exact same as example 2, but with nodes 5 and 6 swapped.\nNote that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values.\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [1, 1000].</li>\n\t<li>0 &lt;= Node.val &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  [3,9,20,null,null,15,7]\n  [1,2,3,4,5,6,7]\n  [1,2,3,4,6,5,7]\n],\n"test_case_output": [\'[[9],[3,15],[20],[7]]\', \'[[4],[2],[1,5,6],[3],[7]]\', \'[[4],[2],[1,5,6],[3],[7]]\'],\n"test_case_explanation": [\n  "Column -1: Only node 9 is in this column.\nColumn 0: Nodes 3 and 15 are in this column in that order from top to bottom.\nColumn 1: Only node 20 is in this column.\nColumn 2: Only node 7 is in this column.\n"\n\n  "Column -2: Only node 4 is in this column.\nColumn -1: Only node 2 is in this column.\nColumn 0: Nodes 1, 5, and 6 are in this column.\n          1 is at the top, so it comes first.\n          5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6.\nColumn 1: Only node 3 is in this column.\nColumn 2: Only node 7 is in this column.\n"\n\n  "This case is the exact same as example 2, but with nodes 5 and 6 swapped.\nNote that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given two lists of closed intervals, firstList and secondList, where firstList[i] = [start<sub>i</sub>, end<sub>i</sub>] and secondList[j] = [start<sub>j</sub>, end<sub>j</sub>]. Each list of intervals is pairwise disjoint and in sorted order.\nReturn the intersection of these two interval lists.\nA closed interval [a, b] (with a &lt;= b) denotes the set of real numbers x with a &lt;= x &lt;= b.\nThe intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of [1, 3] and [2, 4] is [2, 3].<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2019/01/30/interval1.png" style="width: 700px; height: 194px;" />\nInput: firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]\nOutput: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]\n<strong class="example">Example 2:\nInput: firstList = [[1,3],[5,9]], secondList = []\nOutput: []\nConstraints:\n<ul>\n\t<li>0 &lt;= firstList.length, secondList.length &lt;= 1000</li>\n\t<li>firstList.length + secondList.length &gt;= 1</li>\n\t<li>0 &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 10<sup>9</sup></li>\n\t<li>end<sub>i</sub> &lt; start<sub>i+1</sub></li>\n\t<li>0 &lt;= start<sub>j</sub> &lt; end<sub>j</sub> &lt;= 10<sup>9</sup> </li>\n\t<li>end<sub>j</sub> &lt; start<sub>j+1</sub></li>\n</ul>\n\n"test_case": [\n  [[0,2],[5,10],[13,23],[24,25]]\n[[1,5],[8,12],[15,24],[25,26]]\n  [[1,3],[5,9]]\n[]\n],\n"test_case_output": [\'[[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]\', \'[]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an integer array nums and an array queries where queries[i] = [val<sub>i</sub>, index<sub>i</sub>].\nFor each query i, first, apply nums[index<sub>i</sub>] = nums[index<sub>i</sub>] + val<sub>i</sub>, then print the sum of the even values of nums.\nReturn an integer array answer where answer[i] is the answer to the i<sup>th</sup> query.<strong class="example">Example 1:\nInput: nums = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]\nOutput: [8,6,2,4]\nExplanation: At the beginning, the array is [1,2,3,4].\nAfter adding 1 to nums[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8.\nAfter adding -3 to nums[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6.\nAfter adding -4 to nums[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2.\nAfter adding 2 to nums[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4.\n<strong class="example">Example 2:\nInput: nums = [1], queries = [[4,0]]\nOutput: [0]\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>4</sup></li>\n\t<li>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></li>\n\t<li>1 &lt;= queries.length &lt;= 10<sup>4</sup></li>\n\t<li>-10<sup>4</sup> &lt;= val<sub>i</sub> &lt;= 10<sup>4</sup></li>\n\t<li>0 &lt;= index<sub>i</sub> &lt; nums.length</li>\n</ul>\n\n"test_case": [\n  [1,2,3,4]\n[[1,0],[-3,1],[-4,0],[2,3]]\n  [1]\n[[4,0]]\n],\n"test_case_output": [\'[8,6,2,4]\', \'[0]\'],\n"test_case_explanation": [\n  "At the beginning, the array is [1,2,3,4].\nAfter adding 1 to nums[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8.\nAfter adding -3 to nums[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6.\nAfter adding -4 to nums[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2.\nAfter adding 2 to nums[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven two integers a and b, return any string s such that:\n<ul>\n\t<li>s has length a + b and contains exactly a &#39;a&#39; letters, and exactly b &#39;b&#39; letters,</li>\n\t<li>The substring &#39;aaa&#39; does not occur in s, and</li>\n\t<li>The substring &#39;bbb&#39; does not occur in s.</li>\n</ul><strong class="example">Example 1:\nInput: a = 1, b = 2\nOutput: abb\nExplanation: abb, bab and bba are all correct answers.\n<strong class="example">Example 2:\nInput: a = 4, b = 1\nOutput: aabaa\nConstraints:\n<ul>\n\t<li>0 &lt;= a, b &lt;= 100</li>\n\t<li>It is guaranteed such an s exists for the given a and b.</li>\n</ul>\n\n"test_case": [\n  1\n2\n  4\n1\n],\n"test_case_output": [\'abb\', \'aabaa\'],\n"test_case_explanation": [\n  "abb, bab and bba are all correct answers.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou have planned some train traveling one year in advance. The days of the year in which you will travel are given as an integer array days. Each day is an integer from 1 to 365.\nTrain tickets are sold in three different ways:\n<ul>\n\t<li>a 1-day pass is sold for costs[0] dollars,</li>\n\t<li>a 7-day pass is sold for costs[1] dollars, and</li>\n\t<li>a 30-day pass is sold for costs[2] dollars.</li>\n</ul>\nThe passes allow that many days of consecutive travel.\n<ul>\n\t<li>For example, if we get a 7-day pass on day 2, then we can travel for 7 days: 2, 3, 4, 5, 6, 7, and 8.</li>\n</ul>\nReturn the minimum number of dollars you need to travel every day in the given list of days.<strong class="example">Example 1:\nInput: days = [1,4,6,7,8,20], costs = [2,7,15]\nOutput: 11\nExplanation: For example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.\nOn day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.\nOn day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.\nIn total, you spent $11 and covered all the days of your travel.\n<strong class="example">Example 2:\nInput: days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]\nOutput: 17\nExplanation: For example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.\nOn day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.\nIn total, you spent $17 and covered all the days of your travel.\nConstraints:\n<ul>\n\t<li>1 &lt;= days.length &lt;= 365</li>\n\t<li>1 &lt;= days[i] &lt;= 365</li>\n\t<li>days is in strictly increasing order.</li>\n\t<li>costs.length == 3</li>\n\t<li>1 &lt;= costs[i] &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  [1,4,6,7,8,20]\n[2,7,15]\n  [1,2,3,4,5,6,7,8,9,10,30,31]\n[2,7,15]\n],\n"test_case_output": [\'11\', \'17\'],\n"test_case_explanation": [\n  "For example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.\nOn day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.\nOn day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.\nIn total, you spent $11 and covered all the days of your travel.\n"\n\n  "For example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.\nOn day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.\nIn total, you spent $17 and covered all the days of your travel.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums, return the number of AND triples.\nAn AND triple is a triple of indices (i, j, k) such that:\n<ul>\n\t<li>0 &lt;= i &lt; nums.length</li>\n\t<li>0 &lt;= j &lt; nums.length</li>\n\t<li>0 &lt;= k &lt; nums.length</li>\n\t<li>nums[i] &amp; nums[j] &amp; nums[k] == 0, where &amp; represents the bitwise-AND operator.</li>\n</ul><strong class="example">Example 1:\nInput: nums = [2,1,3]\nOutput: 12\nExplanation: We could choose the following i, j, k triples:\n(i=0, j=0, k=1) : 2 &amp; 2 &amp; 1\n(i=0, j=1, k=0) : 2 &amp; 1 &amp; 2\n(i=0, j=1, k=1) : 2 &amp; 1 &amp; 1\n(i=0, j=1, k=2) : 2 &amp; 1 &amp; 3\n(i=0, j=2, k=1) : 2 &amp; 3 &amp; 1\n(i=1, j=0, k=0) : 1 &amp; 2 &amp; 2\n(i=1, j=0, k=1) : 1 &amp; 2 &amp; 1\n(i=1, j=0, k=2) : 1 &amp; 2 &amp; 3\n(i=1, j=1, k=0) : 1 &amp; 1 &amp; 2\n(i=1, j=2, k=0) : 1 &amp; 3 &amp; 2\n(i=2, j=0, k=1) : 3 &amp; 2 &amp; 1\n(i=2, j=1, k=0) : 3 &amp; 1 &amp; 2\n<strong class="example">Example 2:\nInput: nums = [0,0,0]\nOutput: 27\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 1000</li>\n\t<li>0 &lt;= nums[i] &lt; 2<sup>16</sup></li>\n</ul>\n\n"test_case": [\n  [2,1,3]\n  [0,0,0]\n],\n"test_case_output": [\'12\', \'27\'],\n"test_case_explanation": [\n  "We could choose the following i, j, k triples:\n(i=0, j=0, k=1) : 2 &amp; 2 &amp; 1\n(i=0, j=1, k=0) : 2 &amp; 1 &amp; 2\n(i=0, j=1, k=1) : 2 &amp; 1 &amp; 1\n(i=0, j=1, k=2) : 2 &amp; 1 &amp; 3\n(i=0, j=2, k=1) : 2 &amp; 3 &amp; 1\n(i=1, j=0, k=0) : 1 &amp; 2 &amp; 2\n(i=1, j=0, k=1) : 1 &amp; 2 &amp; 1\n(i=1, j=0, k=2) : 1 &amp; 2 &amp; 3\n(i=1, j=1, k=0) : 1 &amp; 1 &amp; 2\n(i=1, j=2, k=0) : 1 &amp; 3 &amp; 2\n(i=2, j=0, k=1) : 3 &amp; 2 &amp; 1\n(i=2, j=1, k=0) : 3 &amp; 1 &amp; 2\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nDesign a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key&#39;s value at a certain timestamp.\nImplement the TimeMap class:\n<ul>\n\t<li>TimeMap() Initializes the object of the data structure.</li>\n\t<li>void set(String key, String value, int timestamp) Stores the key key with the value value at the given time timestamp.</li>\n\t<li>String get(String key, int timestamp) Returns a value such that set was called previously, with timestamp_prev &lt;= timestamp. If there are multiple such values, it returns the value associated with the largest timestamp_prev. If there are no values, it returns .</li>\n</ul><strong class="example">Example 1:\nInput\n[TimeMap, set, get, get, set, get, get]\n[[], [foo, bar, 1], [foo, 1], [foo, 3], [foo, bar2, 4], [foo, 4], [foo, 5]]\nOutput\n[null, null, bar, bar, null, bar2, bar2]\nExplanation\nTimeMap timeMap = new TimeMap();\ntimeMap.set(foo, bar, 1);  // store the key foo and value bar along with timestamp = 1.\ntimeMap.get(foo, 1);         // return bar\ntimeMap.get(foo, 3);         // return bar, since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is bar.\ntimeMap.set(foo, bar2, 4); // store the key foo and value bar2 along with timestamp = 4.\ntimeMap.get(foo, 4);         // return bar2\ntimeMap.get(foo, 5);         // return bar2\nConstraints:\n<ul>\n\t<li>1 &lt;= key.length, value.length &lt;= 100</li>\n\t<li>key and value consist of lowercase English letters and digits.</li>\n\t<li>1 &lt;= timestamp &lt;= 10<sup>7</sup></li>\n\t<li>All the timestamps timestamp of set are strictly increasing.</li>\n\t<li>At most 2 * 10<sup>5</sup> calls will be made to set and get.</li>\n</ul>\n\n"test_case": [\n  ["TimeMap","set","get","get","set","get","get"]\n[[],["foo","bar",1],["foo",1],["foo",3],["foo","bar2",4],["foo",4],["foo",5]]\n],\n"test_case_output": [],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an m x n integer array grid where grid[i][j] could be:\n<ul>\n\t<li>1 representing the starting square. There is exactly one starting square.</li>\n\t<li>2 representing the ending square. There is exactly one ending square.</li>\n\t<li>0 representing empty squares we can walk over.</li>\n\t<li>-1 representing obstacles that we cannot walk over.</li>\n</ul>\nReturn the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/08/02/lc-unique1.jpg" style="width: 324px; height: 245px;" />\nInput: grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]\nOutput: 2\nExplanation: We have the following two paths: \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)\n2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/08/02/lc-unique2.jpg" style="width: 324px; height: 245px;" />\nInput: grid = [[1,0,0,0],[0,0,0,0],[0,0,0,2]]\nOutput: 4\nExplanation: We have the following four paths: \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)\n2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)\n3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)\n4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)\n<strong class="example">Example 3:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/08/02/lc-unique3-.jpg" style="width: 164px; height: 165px;" />\nInput: grid = [[0,1],[2,0]]\nOutput: 0\nExplanation: There is no path that walks over every empty square exactly once.\nNote that the starting and ending square can be anywhere in the grid.\nConstraints:\n<ul>\n\t<li>m == grid.length</li>\n\t<li>n == grid[i].length</li>\n\t<li>1 &lt;= m, n &lt;= 20</li>\n\t<li>1 &lt;= m * n &lt;= 20</li>\n\t<li>-1 &lt;= grid[i][j] &lt;= 2</li>\n\t<li>There is exactly one starting cell and one ending cell.</li>\n</ul>\n\n"test_case": [\n  [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]\n  [[1,0,0,0],[0,0,0,0],[0,0,0,2]]\n  [[0,1],[2,0]]\n],\n"test_case_output": [\'2\', \'4\', \'0\'],\n"test_case_explanation": [\n  "We have the following two paths: \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)\n2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)\n"\n\n  "We have the following four paths: \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)\n2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)\n3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)\n4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)\n"\n\n  "There is no path that walks over every empty square exactly once.\nNote that the starting and ending square can be anywhere in the grid.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given the root of a binary tree with n nodes where each node in the tree has node.val coins. There are n coins in total throughout the whole tree.\nIn one move, we may choose two adjacent nodes and move one coin from one node to another. A move may be from parent to child, or from child to parent.\nReturn the minimum number of moves required to make every node have exactly one coin.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2019/01/18/tree1.png" style="width: 250px; height: 236px;" />\nInput: root = [3,0,0]\nOutput: 2\nExplanation: From the root of the tree, we move one coin to its left child, and one coin to its right child.\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2019/01/18/tree2.png" style="width: 250px; height: 236px;" />\nInput: root = [0,3,0]\nOutput: 3\nExplanation: From the left child of the root, we move two coins to the root [taking two moves]. Then, we move one coin from the root of the tree to the right child.\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is n.</li>\n\t<li>1 &lt;= n &lt;= 100</li>\n\t<li>0 &lt;= Node.val &lt;= n</li>\n\t<li>The sum of all Node.val is n.</li>\n</ul>\n\n"test_case": [\n  [3,0,0]\n  [0,3,0]\n],\n"test_case_output": [\'2\', \'3\'],\n"test_case_explanation": [\n  "From the root of the tree, we move one coin to its left child, and one coin to its right child.\n"\n\n  "From the left child of the root, we move two coins to the root [taking two moves]. Then, we move one coin from the root of the tree to the right child.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array arr, return the length of a maximum size turbulent subarray of arr.\nA subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.\nMore formally, a subarray [arr[i], arr[i + 1], ..., arr[j]] of arr is said to be turbulent if and only if:\n<ul>\n\t<li>For i &lt;= k &lt; j:\n\t<ul>\n\t\t<li>arr[k] &gt; arr[k + 1] when k is odd, and</li>\n\t\t<li>arr[k] &lt; arr[k + 1] when k is even.</li>\n\t</ul>\n\t</li>\n\t<li>Or, for i &lt;= k &lt; j:\n\t<ul>\n\t\t<li>arr[k] &gt; arr[k + 1] when k is even, and</li>\n\t\t<li>arr[k] &lt; arr[k + 1] when k is odd.</li>\n\t</ul>\n\t</li>\n</ul><strong class="example">Example 1:\nInput: arr = [9,4,2,10,7,8,8,1,9]\nOutput: 5\nExplanation: arr[1] &gt; arr[2] &lt; arr[3] &gt; arr[4] &lt; arr[5]\n<strong class="example">Example 2:\nInput: arr = [4,8,12,16]\nOutput: 2\n<strong class="example">Example 3:\nInput: arr = [100]\nOutput: 1\nConstraints:\n<ul>\n\t<li>1 &lt;= arr.length &lt;= 4 * 10<sup>4</sup></li>\n\t<li>0 &lt;= arr[i] &lt;= 10<sup>9</sup></li>\n</ul>\n\n"test_case": [\n  [9,4,2,10,7,8,8,1,9]\n  [4,8,12,16]\n  [100]\n],\n"test_case_output": [\'5\', \'2\', \'1\'],\n"test_case_explanation": [\n  "arr[1] &gt; arr[2] &lt; arr[3] &gt; arr[4] &lt; arr[5]\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.<strong class="example">Example 1:\nInput: nums = [-4,-1,0,3,10]\nOutput: [0,1,9,16,100]\nExplanation: After squaring, the array becomes [16,1,0,9,100].\nAfter sorting, it becomes [0,1,9,16,100].\n<strong class="example">Example 2:\nInput: nums = [-7,-3,2,3,11]\nOutput: [4,9,9,49,121]\nConstraints:\n<ul>\n\t<li><span>1 &lt;= nums.length &lt;= </span>10<sup>4</sup></li>\n\t<li>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></li>\n\t<li>nums is sorted in non-decreasing order.</li>\n</ul>Follow up: Squaring each element and sorting the new array is very trivial, could you find an O(n) solution using a different approach?\n"test_case": [\n  [-4,-1,0,3,10]\n  [-7,-3,2,3,11]\n],\n"test_case_output": [\'[0,1,9,16,100]\', \'[4,9,9,49,121]\'],\n"test_case_explanation": [\n  "After squaring, the array becomes [16,1,0,9,100].\nAfter sorting, it becomes [0,1,9,16,100].\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums, return the largest perimeter of a triangle with a non-zero area, formed from three of these lengths. If it is impossible to form any triangle of a non-zero area, return 0.<strong class="example">Example 1:\nInput: nums = [2,1,2]\nOutput: 5\nExplanation: You can form a triangle with three side lengths: 1, 2, and 2.\n<strong class="example">Example 2:\nInput: nums = [1,2,1,10]\nOutput: 0\nExplanation: \nYou cannot use the side lengths 1, 1, and 2 to form a triangle.\nYou cannot use the side lengths 1, 1, and 10 to form a triangle.\nYou cannot use the side lengths 1, 2, and 10 to form a triangle.\nAs we cannot use any three side lengths to form a triangle of non-zero area, we return 0.\nConstraints:\n<ul>\n\t<li>3 &lt;= nums.length &lt;= 10<sup>4</sup></li>\n\t<li>1 &lt;= nums[i] &lt;= 10<sup>6</sup></li>\n</ul>\n\n"test_case": [\n  [2,1,2]\n  [1,2,1,10]\n],\n"test_case_output": [\'5\', \'0\'],\n"test_case_explanation": [\n  "You can form a triangle with three side lengths: 1, 2, and 2.\n"\n\n  "You cannot use the side lengths 1, 1, and 2 to form a triangle.\nYou cannot use the side lengths 1, 1, and 10 to form a triangle.\nYou cannot use the side lengths 1, 2, and 10 to form a triangle.\nAs we cannot use any three side lengths to form a triangle of non-zero area, we return 0.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given the root of a binary tree with n nodes, where each node is uniquely assigned a value from 1 to n. You are also given a sequence of n values voyage, which is the desired <a href="https://en.wikipedia.org/wiki/Tree_traversal#Pre-order" target="_blank">pre-order traversal</a> of the binary tree.\nAny node in the binary tree can be flipped by swapping its left and right subtrees. For example, flipping node 1 will have the following effect:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/02/15/fliptree.jpg" style="width: 400px; height: 187px;" />\nFlip the smallest number of nodes so that the pre-order traversal of the tree matches voyage.\nReturn a list of the values of all flipped nodes. You may return the answer in any order. If it is impossible to flip the nodes in the tree to make the pre-order traversal match voyage, return the list [-1].<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2019/01/02/1219-01.png" style="width: 150px; height: 205px;" />\nInput: root = [1,2], voyage = [2,1]\nOutput: [-1]\nExplanation: It is impossible to flip the nodes such that the pre-order traversal matches voyage.\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2019/01/02/1219-02.png" style="width: 150px; height: 142px;" />\nInput: root = [1,2,3], voyage = [1,3,2]\nOutput: [1]\nExplanation: Flipping node 1 swaps nodes 2 and 3, so the pre-order traversal matches voyage.\n<strong class="example">Example 3:\n<img alt="" src="https://assets.leetcode.com/uploads/2019/01/02/1219-02.png" style="width: 150px; height: 142px;" />\nInput: root = [1,2,3], voyage = [1,2,3]\nOutput: []\nExplanation: The tree&#39;s pre-order traversal already matches voyage, so no nodes need to be flipped.\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is n.</li>\n\t<li>n == voyage.length</li>\n\t<li>1 &lt;= n &lt;= 100</li>\n\t<li>1 &lt;= Node.val, voyage[i] &lt;= n</li>\n\t<li>All the values in the tree are unique.</li>\n\t<li>All the values in voyage are unique.</li>\n</ul>\n\n"test_case": [\n  [1,2]\n[2,1]\n  [1,2,3]\n[1,3,2]\n  [1,2,3]\n[1,2,3]\n],\n"test_case_output": [\'[-1]\', \'[1]\', \'[]\'],\n"test_case_explanation": [\n  "It is impossible to flip the nodes such that the pre-order traversal matches voyage.\n"\n\n  "Flipping node 1 swaps nodes 2 and 3, so the pre-order traversal matches voyage.\n"\n\n  "The tree&#39;s pre-order traversal already matches voyage, so no nodes need to be flipped.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an array of integers arr, sort the array by performing a series of pancake flips.\nIn one pancake flip we do the following steps:\n<ul>\n\t<li>Choose an integer k where 1 &lt;= k &lt;= arr.length.</li>\n\t<li>Reverse the sub-array arr[0...k-1] (0-indexed).</li>\n</ul>\nFor example, if arr = [3,2,1,4] and we performed a pancake flip choosing k = 3, we reverse the sub-array [3,2,1], so arr = [1,2,3,4] after the pancake flip at k = 3.\nReturn an array of the k-values corresponding to a sequence of pancake flips that sort arr. Any valid answer that sorts the array within 10 * arr.length flips will be judged as correct.<strong class="example">Example 1:\nInput: arr = [3,2,4,1]\nOutput: [4,2,4,3]\nExplanation: \nWe perform 4 pancake flips, with k values 4, 2, 4, and 3.\nStarting state: arr = [3, 2, 4, 1]\nAfter 1st flip (k = 4): arr = [1, 4, 2, 3]\nAfter 2nd flip (k = 2): arr = [4, 1, 2, 3]\nAfter 3rd flip (k = 4): arr = [3, 2, 1, 4]\nAfter 4th flip (k = 3): arr = [1, 2, 3, 4], which is sorted.\n<strong class="example">Example 2:\nInput: arr = [1,2,3]\nOutput: []\nExplanation: The input is already sorted, so there is no need to flip anything.\nNote that other answers, such as [3, 3], would also be accepted.\nConstraints:\n<ul>\n\t<li>1 &lt;= arr.length &lt;= 100</li>\n\t<li>1 &lt;= arr[i] &lt;= arr.length</li>\n\t<li>All integers in arr are unique (i.e. arr is a permutation of the integers from 1 to arr.length).</li>\n</ul>\n\n"test_case": [\n  [3,2,4,1]\n  [1,2,3]\n],\n"test_case_output": [\'[4,2,4,3]\', \'[]\'],\n"test_case_explanation": [\n  "We perform 4 pancake flips, with k values 4, 2, 4, and 3.\nStarting state: arr = [3, 2, 4, 1]\nAfter 1st flip (k = 4): arr = [1, 4, 2, 3]\nAfter 2nd flip (k = 2): arr = [4, 1, 2, 3]\nAfter 3rd flip (k = 4): arr = [3, 2, 1, 4]\nAfter 4th flip (k = 3): arr = [1, 2, 3, 4], which is sorted.\n"\n\n  "The input is already sorted, so there is no need to flip anything.\nNote that other answers, such as [3, 3], would also be accepted.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an integer array nums with the following properties:\n<ul>\n\t<li>nums.length == 2 * n.</li>\n\t<li>nums contains n + 1 unique elements.</li>\n\t<li>Exactly one element of nums is repeated n times.</li>\n</ul>\nReturn the element that is repeated n times.<strong class="example">Example 1:\nInput: nums = [1,2,3,3]\nOutput: 3\n<strong class="example">Example 2:\nInput: nums = [2,1,2,5,3,2]\nOutput: 2\n<strong class="example">Example 3:\nInput: nums = [5,1,5,2,5,3,5,4]\nOutput: 5\nConstraints:\n<ul>\n\t<li>2 &lt;= n &lt;= 5000</li>\n\t<li>nums.length == 2 * n</li>\n\t<li>0 &lt;= nums[i] &lt;= 10<sup>4</sup></li>\n\t<li>nums contains n + 1 unique elements and one of them is repeated exactly n times.</li>\n</ul>\n\n"test_case": [\n  [1,2,3,3]\n  [2,1,2,5,3,2]\n  [5,1,5,2,5,3,5,4]\n],\n"test_case_output": [\'3\', \'2\', \'5\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the root of a binary tree, determine if it is a complete binary tree.\nIn a <a href="http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees" target="_blank">complete binary tree</a>, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2<sup>h</sup> nodes inclusive at the last level h.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2018/12/15/complete-binary-tree-1.png" style="width: 180px; height: 145px;" />\nInput: root = [1,2,3,4,5,6]\nOutput: true\nExplanation: Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible.\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2018/12/15/complete-binary-tree-2.png" style="width: 200px; height: 145px;" />\nInput: root = [1,2,3,4,5,null,7]\nOutput: false\nExplanation: The node with value 7 isn&#39;t as far left as possible.\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [1, 100].</li>\n\t<li>1 &lt;= Node.val &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  [1,2,3,4,5,6]\n  [1,2,3,4,5,null,7]\n],\n"test_case_output": [\'true\', \'false\'],\n"test_case_explanation": [\n  "Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible.\n"\n\n  "The node with value 7 isn&#39;t as far left as possible.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nFor a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.\nA binary tree Xis flip equivalent to a binary tree Y if and only if we can make X equal to Y after some number of flip operations.\nGiven the roots of two binary trees root1 and root2, return true if the two trees are flip equivalent or false otherwise.<strong class="example">Example 1:\n<img alt="Flipped Trees Diagram" src="https://assets.leetcode.com/uploads/2018/11/29/tree_ex.png" style="width: 500px; height: 220px;" />\nInput: root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]\nOutput: true\nExplanation: We flipped at nodes with values 1, 3, and 5.\n<strong class="example">Example 2:\nInput: root1 = [], root2 = []\nOutput: true\n<strong class="example">Example 3:\nInput: root1 = [], root2 = [1]\nOutput: false\nConstraints:\n<ul>\n\t<li>The number of nodes in each tree is in the range [0, 100].</li>\n\t<li>Each tree will have unique node values in the range [0, 99].</li>\n</ul>\n\n"test_case": [\n  [1,2,3,4,5,6,null,null,null,7,8]\n[1,3,2,null,6,4,5,null,null,null,null,8,7]\n  []\n[]\n  []\n[1]\n],\n"test_case_output": [\'true\', \'true\', \'false\'],\n"test_case_explanation": [\n  "We flipped at nodes with values 1, 3, and 5.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an integer array deck. There is a deck of cards where every card has a unique integer. The integer on the i<sup>th</sup> card is deck[i].\nYou can order the deck in any order you want. Initially, all the cards start face down (unrevealed) in one deck.\nYou will do the following steps repeatedly until all cards are revealed:\n<ol>\n\t<li>Take the top card of the deck, reveal it, and take it out of the deck.</li>\n\t<li>If there are still cards in the deck then put the next top card of the deck at the bottom of the deck.</li>\n\t<li>If there are still unrevealed cards, go back to step 1. Otherwise, stop.</li>\n</ol>\nReturn an ordering of the deck that would reveal the cards in increasing order.\nNote that the first entry in the answer is considered to be the top of the deck.<strong class="example">Example 1:\nInput: deck = [17,13,11,2,3,5,7]\nOutput: [2,13,3,11,5,17,7]\nExplanation: \nWe get the deck in the order [17,13,11,2,3,5,7] (this order does not matter), and reorder it.\nAfter reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.\nWe reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].\nWe reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].\nWe reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17].\nWe reveal 7, and move 13 to the bottom.  The deck is now [11,17,13].\nWe reveal 11, and move 17 to the bottom.  The deck is now [13,17].\nWe reveal 13, and move 17 to the bottom.  The deck is now [17].\nWe reveal 17.\nSince all the cards revealed are in increasing order, the answer is correct.\n<strong class="example">Example 2:\nInput: deck = [1,1000]\nOutput: [1,1000]\nConstraints:\n<ul>\n\t<li>1 &lt;= deck.length &lt;= 1000</li>\n\t<li>1 &lt;= deck[i] &lt;= 10<sup>6</sup></li>\n\t<li>All the values of deck are unique.</li>\n</ul>\n\n"test_case": [\n  [17,13,11,2,3,5,7]\n  [1,1000]\n],\n"test_case_output": [\'[2,13,3,11,5,17,7]\', \'[1,1000]\'],\n"test_case_explanation": [\n  "We get the deck in the order [17,13,11,2,3,5,7] (this order does not matter), and reorder it.\nAfter reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.\nWe reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].\nWe reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].\nWe reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17].\nWe reveal 7, and move 13 to the bottom.  The deck is now [11,17,13].\nWe reveal 11, and move 17 to the bottom.  The deck is now [13,17].\nWe reveal 13, and move 17 to the bottom.  The deck is now [17].\nWe reveal 17.\nSince all the cards revealed are in increasing order, the answer is correct.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an array of integers arr, return true if and only if it is a valid mountain array.\nRecall that arr is a mountain array if and only if:\n<ul>\n\t<li>arr.length &gt;= 3</li>\n\t<li>There exists some i with 0 &lt; i &lt; arr.length - 1 such that:\n\t<ul>\n\t\t<li>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i] </li>\n\t\t<li>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</li>\n\t</ul>\n\t</li>\n</ul>\n<img src="https://assets.leetcode.com/uploads/2019/10/20/hint_valid_mountain_array.png" width="500" /><strong class="example">Example 1:\nInput: arr = [2,1]\nOutput: false\n<strong class="example">Example 2:\nInput: arr = [3,5,5]\nOutput: false\n<strong class="example">Example 3:\nInput: arr = [0,3,2,1]\nOutput: true\nConstraints:\n<ul>\n\t<li>1 &lt;= arr.length &lt;= 10<sup>4</sup></li>\n\t<li>0 &lt;= arr[i] &lt;= 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  [2,1]\n  [3,5,5]\n  [0,3,2,1]\n],\n"test_case_output": [\'false\', \'false\', \'true\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou have a RecentCounter class which counts the number of recent requests within a certain time frame.\nImplement the RecentCounter class:\n<ul>\n\t<li>RecentCounter() Initializes the counter with zero recent requests.</li>\n\t<li>int ping(int t) Adds a new request at time t, where t represents some time in milliseconds, and returns the number of requests that has happened in the past 3000 milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range [t - 3000, t].</li>\n</ul>\nIt is guaranteed that every call to ping uses a strictly larger value of t than the previous call.<strong class="example">Example 1:\nInput\n[RecentCounter, ping, ping, ping, ping]\n[[], [1], [100], [3001], [3002]]\nOutput\n[null, 1, 2, 3, 3]\nExplanation\nRecentCounter recentCounter = new RecentCounter();\nrecentCounter.ping(1);     // requests = [1], range is [-2999,1], return 1\nrecentCounter.ping(100);   // requests = [1, 100], range is [-2900,100], return 2\nrecentCounter.ping(3001);  // requests = [1, 100, 3001], range is [1,3001], return 3\nrecentCounter.ping(3002);  // requests = [1, 100, 3001, 3002], range is [2,3002], return 3\nConstraints:\n<ul>\n\t<li>1 &lt;= t &lt;= 10<sup>9</sup></li>\n\t<li>Each test case will call ping with strictly increasing values of t.</li>\n\t<li>At most 10<sup>4</sup> calls will be made to ping.</li>\n</ul>\n\n"test_case": [\n  ["RecentCounter","ping","ping","ping","ping"]\n[[],[1],[100],[3001],[3002]]\n],\n"test_case_output": [],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an n x n array of integers matrix, return the minimum sum of any falling path through matrix.\nA falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/11/03/failing1-grid.jpg" style="width: 499px; height: 500px;" />\nInput: matrix = [[2,1,3],[6,5,4],[7,8,9]]\nOutput: 13\nExplanation: There are two falling paths with a minimum sum as shown.\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/11/03/failing2-grid.jpg" style="width: 164px; height: 365px;" />\nInput: matrix = [[-19,57],[-40,-5]]\nOutput: -59\nExplanation: The falling path with a minimum sum is shown.\nConstraints:\n<ul>\n\t<li>n == matrix.length == matrix[i].length</li>\n\t<li>1 &lt;= n &lt;= 100</li>\n\t<li>-100 &lt;= matrix[i][j] &lt;= 100</li>\n</ul>\n\n"test_case": [\n  [[2,1,3],[6,5,4],[7,8,9]]\n  [[-19,57],[-40,-5]]\n],\n"test_case_output": [\'13\', \'-59\'],\n"test_case_explanation": [\n  "There are two falling paths with a minimum sum as shown.\n"\n\n  "The falling path with a minimum sum is shown.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nEvery valid email consists of a local name and a domain name, separated by the &#39;@&#39; sign. Besides lowercase letters, the email may contain one or more &#39;.&#39; or &#39;+&#39;.\n<ul>\n\t<li>For example, in alice@leetcode.com, alice is the local name, and leetcode.com is the domain name.</li>\n</ul>\nIf you add periods &#39;.&#39; between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name. Note that this rule does not apply to domain names.\n<ul>\n\t<li>For example, alice.z@leetcode.com and alicez@leetcode.com forward to the same email address.</li>\n</ul>\nIf you add a plus &#39;+&#39; in the local name, everything after the first plus sign will be ignored. This allows certain emails to be filtered. Note that this rule does not apply to domain names.\n<ul>\n\t<li>For example, m.y+name@email.com will be forwarded to my@email.com.</li>\n</ul>\nIt is possible to use both of these rules at the same time.\nGiven an array of strings emails where we send one email to each emails[i], return the number of different addresses that actually receive mails.<strong class="example">Example 1:\nInput: emails = [test.email+alex@leetcode.com,test.e.mail+bob.cathy@leetcode.com,testemail+david@lee.tcode.com]\nOutput: 2\nExplanation: testemail@leetcode.com and testemail@lee.tcode.com actually receive mails.\n<strong class="example">Example 2:\nInput: emails = [a@leetcode.com,b@leetcode.com,c@leetcode.com]\nOutput: 3\nConstraints:\n<ul>\n\t<li>1 &lt;= emails.length &lt;= 100</li>\n\t<li>1 &lt;= emails[i].length &lt;= 100</li>\n\t<li>emails[i] consist of lowercase English letters, &#39;+&#39;, &#39;.&#39; and &#39;@&#39;.</li>\n\t<li>Each emails[i] contains exactly one &#39;@&#39; character.</li>\n\t<li>All local and domain names are non-empty.</li>\n\t<li>Local names do not start with a &#39;+&#39; character.</li>\n\t<li>Domain names end with the .com suffix.</li>\n</ul>\n\n"test_case": [\n  ["test.email+alex@leetcode.com","test.e.mail+bob.cathy@leetcode.com","testemail+david@lee.tcode.com"]\n  ["a@leetcode.com","b@leetcode.com","c@leetcode.com"]\n],\n"test_case_output": [\'2\', \'3\'],\n"test_case_explanation": [\n  "testemail@leetcode.com and testemail@lee.tcode.com actually receive mails.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an array of integers nums, half of the integers in nums are odd, and the other half are even.\nSort the array so that whenever nums[i] is odd, i is odd, and whenever nums[i] is even, i is even.\nReturn any answer array that satisfies this condition.<strong class="example">Example 1:\nInput: nums = [4,2,5,7]\nOutput: [4,5,2,7]\nExplanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.\n<strong class="example">Example 2:\nInput: nums = [2,3]\nOutput: [2,3]\nConstraints:\n<ul>\n\t<li>2 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></li>\n\t<li>nums.length is even.</li>\n\t<li>Half of the integers in nums are even.</li>\n\t<li>0 &lt;= nums[i] &lt;= 1000</li>\n</ul>Follow Up: Could you solve it in-place?\n\n"test_case": [\n  [4,2,5,7]\n  [2,3]\n],\n"test_case_output": [\'[4,5,2,7]\', \'[2,3]\'],\n"test_case_explanation": [\n  "[4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an integer array deck where deck[i] represents the number written on the i<sup>th</sup> card.\nPartition the cards into one or more groups such that:\n<ul>\n\t<li>Each group has exactly x cards where x &gt; 1, and</li>\n\t<li>All the cards in one group have the same integer written on them.</li>\n</ul>\nReturn true if such partition is possible, or false otherwise.<strong class="example">Example 1:\nInput: deck = [1,2,3,4,4,3,2,1]\nOutput: true\nExplanation: Possible partition [1,1],[2,2],[3,3],[4,4].\n<strong class="example">Example 2:\nInput: deck = [1,1,1,2,2,2,3,3]\nOutput: false\nExplanation: No possible partition.\nConstraints:\n<ul>\n\t<li>1 &lt;= deck.length &lt;= 10<sup>4</sup></li>\n\t<li>0 &lt;= deck[i] &lt; 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  [1,2,3,4,4,3,2,1]\n  [1,1,1,2,2,2,3,3]\n],\n"test_case_output": [\'true\', \'false\'],\n"test_case_explanation": [\n  "Possible partition [1,1],[2,2],[3,3],[4,4].\n"\n\n  "No possible partition.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums, move all the even integers at the beginning of the array followed by all the odd integers.\nReturn any array that satisfies this condition.<strong class="example">Example 1:\nInput: nums = [3,1,2,4]\nOutput: [2,4,3,1]\nExplanation: The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.\n<strong class="example">Example 2:\nInput: nums = [0]\nOutput: [0]\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 5000</li>\n\t<li>0 &lt;= nums[i] &lt;= 5000</li>\n</ul>\n\n"test_case": [\n  [3,1,2,4]\n  [0]\n],\n"test_case_output": [\'[2,4,3,1]\', \'[0]\'],\n"test_case_explanation": [\n  "The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven two strings s and goal, return true if you can swap two letters in s so the result is equal to goal, otherwise, return false.\nSwapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at s[i] and s[j].\n<ul>\n\t<li>For example, swapping at indices 0 and 2 in abcd results in cbad.</li>\n</ul><strong class="example">Example 1:\nInput: s = ab, goal = ba\nOutput: true\nExplanation: You can swap s[0] = &#39;a&#39; and s[1] = &#39;b&#39; to get ba, which is equal to goal.\n<strong class="example">Example 2:\nInput: s = ab, goal = ab\nOutput: false\nExplanation: The only letters you can swap are s[0] = &#39;a&#39; and s[1] = &#39;b&#39;, which results in ba != goal.\n<strong class="example">Example 3:\nInput: s = aa, goal = aa\nOutput: true\nExplanation: You can swap s[0] = &#39;a&#39; and s[1] = &#39;a&#39; to get aa, which is equal to goal.\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length, goal.length &lt;= 2 * 10<sup>4</sup></li>\n\t<li>s and goal consist of lowercase letters.</li>\n</ul>\n\n"test_case": [\n  "ab"\n"ba"\n  "ab"\n"ab"\n  "aa"\n"aa"\n],\n"test_case_output": [\'true\', \'false\', \'true\'],\n"test_case_explanation": [\n  "You can swap s[0] = &#39;a&#39; and s[1] = &#39;b&#39; to get ba, which is equal to goal.\n"\n\n  "The only letters you can swap are s[0] = &#39;a&#39; and s[1] = &#39;b&#39;, which results in ba != goal.\n"\n\n  "You can swap s[0] = &#39;a&#39; and s[1] = &#39;a&#39; to get aa, which is equal to goal.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nAn array arr is a mountain if the following properties hold:\n<ul>\n\t<li>arr.length &gt;= 3</li>\n\t<li>There exists some i with 0 &lt; i &lt; arr.length - 1 such that:\n\t<ul>\n\t\t<li>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i] </li>\n\t\t<li>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</li>\n\t</ul>\n\t</li>\n</ul>\nGiven a mountain array arr, return the index i such that arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1].\nYou must solve it in O(log(arr.length)) time complexity.<strong class="example">Example 1:\nInput: arr = [0,1,0]\nOutput: 1\n<strong class="example">Example 2:\nInput: arr = [0,2,1,0]\nOutput: 1\n<strong class="example">Example 3:\nInput: arr = [0,10,5,2]\nOutput: 1\nConstraints:\n<ul>\n\t<li>3 &lt;= arr.length &lt;= 10<sup>5</sup></li>\n\t<li>0 &lt;= arr[i] &lt;= 10<sup>6</sup></li>\n\t<li>arr is guaranteed to be a mountain array.</li>\n</ul>\n\n"test_case": [\n  [0,1,0]\n  [0,2,1,0]\n  [0,10,5,2]\n],\n"test_case_output": [\'1\', \'1\', \'1\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an array representing a row of seats where seats[i] = 1 represents a person sitting in the i<sup>th</sup> seat, and seats[i] = 0 represents that the i<sup>th</sup> seat is empty (0-indexed).\nThere is at least one empty seat, and at least one person sitting.\nAlex wants to sit in the seat such that the distance between him and the closest person to him is maximized.\nReturn that maximum distance to the closest person.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/09/10/distance.jpg" style="width: 650px; height: 257px;" />\nInput: seats = [1,0,0,0,1,0,1]\nOutput: 2\nExplanation: \nIf Alex sits in the second open seat (i.e. seats[2]), then the closest person has distance 2.\nIf Alex sits in any other open seat, the closest person has distance 1.\nThus, the maximum distance to the closest person is 2.\n<strong class="example">Example 2:\nInput: seats = [1,0,0,0]\nOutput: 3\nExplanation: \nIf Alex sits in the last seat (i.e. seats[3]), the closest person is 3 seats away.\nThis is the maximum distance possible, so the answer is 3.\n<strong class="example">Example 3:\nInput: seats = [0,1]\nOutput: 1\nConstraints:\n<ul>\n\t<li>2 &lt;= seats.length &lt;= 2 * 10<sup>4</sup></li>\n\t<li>seats[i]is 0 or1.</li>\n\t<li>At least one seat is empty.</li>\n\t<li>At least one seat is occupied.</li>\n</ul>\n\n"test_case": [\n  [1,0,0,0,1,0,1]\n  [1,0,0,0]\n  [0,1]\n],\n"test_case_output": [\'2\', \'3\', \'1\'],\n"test_case_explanation": [\n  "If Alex sits in the second open seat (i.e. seats[2]), then the closest person has distance 2.\nIf Alex sits in any other open seat, the closest person has distance 1.\nThus, the maximum distance to the closest person is 2.\n"\n\n  "If Alex sits in the last seat (i.e. seats[3]), the closest person is 3 seats away.\nThis is the maximum distance possible, so the answer is 3.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a string paragraph and a string array of the banned words banned, return the most frequent word that is not banned. It is guaranteed there is at least one word that is not banned, and that the answer is unique.\nThe words in paragraph are case-insensitive and the answer should be returned in lowercase.<strong class="example">Example 1:\nInput: paragraph = Bob hit a ball, the hit BALL flew far after it was hit., banned = [hit]\nOutput: ball\nExplanation: \nhit occurs 3 times, but it is a banned word.\nball occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. \nNote that words in the paragraph are not case sensitive,\nthat punctuation is ignored (even if adjacent to words, such as ball,), \nand that hit isn&#39;t the answer even though it occurs more because it is banned.\n<strong class="example">Example 2:\nInput: paragraph = a., banned = []\nOutput: a\nConstraints:\n<ul>\n\t<li>1 &lt;= paragraph.length &lt;= 1000</li>\n\t<li>paragraph consists of English letters, space &#39; &#39;, or one of the symbols: !?&#39;,;..</li>\n\t<li>0 &lt;= banned.length &lt;= 100</li>\n\t<li>1 &lt;= banned[i].length &lt;= 10</li>\n\t<li>banned[i] consists of only lowercase English letters.</li>\n</ul>\n\n"test_case": [\n  "Bob hit a ball, the hit BALL flew far after it was hit."\n["hit"]\n  "a."\n[]\n],\n"test_case_output": [\'ball\', \'a\'],\n"test_case_explanation": [\n  "hit occurs 3 times, but it is a banned word.\nball occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. \nNote that words in the paragraph are not case sensitive,\nthat punctuation is ignored (even if adjacent to words, such as ball,), \nand that hit isn&#39;t the answer even though it occurs more because it is banned.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nA valid encoding of an array of words is any reference string s and array of indices indices such that:\n<ul>\n\t<li>words.length == indices.length</li>\n\t<li>The reference string s ends with the &#39;#&#39; character.</li>\n\t<li>For each index indices[i], the substring of s starting from indices[i] and up to (but not including) the next &#39;#&#39; character is equal to words[i].</li>\n</ul>\nGiven an array of words, return the length of the shortest reference string s possible of any valid encoding of words.<strong class="example">Example 1:\nInput: words = [time, me, bell]\nOutput: 10\nExplanation: A valid encoding would be s = time#bell# and indices = [0, 2, 5].\nwords[0] = time, the substring of s starting from indices[0] = 0 to the next &#39;#&#39; is underlined in time#bell#\nwords[1] = me, the substring of s starting from indices[1] = 2 to the next &#39;#&#39; is underlined in time#bell#\nwords[2] = bell, the substring of s starting from indices[2] = 5 to the next &#39;#&#39; is underlined in time#bell#\n<strong class="example">Example 2:\nInput: words = [t]\nOutput: 2\nExplanation: A valid encoding would be s = t# and indices = [0].\nConstraints:\n<ul>\n\t<li>1 &lt;= words.length &lt;= 2000</li>\n\t<li>1 &lt;= words[i].length &lt;= 7</li>\n\t<li>words[i] consists of only lowercase letters.</li>\n</ul>\n\n"test_case": [\n  ["time","me","bell"]\n  ["t"]\n],\n"test_case_output": [\'10\', \'2\'],\n"test_case_explanation": [\n  "A valid encoding would be s = time#bell# and indices = [0, 2, 5].\nwords[0] = time, the substring of s starting from indices[0] = 0 to the next &#39;#&#39; is underlined in time#bell#\nwords[1] = me, the substring of s starting from indices[1] = 2 to the next &#39;#&#39; is underlined in time#bell#\nwords[2] = bell, the substring of s starting from indices[2] = 5 to the next &#39;#&#39; is underlined in time#bell#\n"\n\n  "A valid encoding would be s = t# and indices = [0].\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nInternational Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows:\n<ul>\n\t<li>&#39;a&#39; maps to .-,</li>\n\t<li>&#39;b&#39; maps to -...,</li>\n\t<li>&#39;c&#39; maps to -.-., and so on.</li>\n</ul>\nFor convenience, the full table for the 26 letters of the English alphabet is given below:\n[.-,-...,-.-.,-..,.,..-.,--.,....,..,.---,-.-,.-..,--,-.,---,.--.,--.-,.-.,...,-,..-,...-,.--,-..-,-.--,--..]\nGiven an array of strings words where each word can be written as a concatenation of the Morse code of each letter.\n<ul>\n\t<li>For example, cab can be written as -.-..--..., which is the concatenation of -.-., .-, and -.... We will call such a concatenation the transformation of a word.</li>\n</ul>\nReturn the number of different transformations among all words we have.<strong class="example">Example 1:\nInput: words = [gin,zen,gig,msg]\nOutput: 2\nExplanation: The transformation of each word is:\ngin -&gt; --...-.\nzen -&gt; --...-.\ngig -&gt; --...--.\nmsg -&gt; --...--.\nThere are 2 different transformations: --...-. and --...--..\n<strong class="example">Example 2:\nInput: words = [a]\nOutput: 1\nConstraints:\n<ul>\n\t<li>1 &lt;= words.length &lt;= 100</li>\n\t<li>1 &lt;= words[i].length &lt;= 12</li>\n\t<li>words[i] consists of lowercase English letters.</li>\n</ul>\n\n"test_case": [\n  ["gin","zen","gig","msg"]\n  ["a"]\n],\n"test_case_output": [\'2\', \'1\'],\n"test_case_explanation": [\n  "The transformation of each word is:\ngin -&gt; --...-.\nzen -&gt; --...-.\ngig -&gt; --...--.\nmsg -&gt; --...--.\nThere are 2 different transformations: --...-. and --...--..\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an n x n integer matrix grid where each value grid[i][j] represents the elevation at that point (i, j).\nThe rain starts to fall. At time t, the depth of the water everywhere is t. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most t. You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim.\nReturn the least time until you can reach the bottom right square (n - 1, n - 1) if you start at the top left square (0, 0).<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/06/29/swim1-grid.jpg" style="width: 164px; height: 165px;" />\nInput: grid = [[0,2],[1,3]]\nOutput: 3\nExplanation:\nAt time 0, you are in grid location (0, 0).\nYou cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.\nYou cannot reach point (1, 1) until time 3.\nWhen the depth of water is 3, we can swim anywhere inside the grid.\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/06/29/swim2-grid-1.jpg" style="width: 404px; height: 405px;" />\nInput: grid = [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]\nOutput: 16\nExplanation: The final route is shown.\nWe need to wait until time 16 so that (0, 0) and (4, 4) are connected.\nConstraints:\n<ul>\n\t<li>n == grid.length</li>\n\t<li>n == grid[i].length</li>\n\t<li>1 &lt;= n &lt;= 50</li>\n\t<li>0 &lt;= grid[i][j] &lt;n<sup>2</sup></li>\n\t<li>Each value grid[i][j] is unique.</li>\n</ul>\n\n"test_case": [\n  [[0,2],[1,3]]\n  [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]\n],\n"test_case_output": [\'3\', \'16\'],\n"test_case_explanation": [\n  "At time 0, you are in grid location (0, 0).\nYou cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.\nYou cannot reach point (1, 1) until time 3.\nWhen the depth of water is 3, we can swim anywhere inside the grid.\n"\n\n  "The final route is shown.\nWe need to wait until time 16 so that (0, 0) and (4, 4) are connected.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou&#39;re given strings jewels representing the types of stones that are jewels, and stones representing the stones you have. Each character in stones is a type of stone you have. You want to know how many of the stones you have are also jewels.\nLetters are case sensitive, so a is considered a different type of stone from A.<strong class="example">Example 1:\nInput: jewels = "aA", stones = "aAAbbbb"\nOutput: 3\n<strong class="example">Example 2:\nInput: jewels = "z", stones = "ZZ"\nOutput: 0\nConstraints:\n<ul>\n\t<li>1 &lt;=jewels.length, stones.length &lt;= 50</li>\n\t<li>jewels and stones consist of only English letters.</li>\n\t<li>All the characters ofjewels are unique.</li>\n</ul>\n\n"test_case": [\n  "aA"\n"aAAbbbb"\n  "z"\n"ZZ"\n],\n"test_case_output": [\'3\', \'0\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an integer array nums where the largest integer is unique.\nDetermine whether the largest element in the array is at least twice as much as every other number in the array. If it is, return the index of the largest element, or return -1 otherwise.<strong class="example">Example 1:\nInput: nums = [3,6,1,0]\nOutput: 1\nExplanation: 6 is the largest integer.\nFor every other number in the array x, 6 is at least twice as big as x.\nThe index of value 6 is 1, so we return 1.\n<strong class="example">Example 2:\nInput: nums = [1,2,3,4]\nOutput: -1\nExplanation: 4 is less than twice the value of 3, so we return -1.\nConstraints:\n<ul>\n\t<li>2 &lt;= nums.length &lt;= 50</li>\n\t<li>0 &lt;= nums[i] &lt;= 100</li>\n\t<li>The largest element in nums is unique.</li>\n</ul>\n\n"test_case": [\n  [3,6,1,0]\n  [1,2,3,4]\n],\n"test_case_output": [\'1\', \'-1\'],\n"test_case_explanation": [\n  "6 is the largest integer.\nFor every other number in the array x, 6 is at least twice as big as x.\nThe index of value 6 is 1, so we return 1.\n"\n\n  "4 is less than twice the value of 3, so we return -1.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an integer array cost where cost[i] is the cost of i<sup>th</sup> step on a staircase. Once you pay the cost, you can either climb one or two steps.\nYou can either start from the step with index 0, or the step with index 1.\nReturn the minimum cost to reach the top of the floor.<strong class="example">Example 1:\nInput: cost = [10,15,20]\nOutput: 15\nExplanation: You will start at index 1.\n- Pay 15 and climb two steps to reach the top.\nThe total cost is 15.\n<strong class="example">Example 2:\nInput: cost = [1,100,1,1,1,100,1,1,100,1]\nOutput: 6\nExplanation: You will start at index 0.\n- Pay 1 and climb two steps to reach index 2.\n- Pay 1 and climb two steps to reach index 4.\n- Pay 1 and climb two steps to reach index 6.\n- Pay 1 and climb one step to reach index 7.\n- Pay 1 and climb two steps to reach index 9.\n- Pay 1 and climb one step to reach the top.\nThe total cost is 6.\nConstraints:\n<ul>\n\t<li>2 &lt;= cost.length &lt;= 1000</li>\n\t<li>0 &lt;= cost[i] &lt;= 999</li>\n</ul>\n\n"test_case": [\n  [10,15,20]\n  [1,100,1,1,1,100,1,1,100,1]\n],\n"test_case_output": [\'15\', \'6\'],\n"test_case_explanation": [\n  "You will start at index 1.\n- Pay 15 and climb two steps to reach the top.\nThe total cost is 15.\n"\n\n  "You will start at index 0.\n- Pay 1 and climb two steps to reach index 2.\n- Pay 1 and climb two steps to reach index 4.\n- Pay 1 and climb two steps to reach index 6.\n- Pay 1 and climb one step to reach index 7.\n- Pay 1 and climb two steps to reach index 9.\n- Pay 1 and climb one step to reach the top.\nThe total cost is 6.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a list of accounts where each element accounts[i] is a list of strings, where the first element accounts[i][0] is a name, and the rest of the elements are emails representing emails of the account.\nNow, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.\nAfter merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order. The accounts themselves can be returned in any order.<strong class="example">Example 1:\nInput: accounts = [[John,johnsmith@mail.com,john_newyork@mail.com],[John,johnsmith@mail.com,john00@mail.com],[Mary,mary@mail.com],[John,johnnybravo@mail.com]]\nOutput: [[John,john00@mail.com,john_newyork@mail.com,johnsmith@mail.com],[Mary,mary@mail.com],[John,johnnybravo@mail.com]]\nExplanation:\nThe first and second John&#39;s are the same person as they have the common email johnsmith@mail.com.\nThe third John and Mary are different people as none of their email addresses are used by other accounts.\nWe could return these lists in any order, for example the answer [[&#39;Mary&#39;, &#39;mary@mail.com&#39;], [&#39;John&#39;, &#39;johnnybravo@mail.com&#39;], \n[&#39;John&#39;, &#39;john00@mail.com&#39;, &#39;john_newyork@mail.com&#39;, &#39;johnsmith@mail.com&#39;]] would still be accepted.\n<strong class="example">Example 2:\nInput: accounts = [[Gabe,Gabe0@m.co,Gabe3@m.co,Gabe1@m.co],[Kevin,Kevin3@m.co,Kevin5@m.co,Kevin0@m.co],[Ethan,Ethan5@m.co,Ethan4@m.co,Ethan0@m.co],[Hanzo,Hanzo3@m.co,Hanzo1@m.co,Hanzo0@m.co],[Fern,Fern5@m.co,Fern1@m.co,Fern0@m.co]]\nOutput: [[Ethan,Ethan0@m.co,Ethan4@m.co,Ethan5@m.co],[Gabe,Gabe0@m.co,Gabe1@m.co,Gabe3@m.co],[Hanzo,Hanzo0@m.co,Hanzo1@m.co,Hanzo3@m.co],[Kevin,Kevin0@m.co,Kevin3@m.co,Kevin5@m.co],[Fern,Fern0@m.co,Fern1@m.co,Fern5@m.co]]\nConstraints:\n<ul>\n\t<li>1 &lt;= accounts.length &lt;= 1000</li>\n\t<li>2 &lt;= accounts[i].length &lt;= 10</li>\n\t<li>1 &lt;= accounts[i][j].length &lt;= 30</li>\n\t<li>accounts[i][0] consists of English letters.</li>\n\t<li>accounts[i][j] (for j &gt; 0) is a valid email.</li>\n</ul>\n\n"test_case": [\n  [["John","johnsmith@mail.com","john_newyork@mail.com"],["John","johnsmith@mail.com","john00@mail.com"],["Mary","mary@mail.com"],["John","johnnybravo@mail.com"]]\n  [["Gabe","Gabe0@m.co","Gabe3@m.co","Gabe1@m.co"],["Kevin","Kevin3@m.co","Kevin5@m.co","Kevin0@m.co"],["Ethan","Ethan5@m.co","Ethan4@m.co","Ethan0@m.co"],["Hanzo","Hanzo3@m.co","Hanzo1@m.co","Hanzo0@m.co"],["Fern","Fern5@m.co","Fern1@m.co","Fern0@m.co"]]\n],\n"test_case_output": [\'[[John,john00@mail.com,john_newyork@mail.com,johnsmith@mail.com],[Mary,mary@mail.com],[John,johnnybravo@mail.com]]\', \'[[Ethan,Ethan0@m.co,Ethan4@m.co,Ethan5@m.co],[Gabe,Gabe0@m.co,Gabe1@m.co,Gabe3@m.co],[Hanzo,Hanzo0@m.co,Hanzo1@m.co,Hanzo3@m.co],[Kevin,Kevin0@m.co,Kevin3@m.co,Kevin5@m.co],[Fern,Fern0@m.co,Fern1@m.co,Fern5@m.co]]\'],\n"test_case_explanation": [\n  "The first and second John&#39;s are the same person as they have the common email johnsmith@mail.com.\nThe third John and Mary are different people as none of their email addresses are used by other accounts.\nWe could return these lists in any order, for example the answer [[&#39;Mary&#39;, &#39;mary@mail.com&#39;], [&#39;John&#39;, &#39;johnnybravo@mail.com&#39;], \n[&#39;John&#39;, &#39;john00@mail.com&#39;, &#39;john_newyork@mail.com&#39;, &#39;johnsmith@mail.com&#39;]] would still be accepted.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nWe have two special characters:\n<ul>\n\t<li>The first character can be represented by one bit 0.</li>\n\t<li>The second character can be represented by two bits (10 or 11).</li>\n</ul>\nGiven a binary array bits that ends with 0, return true if the last character must be a one-bit character.<strong class="example">Example 1:\nInput: bits = [1,0,0]\nOutput: true\nExplanation: The only way to decode it is two-bit character and one-bit character.\nSo the last character is one-bit character.\n<strong class="example">Example 2:\nInput: bits = [1,1,1,0]\nOutput: false\nExplanation: The only way to decode it is two-bit character and two-bit character.\nSo the last character is not one-bit character.\nConstraints:\n<ul>\n\t<li>1 &lt;= bits.length &lt;= 1000</li>\n\t<li>bits[i] is either 0 or 1.</li>\n</ul>\n\n"test_case": [\n  [1,0,0]\n  [1,1,1,0]\n],\n"test_case_output": [\'true\', \'false\'],\n"test_case_explanation": [\n  "The only way to decode it is two-bit character and one-bit character.\nSo the last character is one-bit character.\n"\n\n  "The only way to decode it is two-bit character and two-bit character.\nSo the last character is not one-bit character.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an array prices where prices[i] is the price of a given stock on the i<sup>th</sup> day, and an integer fee representing a transaction fee.\nFind the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.\nNote:\n<ul>\n\t<li>You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</li>\n\t<li>The transaction fee is only charged once for each stock purchase and sale.</li>\n</ul><strong class="example">Example 1:\nInput: prices = [1,3,2,8,4,9], fee = 2\nOutput: 8\nExplanation: The maximum profit can be achieved by:\n- Buying at prices[0] = 1\n- Selling at prices[3] = 8\n- Buying at prices[4] = 4\n- Selling at prices[5] = 9\nThe total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.\n<strong class="example">Example 2:\nInput: prices = [1,3,7,5,10,3], fee = 3\nOutput: 6\nConstraints:\n<ul>\n\t<li>1 &lt;= prices.length &lt;= 5 * 10<sup>4</sup></li>\n\t<li>1 &lt;= prices[i] &lt; 5 * 10<sup>4</sup></li>\n\t<li>0 &lt;= fee &lt; 5 * 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  [1,3,2,8,4,9]\n2\n  [1,3,7,5,10,3]\n3\n],\n"test_case_output": [\'8\', \'6\'],\n"test_case_explanation": [\n  "The maximum profit can be achieved by:\n- Buying at prices[0] = 1\n- Selling at prices[3] = 8\n- Buying at prices[4] = 4\n- Selling at prices[5] = 9\nThe total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven two strings s1 ands2, return the lowest ASCII sum of deleted characters to make two strings equal.<strong class="example">Example 1:\nInput: s1 = sea, s2 = eat\nOutput: 231\nExplanation: Deleting s from sea adds the ASCII value of s (115) to the sum.\nDeleting t from eat adds 116 to the sum.\nAt the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.\n<strong class="example">Example 2:\nInput: s1 = delete, s2 = leet\nOutput: 403\nExplanation: Deleting dee from delete to turn the string into let,\nadds 100[d] + 101[e] + 101[e] to the sum.\nDeleting e from leet adds 101[e] to the sum.\nAt the end, both strings are equal to let, and the answer is 100+101+101+101 = 403.\nIf instead we turned both strings into lee or eet, we would get answers of 433 or 417, which are higher.\nConstraints:\n<ul>\n\t<li>1 &lt;= s1.length, s2.length &lt;= 1000</li>\n\t<li>s1 and s2 consist of lowercase English letters.</li>\n</ul>\n\n"test_case": [\n  "sea"\n"eat"\n  "delete"\n"leet"\n],\n"test_case_output": [\'231\', \'403\'],\n"test_case_explanation": [\n  "Deleting s from sea adds the ASCII value of s (115) to the sum.\nDeleting t from eat adds 116 to the sum.\nAt the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.\n"\n\n  "Deleting dee from delete to turn the string into let,\nadds 100[d] + 101[e] + 101[e] to the sum.\nDeleting e from leet adds 101[e] to the sum.\nAt the end, both strings are equal to let, and the answer is 100+101+101+101 = 403.\nIf instead we turned both strings into lee or eet, we would get answers of 433 or 417, which are higher.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an m x n binary matrix grid. An island is a group of 1&#39;s (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\nThe area of an island is the number of cells with a value 1 in the island.\nReturn the maximum area of an island in grid. If there is no island, return 0.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/05/01/maxarea1-grid.jpg" style="width: 500px; height: 310px;" />\nInput: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]\nOutput: 6\nExplanation: The answer is not 11, because the island must be connected 4-directionally.\n<strong class="example">Example 2:\nInput: grid = [[0,0,0,0,0,0,0,0]]\nOutput: 0\nConstraints:\n<ul>\n\t<li>m == grid.length</li>\n\t<li>n == grid[i].length</li>\n\t<li>1 &lt;= m, n &lt;= 50</li>\n\t<li>grid[i][j] is either 0 or 1.</li>\n</ul>\n\n"test_case": [\n  [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]\n  [[0,0,0,0,0,0,0,0]]\n],\n"test_case_output": [\'6\', \'0\'],\n"test_case_explanation": [\n  "The answer is not 11, because the island must be connected 4-directionally.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nIn this problem, a tree is an undirected graph that is connected and has no cycles.\nYou are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. The graph is represented as an array edges of length n where edges[i] = [a<sub>i</sub>, b<sub>i</sub>] indicates that there is an edge between nodes a<sub>i</sub> and b<sub>i</sub> in the graph.\nReturn an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/05/02/reduntant1-1-graph.jpg" style="width: 222px; height: 222px;" />\nInput: edges = [[1,2],[1,3],[2,3]]\nOutput: [2,3]\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/05/02/reduntant1-2-graph.jpg" style="width: 382px; height: 222px;" />\nInput: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]\nOutput: [1,4]\nConstraints:\n<ul>\n\t<li>n == edges.length</li>\n\t<li>3 &lt;= n &lt;= 1000</li>\n\t<li>edges[i].length == 2</li>\n\t<li>1 &lt;= a<sub>i</sub> &lt; b<sub>i</sub> &lt;= edges.length</li>\n\t<li>a<sub>i</sub> != b<sub>i</sub></li>\n\t<li>There are no repeated edges.</li>\n\t<li>The given graph is connected.</li>\n</ul>\n\n"test_case": [\n  [[1,2],[1,3],[2,3]]\n  [[1,2],[2,3],[3,4],[1,4],[1,5]]\n],\n"test_case_output": [\'[2,3]\', \'[1,4]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node&#39;s value is the smaller value among its two sub-nodes. More formally, the propertyroot.val = min(root.left.val, root.right.val)always holds.\nGiven such a binary tree, you need to output the second minimum value in the set made of all the nodes&#39; value in the whole tree.\nIf no such second minimum value exists, output -1 instead.\n<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/10/15/smbt1.jpg" style="width: 431px; height: 302px;" />\nInput: root = [2,2,5,null,null,5,7]\nOutput: 5\nExplanation: The smallest value is 2, the second smallest value is 5.\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/10/15/smbt2.jpg" style="width: 321px; height: 182px;" />\nInput: root = [2,2,2]\nOutput: -1\nExplanation: The smallest value is 2, but there isn&#39;t any second smallest value.\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [1, 25].</li>\n\t<li>1 &lt;= Node.val &lt;= 2<sup>31</sup> - 1</li>\n\t<li>root.val == min(root.left.val, root.right.val)for each internal node of the tree.</li>\n</ul>\n\n"test_case": [\n  [2,2,5,null,null,5,7]\n  [2,2,2]\n],\n"test_case_output": [\'5\', \'-1\'],\n"test_case_explanation": [\n  "The smallest value is 2, the second smallest value is 5.\n"\n\n  "The smallest value is 2, but there isn&#39;t any second smallest value.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an array nums with n integers, your task is to check if it could become non-decreasing by modifying at most one element.\nWe define an array is non-decreasing if nums[i] &lt;= nums[i + 1] holds for every i (0-based) such that (0 &lt;= i &lt;= n - 2).<strong class="example">Example 1:\nInput: nums = [4,2,3]\nOutput: true\nExplanation: You could modify the first 4 to 1 to get a non-decreasing array.\n<strong class="example">Example 2:\nInput: nums = [4,2,1]\nOutput: false\nExplanation: You cannot get a non-decreasing array by modifying at most one element.\nConstraints:\n<ul>\n\t<li>n == nums.length</li>\n\t<li>1 &lt;= n &lt;= 10<sup>4</sup></li>\n\t<li>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></li>\n</ul>\n\n"test_case": [\n  [4,2,3]\n  [4,2,1]\n],\n"test_case_output": [\'true\', \'false\'],\n"test_case_explanation": [\n  "You could modify the first 4 to 1 to get a non-decreasing array.\n"\n\n  "You cannot get a non-decreasing array by modifying at most one element.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the root of a binary tree, return the maximum width of the given tree.\nThe maximum width of a tree is the maximum width among all levels.\nThe width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.\nIt is guaranteed that the answer will in the range of a 32-bit signed integer.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/05/03/width1-tree.jpg" style="width: 359px; height: 302px;" />\nInput: root = [1,3,2,5,3,null,9]\nOutput: 4\nExplanation: The maximum width exists in the third level with length 4 (5,3,null,9).\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2022/03/14/maximum-width-of-binary-tree-v3.jpg" style="width: 442px; height: 422px;" />\nInput: root = [1,3,2,5,null,null,9,6,null,7]\nOutput: 7\nExplanation: The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).\n<strong class="example">Example 3:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/05/03/width3-tree.jpg" style="width: 289px; height: 299px;" />\nInput: root = [1,3,2,5]\nOutput: 2\nExplanation: The maximum width exists in the second level with length 2 (3,2).\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [1, 3000].</li>\n\t<li>-100 &lt;= Node.val &lt;= 100</li>\n</ul>\n\n"test_case": [\n  [1,3,2,5,3,null,9]\n  [1,3,2,5,null,null,9,6,null,7]\n  [1,3,2,5]\n],\n"test_case_output": [\'4\', \'7\', \'2\'],\n"test_case_explanation": [\n  "The maximum width exists in the third level with length 4 (5,3,null,9).\n"\n\n  "The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).\n"\n\n  "The maximum width exists in the second level with length 2 (3,2).\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nAn image smoother is a filter of the size 3 x 3 that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells (i.e., the average of the nine cells in the blue smoother). If one or more of the surrounding cells of a cell is not present, we do not consider it in the average (i.e., the average of the four cells in the red smoother).\n<img alt="" src="https://assets.leetcode.com/uploads/2021/05/03/smoother-grid.jpg" style="width: 493px; height: 493px;" />\nGiven an m x n integer matrix img representing the grayscale of an image, return the image after applying the smoother on each cell of it.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/05/03/smooth-grid.jpg" style="width: 613px; height: 253px;" />\nInput: img = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: [[0,0,0],[0,0,0],[0,0,0]]\nExplanation:\nFor the points (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0\nFor the points (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0\nFor the point (1,1): floor(8/9) = floor(0.88888889) = 0\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/05/03/smooth2-grid.jpg" style="width: 613px; height: 253px;" />\nInput: img = [[100,200,100],[200,50,200],[100,200,100]]\nOutput: [[137,141,137],[141,138,141],[137,141,137]]\nExplanation:\nFor the points (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137.5) = 137\nFor the points (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141.666667) = 141\nFor the point (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138.888889) = 138\nConstraints:\n<ul>\n\t<li>m == img.length</li>\n\t<li>n == img[i].length</li>\n\t<li>1 &lt;= m, n &lt;= 200</li>\n\t<li>0 &lt;= img[i][j] &lt;= 255</li>\n</ul>\n\n"test_case": [\n  [[1,1,1],[1,0,1],[1,1,1]]\n  [[100,200,100],[200,50,200],[100,200,100]]\n],\n"test_case_output": [\'[[0,0,0],[0,0,0],[0,0,0]]\', \'[[137,141,137],[141,138,141],[137,141,137]]\'],\n"test_case_explanation": [\n  "For the points (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0\nFor the points (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0\nFor the point (1,1): floor(8/9) = floor(0.88888889) = 0\n"\n\n  "For the points (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137.5) = 137\nFor the points (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141.666667) = 141\nFor the point (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138.888889) = 138\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the root of a binary tree, construct a 0-indexed m x n string matrix res that represents a formatted layout of the tree. The formatted layout matrix should be constructed using the following rules:\n<ul>\n\t<li>The height of the tree is heightand the number of rows m should be equal to height + 1.</li>\n\t<li>The number of columns n should be equal to 2<sup>height+1</sup> - 1.</li>\n\t<li>Place the root node in the middle of the top row (more formally, at location res[0][(n-1)/2]).</li>\n\t<li>For each node that has been placed in the matrix at position res[r][c], place its left child at res[r+1][c-2<sup>height-r-1</sup>] and its right child at res[r+1][c+2<sup>height-r-1</sup>].</li>\n\t<li>Continue this process until all the nodes in the tree have been placed.</li>\n\t<li>Any empty cells should contain the empty string .</li>\n</ul>\nReturn the constructed matrix res.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/05/03/print1-tree.jpg" style="width: 141px; height: 181px;" />\nInput: root = [1,2]\nOutput: \n[[,1,],\n[2,,]]\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/05/03/print2-tree.jpg" style="width: 207px; height: 302px;" />\nInput: root = [1,2,3,null,4]\nOutput: \n[[,,,1,,,],\n[,2,,,,3,],\n[,,4,,,,]]\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [1, 2<sup>10</sup>].</li>\n\t<li>-99 &lt;= Node.val &lt;= 99</li>\n\t<li>The depth of the tree will be in the range [1, 10].</li>\n</ul>\n\n"test_case": [\n  [1,2]\n  [1,2,3,null,4]\n],\n"test_case_output": [\'\', \'\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the rootof a binary tree, return all duplicate subtrees.\nFor each kind of duplicate subtrees, you only need to return the root node of any one of them.\nTwo trees are duplicate if they have the same structure with the same node values.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/08/16/e1.jpg" style="width: 450px; height: 354px;" />\nInput: root = [1,2,3,4,null,2,4,null,null,4]\nOutput: [[2,4],[4]]\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/08/16/e2.jpg" style="width: 321px; height: 201px;" />\nInput: root = [2,1,1]\nOutput: [[1]]\n<strong class="example">Example 3:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/08/16/e33.jpg" style="width: 450px; height: 303px;" />\nInput: root = [2,2,2,3,null,3,null]\nOutput: [[2,3],[3]]\nConstraints:\n<ul>\n\t<li>The number of the nodes in the tree will be in the range [1, 5000]</li>\n\t<li>-200 &lt;= Node.val &lt;= 200</li>\n</ul>\n\n"test_case": [\n  [1,2,3,4,null,2,4,null,null,4]\n  [2,1,1]\n  [2,2,2,3,null,3,null]\n],\n"test_case_output": [\'[[2,4],[4]]\', \'[[1]]\', \'[[2,3],[3]]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a string s, return the number of palindromic substrings in it.\nA string is a palindrome when it reads the same backward as forward.\nA substring is a contiguous sequence of characters within the string.<strong class="example">Example 1:\nInput: s = abc\nOutput: 3\nExplanation: Three palindromic strings: a, b, c.\n<strong class="example">Example 2:\nInput: s = aaa\nOutput: 6\nExplanation: Six palindromic strings: a, a, a, aa, aa, aaa.\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 1000</li>\n\t<li>s consists of lowercase English letters.</li>\n</ul>\n\n"test_case": [\n  "abc"\n  "aaa"\n],\n"test_case_output": [\'3\', \'6\'],\n"test_case_explanation": [\n  "Three palindromic strings: a, b, c.\n"\n\n  "Six palindromic strings: a, a, a, aa, aa, aaa.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an integer array nums consisting of n elements, and an integer k.\nFind a contiguous subarray whose length is equal to k that has the maximum average value and return this value. Any answer with a calculation error less than 10<sup>-5</sup> will be accepted.<strong class="example">Example 1:\nInput: nums = [1,12,-5,-6,50,3], k = 4\nOutput: 12.75000\nExplanation: Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75\n<strong class="example">Example 2:\nInput: nums = [5], k = 1\nOutput: 5.00000\nConstraints:\n<ul>\n\t<li>n == nums.length</li>\n\t<li>1 &lt;= k &lt;= n &lt;= 10<sup>5</sup></li>\n\t<li>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  [1,12,-5,-6,50,3]\n4\n  [5]\n1\n],\n"test_case_output": [\'12.75000\', \'5.00000\'],\n"test_case_explanation": [\n  "Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums, find three numbers whose product is maximum and return the maximum product.<strong class="example">Example 1:\nInput: nums = [1,2,3]\nOutput: 6\n<strong class="example">Example 2:\nInput: nums = [1,2,3,4]\nOutput: 24\n<strong class="example">Example 3:\nInput: nums = [-1,-2,-3]\nOutput: -6\nConstraints:\n<ul>\n\t<li>3 &lt;= nums.length &lt;=10<sup>4</sup></li>\n\t<li>-1000 &lt;= nums[i] &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  [1,2,3]\n  [1,2,3,4]\n  [-1,-2,-3]\n],\n"test_case_output": [\'6\', \'24\', \'-6\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the root of a binary tree and two integers val and depth, add a row of nodes with value val at the given depth depth.\nNote that the root node is at depth 1.\nThe adding rule is:\n<ul>\n\t<li>Given the integer depth, for each not null tree node cur at the depth depth - 1, create two tree nodes with value val as cur&#39;s left subtree root and right subtree root.</li>\n\t<li>cur&#39;s original left subtree should be the left subtree of the new left subtree root.</li>\n\t<li>cur&#39;s original right subtree should be the right subtree of the new right subtree root.</li>\n\t<li>If depth == 1 that means there is no depth depth - 1 at all, then create a tree node with value val as the new root of the whole original tree, and the original tree is the new root&#39;s left subtree.</li>\n</ul><strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/15/addrow-tree.jpg" style="width: 500px; height: 231px;" />\nInput: root = [4,2,6,3,1,5], val = 1, depth = 2\nOutput: [4,1,1,2,null,null,6,3,1,5]\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/11/add2-tree.jpg" style="width: 500px; height: 277px;" />\nInput: root = [4,2,null,3,1], val = 1, depth = 3\nOutput: [4,2,null,1,1,3,null,null,1]\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [1, 10<sup>4</sup>].</li>\n\t<li>The depth of the tree is in the range [1, 10<sup>4</sup>].</li>\n\t<li>-100 &lt;= Node.val &lt;= 100</li>\n\t<li>-10<sup>5</sup> &lt;= val &lt;= 10<sup>5</sup></li>\n\t<li>1 &lt;= depth &lt;= the depth of tree + 1</li>\n</ul>\n\n"test_case": [\n  [4,2,6,3,1,5]\n1\n2\n  [4,2,null,3,1]\n1\n3\n],\n"test_case_output": [\'[4,1,1,2,null,null,6,3,1,5]\', \'[4,2,null,1,1,3,null,null,1]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums, you need to find one continuous subarray such that if you only sort this subarray in non-decreasing order, then the whole array will be sorted in non-decreasing order.\nReturn the shortest such subarray and output its length.<strong class="example">Example 1:\nInput: nums = [2,6,4,8,10,9,15]\nOutput: 5\nExplanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.\n<strong class="example">Example 2:\nInput: nums = [1,2,3,4]\nOutput: 0\n<strong class="example">Example 3:\nInput: nums = [1]\nOutput: 0\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>4</sup></li>\n\t<li>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></li>\n</ul>Follow up: Can you solve it in O(n) time complexity?\n"test_case": [\n  [2,6,4,8,10,9,15]\n  [1,2,3,4]\n  [1]\n],\n"test_case_output": [\'5\', \'0\', \'0\'],\n"test_case_explanation": [\n  "You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.\nA subtree of a binary tree tree is a tree that consists of a node in tree and all of this node&#39;s descendants. The tree tree could also be considered as a subtree of itself.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/04/28/subtree1-tree.jpg" style="width: 532px; height: 400px;" />\nInput: root = [3,4,5,1,2], subRoot = [4,1,2]\nOutput: true\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/04/28/subtree2-tree.jpg" style="width: 502px; height: 458px;" />\nInput: root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]\nOutput: false\nConstraints:\n<ul>\n\t<li>The number of nodes in the root tree is in the range [1, 2000].</li>\n\t<li>The number of nodes in the subRoot tree is in the range [1, 1000].</li>\n\t<li>-10<sup>4</sup> &lt;= root.val &lt;= 10<sup>4</sup></li>\n\t<li>-10<sup>4</sup> &lt;= subRoot.val &lt;= 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  [3,4,5,1,2]\n[4,1,2]\n  [3,4,5,1,2,null,null,null,null,0]\n[4,1,2]\n],\n"test_case_output": [\'true\', \'false\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the root of a binary tree, return the sum of every tree node&#39;s tilt.\nThe tilt of a tree node is the absolute difference between the sum of all left subtree node values and all right subtree node values. If a node does not have a left child, then the sum of the left subtree node values is treated as 0. The rule is similar if the node does not have a right child.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/10/20/tilt1.jpg" style="width: 712px; height: 182px;" />\nInput: root = [1,2,3]\nOutput: 1\nExplanation: \nTilt of node 2 : |0-0| = 0 (no children)\nTilt of node 3 : |0-0| = 0 (no children)\nTilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3)\nSum of every tilt : 0 + 0 + 1 = 1\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/10/20/tilt2.jpg" style="width: 800px; height: 203px;" />\nInput: root = [4,2,9,3,5,null,7]\nOutput: 15\nExplanation: \nTilt of node 3 : |0-0| = 0 (no children)\nTilt of node 5 : |0-0| = 0 (no children)\nTilt of node 7 : |0-0| = 0 (no children)\nTilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is 3; right subtree is just right child, so sum is 5)\nTilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is just right child, so sum is 7)\nTilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which sums to 16)\nSum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15\n<strong class="example">Example 3:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/10/20/tilt3.jpg" style="width: 800px; height: 293px;" />\nInput: root = [21,7,14,1,1,2,2,3,3]\nOutput: 9\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [0, 10<sup>4</sup>].</li>\n\t<li>-1000 &lt;= Node.val &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  [1,2,3]\n  [4,2,9,3,5,null,7]\n  [21,7,14,1,1,2,2,3,3]\n],\n"test_case_output": [\'1\', \'15\', \'9\'],\n"test_case_explanation": [\n  "Tilt of node 2 : |0-0| = 0 (no children)\nTilt of node 3 : |0-0| = 0 (no children)\nTilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3)\nSum of every tilt : 0 + 0 + 1 = 1\n"\n\n  "Tilt of node 3 : |0-0| = 0 (no children)\nTilt of node 5 : |0-0| = 0 (no children)\nTilt of node 7 : |0-0| = 0 (no children)\nTilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is 3; right subtree is just right child, so sum is 5)\nTilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is just right child, so sum is 7)\nTilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which sums to 16)\nSum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThere are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.\nA province is a group of directly or indirectly connected cities and no other cities outside of the group.\nYou are given an n x n matrix isConnected where isConnected[i][j] = 1 if the i<sup>th</sup> city and the j<sup>th</sup> city are directly connected, and isConnected[i][j] = 0 otherwise.\nReturn the total number of provinces.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/12/24/graph1.jpg" style="width: 222px; height: 142px;" />\nInput: isConnected = [[1,1,0],[1,1,0],[0,0,1]]\nOutput: 2\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/12/24/graph2.jpg" style="width: 222px; height: 142px;" />\nInput: isConnected = [[1,0,0],[0,1,0],[0,0,1]]\nOutput: 3\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 200</li>\n\t<li>n == isConnected.length</li>\n\t<li>n == isConnected[i].length</li>\n\t<li>isConnected[i][j] is 1 or 0.</li>\n\t<li>isConnected[i][i] == 1</li>\n\t<li>isConnected[i][j] == isConnected[j][i]</li>\n</ul>\n\n"test_case": [\n  [[1,1,0],[1,1,0],[0,0,1]]\n  [[1,0,0],[0,1,0],[0,0,1]]\n],\n"test_case_output": [\'2\', \'3\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the root of a binary tree, return the length of the diameter of the tree.\nThe diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.\nThe length of a path between two nodes is represented by the number of edges between them.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/06/diamtree.jpg" style="width: 292px; height: 302px;" />\nInput: root = [1,2,3,4,5]\nOutput: 3\nExplanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].\n<strong class="example">Example 2:\nInput: root = [1,2]\nOutput: 1\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [1, 10<sup>4</sup>].</li>\n\t<li>-100 &lt;= Node.val &lt;= 100</li>\n</ul>\n\n"test_case": [\n  [1,2,3,4,5]\n  [1,2]\n],\n"test_case_output": [\'3\', \'1\'],\n"test_case_explanation": [\n  "3 is the length of the path [4,2,1,3] or [5,2,1,3].\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.\nAs a reminder, a binary search tree is a tree that satisfies these constraints:\n<ul>\n\t<li>The left subtree of a node contains only nodes with keys less than the node&#39;s key.</li>\n\t<li>The right subtree of a node contains only nodes with keys greater than the node&#39;s key.</li>\n\t<li>Both the left and right subtrees must also be binary search trees.</li>\n</ul><strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2019/05/02/tree.png" style="width: 500px; height: 341px;" />\nInput: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\nOutput: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\n<strong class="example">Example 2:\nInput: root = [0,null,1]\nOutput: [1,null,1]\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [0, 10<sup>4</sup>].</li>\n\t<li>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></li>\n\t<li>All the values in the tree are unique.</li>\n\t<li>root is guaranteed to be a valid binary search tree.</li>\n</ul>Note: This question is the same as 1038: <a href="https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/" target="_blank">https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/</a>\n\n"test_case": [\n  [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\n  [0,null,1]\n],\n"test_case_output": [\'[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\', \'[1,null,1]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an array of integers nums and an integer k, return the number of unique k-diff pairs in the array.\nA k-diff pair is an integer pair (nums[i], nums[j]), where the following are true:\n<ul>\n\t<li>0 &lt;= i, j &lt; nums.length</li>\n\t<li>i != j</li>\n\t<li>|nums[i] - nums[j]| == k</li>\n</ul>\nNotice that |val| denotes the absolute value of val.<strong class="example">Example 1:\nInput: nums = [3,1,4,1,5], k = 2\nOutput: 2\nExplanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).\nAlthough we have two 1s in the input, we should only return the number of unique pairs.\n<strong class="example">Example 2:\nInput: nums = [1,2,3,4,5], k = 1\nOutput: 4\nExplanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).\n<strong class="example">Example 3:\nInput: nums = [1,3,1,5,4], k = 0\nOutput: 1\nExplanation: There is one 0-diff pair in the array, (1, 1).\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>4</sup></li>\n\t<li>-10<sup>7</sup> &lt;= nums[i] &lt;= 10<sup>7</sup></li>\n\t<li>0 &lt;= k &lt;= 10<sup>7</sup></li>\n</ul>\n\n"test_case": [\n  [3,1,4,1,5]\n2\n  [1,2,3,4,5]\n1\n  [1,3,1,5,4]\n0\n],\n"test_case_output": [\'2\', \'4\', \'1\'],\n"test_case_explanation": [\n  "There are two 2-diff pairs in the array, (1, 3) and (3, 5).\nAlthough we have two 1s in the input, we should only return the number of unique pairs.\n"\n\n  "There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).\n"\n\n  "There is one 0-diff pair in the array, (1, 1).\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nWe define the usage of capitals in a word to be right when one of the following cases holds:\n<ul>\n\t<li>All letters in this word are capitals, like USA.</li>\n\t<li>All letters in this word are not capitals, like leetcode.</li>\n\t<li>Only the first letter in this word is capital, like Google.</li>\n</ul>\nGiven a string word, return true if the usage of capitals in it is right.<strong class="example">Example 1:\nInput: word = "USA"\nOutput: true\n<strong class="example">Example 2:\nInput: word = "FlaG"\nOutput: false\nConstraints:\n<ul>\n\t<li>1 &lt;= word.length &lt;= 100</li>\n\t<li>word consists of lowercase and uppercase English letters.</li>\n</ul>\n\n"test_case": [\n  "USA"\n  "FlaG"\n],\n"test_case_output": [\'true\', \'false\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\nReturn the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.\nYou may assume that you have an infinite number of each kind of coin.\nThe answer is guaranteed to fit into a signed 32-bit integer.<strong class="example">Example 1:\nInput: amount = 5, coins = [1,2,5]\nOutput: 4\nExplanation: there are four ways to make up the amount:\n5=5\n5=2+2+1\n5=2+1+1+1\n5=1+1+1+1+1\n<strong class="example">Example 2:\nInput: amount = 3, coins = [2]\nOutput: 0\nExplanation: the amount of 3 cannot be made up just with coins of 2.\n<strong class="example">Example 3:\nInput: amount = 10, coins = [10]\nOutput: 1\nConstraints:\n<ul>\n\t<li>1 &lt;= coins.length &lt;= 300</li>\n\t<li>1 &lt;= coins[i] &lt;= 5000</li>\n\t<li>All the values of coins are unique.</li>\n\t<li>0 &lt;= amount &lt;= 5000</li>\n</ul>\n\n"test_case": [\n  5\n[1,2,5]\n  3\n[2]\n  10\n[10]\n],\n"test_case_output": [\'4\', \'0\', \'1\'],\n"test_case_explanation": [\n  "there are four ways to make up the amount:\n5=5\n5=2+2+1\n5=2+1+1+1\n5=1+1+1+1+1\n"\n\n  "the amount of 3 cannot be made up just with coins of 2.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a string s, find the longest palindromic subsequence&#39;s length in s.\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.<strong class="example">Example 1:\nInput: s = bbbab\nOutput: 4\nExplanation: One possible longest palindromic subsequence is bbbb.\n<strong class="example">Example 2:\nInput: s = cbbd\nOutput: 2\nExplanation: One possible longest palindromic subsequence is bb.\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 1000</li>\n\t<li>s consists only of lowercase English letters.</li>\n</ul>\n\n"test_case": [\n  "bbbab"\n  "cbbd"\n],\n"test_case_output": [\'4\', \'2\'],\n"test_case_explanation": [\n  "One possible longest palindromic subsequence is bbbb.\n"\n\n  "One possible longest palindromic subsequence is bb.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an integer array nums and an integer target.\nYou want to build an expression out of nums by adding one of the symbols &#39;+&#39; and &#39;-&#39; before each integer in nums and then concatenate all the integers.\n<ul>\n\t<li>For example, if nums = [2, 1], you can add a &#39;+&#39; before 2 and a &#39;-&#39; before 1 and concatenate them to build the expression +2-1.</li>\n</ul>\nReturn the number of different expressions that you can build, which evaluates to target.<strong class="example">Example 1:\nInput: nums = [1,1,1,1,1], target = 3\nOutput: 5\nExplanation: There are 5 ways to assign symbols to make the sum of nums be target 3.\n-1 + 1 + 1 + 1 + 1 = 3\n+1 - 1 + 1 + 1 + 1 = 3\n+1 + 1 - 1 + 1 + 1 = 3\n+1 + 1 + 1 - 1 + 1 = 3\n+1 + 1 + 1 + 1 - 1 = 3\n<strong class="example">Example 2:\nInput: nums = [1], target = 1\nOutput: 1\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 20</li>\n\t<li>0 &lt;= nums[i] &lt;= 1000</li>\n\t<li>0 &lt;= sum(nums[i]) &lt;= 1000</li>\n\t<li>-1000 &lt;= target &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  [1,1,1,1,1]\n3\n  [1]\n1\n],\n"test_case_output": [\'5\', \'1\'],\n"test_case_explanation": [\n  "There are 5 ways to assign symbols to make the sum of nums be target 3.\n-1 + 1 + 1 + 1 + 1 = 3\n+1 - 1 + 1 + 1 + 1 = 3\n+1 + 1 - 1 + 1 + 1 = 3\n+1 + 1 + 1 - 1 + 1 = 3\n+1 + 1 + 1 + 1 - 1 = 3\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThe <a href="https://en.wikipedia.org/wiki/Hamming_distance" target="_blank">Hamming distance</a> between two integers is the number of positions at which the corresponding bits are different.\nGiven an integer array nums, return the sum of Hamming distances between all the pairs of the integers in nums.<strong class="example">Example 1:\nInput: nums = [4,14,2]\nOutput: 6\nExplanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\nshowing the four bits relevant in this case).\nThe answer will be:\nHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.\n<strong class="example">Example 2:\nInput: nums = [4,14,4]\nOutput: 4\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>4</sup></li>\n\t<li>0 &lt;= nums[i] &lt;= 10<sup>9</sup></li>\n\t<li>The answer for the given input will fit in a 32-bit integer.</li>\n</ul>\n\n"test_case": [\n  [4,14,2]\n  [4,14,4]\n],\n"test_case_output": [\'6\', \'4\'],\n"test_case_explanation": [\n  "In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\nshowing the four bits relevant in this case).\nThe answer will be:\nHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given row x col grid representing a map where grid[i][j] = 1 representsland and grid[i][j] = 0 represents water.\nGrid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).\nThe island doesn&#39;t have lakes, meaning the water inside isn&#39;t connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don&#39;t exceed 100. Determine the perimeter of the island.<strong class="example">Example 1:\n<img src="https://assets.leetcode.com/uploads/2018/10/12/island.png" style="width: 221px; height: 213px;" />\nInput: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]\nOutput: 16\nExplanation: The perimeter is the 16 yellow stripes in the image above.\n<strong class="example">Example 2:\nInput: grid = [[1]]\nOutput: 4\n<strong class="example">Example 3:\nInput: grid = [[1,0]]\nOutput: 4\nConstraints:\n<ul>\n\t<li>row == grid.length</li>\n\t<li>col == grid[i].length</li>\n\t<li>1 &lt;= row, col &lt;= 100</li>\n\t<li>grid[i][j] is 0 or 1.</li>\n\t<li>There is exactly one island in grid.</li>\n</ul>\n\n"test_case": [\n  [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]\n  [[1]]\n  [[1,0]]\n],\n"test_case_output": [\'16\', \'4\', \'4\'],\n"test_case_explanation": [\n  "The perimeter is the 16 yellow stripes in the image above.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.\nBasically, the deletion can be divided into two stages:\n<ol>\n\t<li>Search for a node to remove.</li>\n\t<li>If the node is found, delete the node.</li>\n</ol><strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/09/04/del_node_1.jpg" style="width: 800px; height: 214px;" />\nInput: root = [5,3,6,2,4,null,7], key = 3\nOutput: [5,4,6,2,null,null,7]\nExplanation: Given key to delete is 3. So we find the node with value 3 and delete it.\nOne valid answer is [5,4,6,2,null,null,7], shown in the above BST.\nPlease notice that another valid answer is [5,2,6,null,4,null,7] and it&#39;s also accepted.\n<img alt="" src="https://assets.leetcode.com/uploads/2020/09/04/del_node_supp.jpg" style="width: 350px; height: 255px;" />\n<strong class="example">Example 2:\nInput: root = [5,3,6,2,4,null,7], key = 0\nOutput: [5,3,6,2,4,null,7]\nExplanation: The tree does not contain a node with value = 0.\n<strong class="example">Example 3:\nInput: root = [], key = 0\nOutput: []\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [0, 10<sup>4</sup>].</li>\n\t<li>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></li>\n\t<li>Each node has a unique value.</li>\n\t<li>root is a valid binary search tree.</li>\n\t<li>-10<sup>5</sup> &lt;= key &lt;= 10<sup>5</sup></li>\n</ul>Follow up: Could you solve it with time complexity O(height of tree)?\n\n"test_case": [\n  [5,3,6,2,4,null,7]\n3\n  [5,3,6,2,4,null,7]\n0\n  []\n0\n],\n"test_case_output": [\'[5,4,6,2,null,null,7]\', \'[5,3,6,2,4,null,7]\', \'[]\'],\n"test_case_explanation": [\n  "Given key to delete is 3. So we find the node with value 3 and delete it.\nOne valid answer is [5,4,6,2,null,null,7], shown in the above BST.\nPlease notice that another valid answer is [5,2,6,null,4,null,7] and it&#39;s also accepted.\n"\n\n  "The tree does not contain a node with value = 0.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nSerialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\nDesign an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.\nThe encoded string should be as compact as possible.<strong class="example">Example 1:\nInput: root = [2,1,3]\nOutput: [2,1,3]\n<strong class="example">Example 2:\nInput: root = []\nOutput: []\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [0, 10<sup>4</sup>].</li>\n\t<li>0 &lt;= Node.val &lt;= 10<sup>4</sup></li>\n\t<li>The input tree is guaranteed to be a binary search tree.</li>\n</ul>\n\n"test_case": [\n  [2,1,3]\n  []\n],\n"test_case_output": [\'[2,1,3]\', \'[]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven two strings s and p, return an array of all the start indices of p&#39;s anagrams in s. You may return the answer in any order.\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.<strong class="example">Example 1:\nInput: s = cbaebabacd, p = abc\nOutput: [0,6]\nExplanation:\nThe substring with start index = 0 is cba, which is an anagram of abc.\nThe substring with start index = 6 is bac, which is an anagram of abc.\n<strong class="example">Example 2:\nInput: s = abab, p = ab\nOutput: [0,1,2]\nExplanation:\nThe substring with start index = 0 is ab, which is an anagram of ab.\nThe substring with start index = 1 is ba, which is an anagram of ab.\nThe substring with start index = 2 is ab, which is an anagram of ab.\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length, p.length &lt;= 3 * 10<sup>4</sup></li>\n\t<li>s and p consist of lowercase English letters.</li>\n</ul>\n\n"test_case": [\n  "cbaebabacd"\n"abc"\n  "abab"\n"ab"\n],\n"test_case_output": [\'[0,6]\', \'[0,1,2]\'],\n"test_case_explanation": [\n  "The substring with start index = 0 is cba, which is an anagram of abc.\nThe substring with start index = 6 is bac, which is an anagram of abc.\n"\n\n  "The substring with start index = 0 is ab, which is an anagram of ab.\nThe substring with start index = 1 is ba, which is an anagram of ab.\nThe substring with start index = 2 is ab, which is an anagram of ab.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the root of a binary tree and an integer targetSum, return the number of paths where the sum of the valuesalong the path equalstargetSum.\nThe path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/04/09/pathsum3-1-tree.jpg" style="width: 450px; height: 386px;" />\nInput: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8\nOutput: 3\nExplanation: The paths that sum to 8 are shown.\n<strong class="example">Example 2:\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\nOutput: 3\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [0, 1000].</li>\n\t<li>-10<sup>9</sup> &lt;= Node.val &lt;= 10<sup>9</sup></li>\n\t<li>-1000 &lt;= targetSum &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  [10,5,-3,3,2,null,11,3,-2,null,1]\n8\n  [5,4,8,11,null,13,4,7,2,null,null,5,1]\n22\n],\n"test_case_output": [\'3\', \'3\'],\n"test_case_explanation": [\n  "The paths that sum to 8 are shown.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.<strong class="example">Example 1:\nInput: nums = [1,5,11,5]\nOutput: true\nExplanation: The array can be partitioned as [1, 5, 5] and [11].\n<strong class="example">Example 2:\nInput: nums = [1,2,3,5]\nOutput: false\nExplanation: The array cannot be partitioned into equal sum subsets.\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 200</li>\n\t<li>1 &lt;= nums[i] &lt;= 100</li>\n</ul>\n\n"test_case": [\n  [1,5,11,5]\n  [1,2,3,5]\n],\n"test_case_output": [\'true\', \'false\'],\n"test_case_explanation": [\n  "The array can be partitioned as [1, 5, 5] and [11].\n"\n\n  "The array cannot be partitioned into equal sum subsets.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.\nYou must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.<strong class="example">Example 1:\nInput: num1 = 11, num2 = 123\nOutput: 134\n<strong class="example">Example 2:\nInput: num1 = 456, num2 = 77\nOutput: 533\n<strong class="example">Example 3:\nInput: num1 = 0, num2 = 0\nOutput: 0\nConstraints:\n<ul>\n\t<li>1 &lt;= num1.length, num2.length &lt;= 10<sup>4</sup></li>\n\t<li>num1 and num2 consist of only digits.</li>\n\t<li>num1 and num2 don&#39;t have any leading zeros except for the zero itself.</li>\n</ul>\n\n"test_case": [\n  "11"\n"123"\n  "456"\n"77"\n  "0"\n"0"\n],\n"test_case_output": [\'134\', \'533\', \'0\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.<strong class="example">Example 1:\nInput: nums = [3,2,1]\nOutput: 1\nExplanation:\nThe first distinct maximum is 3.\nThe second distinct maximum is 2.\nThe third distinct maximum is 1.\n<strong class="example">Example 2:\nInput: nums = [1,2]\nOutput: 2\nExplanation:\nThe first distinct maximum is 2.\nThe second distinct maximum is 1.\nThe third distinct maximum does not exist, so the maximum (2) is returned instead.\n<strong class="example">Example 3:\nInput: nums = [2,2,3,1]\nOutput: 1\nExplanation:\nThe first distinct maximum is 3.\nThe second distinct maximum is 2 (both 2&#39;s are counted together since they have the same value).\nThe third distinct maximum is 1.\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>4</sup></li>\n\t<li>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</li>\n</ul>Follow up: Can you find an O(n) solution?\n"test_case": [\n  [3,2,1]\n  [1,2]\n  [2,2,3,1]\n],\n"test_case_output": [\'1\', \'2\', \'1\'],\n"test_case_explanation": [\n  "The first distinct maximum is 3.\nThe second distinct maximum is 2.\nThe third distinct maximum is 1.\n"\n\n  "The first distinct maximum is 2.\nThe second distinct maximum is 1.\nThe third distinct maximum does not exist, so the maximum (2) is returned instead.\n"\n\n  "The first distinct maximum is 3.\nThe second distinct maximum is 2 (both 2&#39;s are counted together since they have the same value).\nThe third distinct maximum is 1.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nAn integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\n<ul>\n\t<li>For example, [1,3,5,7,9], [7,7,7,7], and [3,-1,-5,-9] are arithmetic sequences.</li>\n</ul>\nGiven an integer array nums, return the number of arithmetic subarrays of nums.\nA subarray is a contiguous subsequence of the array.<strong class="example">Example 1:\nInput: nums = [1,2,3,4]\nOutput: 3\nExplanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself.\n<strong class="example">Example 2:\nInput: nums = [1]\nOutput: 0\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 5000</li>\n\t<li>-1000 &lt;= nums[i] &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  [1,2,3,4]\n  [1]\n],\n"test_case_output": [\'3\', \'0\'],\n"test_case_explanation": [\n  "We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer n, return a string array answer (1-indexed) where:\n<ul>\n\t<li>answer[i] == FizzBuzz if i is divisible by 3 and 5.</li>\n\t<li>answer[i] == Fizz if i is divisible by 3.</li>\n\t<li>answer[i] == Buzz if i is divisible by 5.</li>\n\t<li>answer[i] == i (as a string) if none of the above conditions are true.</li>\n</ul><strong class="example">Example 1:\nInput: n = 3\nOutput: ["1","2","Fizz"]\n<strong class="example">Example 2:\nInput: n = 5\nOutput: ["1","2","Fizz","4","Buzz"]\n<strong class="example">Example 3:\nInput: n = 15\nOutput: ["1","2","Fizz","4","Buzz","Fizz","7","8","Fizz","Buzz","11","Fizz","13","14","FizzBuzz"]\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  3\n  5\n  15\n],\n"test_case_output": [\'["1","2","Fizz"]\', \'["1","2","Fizz","4","Buzz"]\', \'["1","2","Fizz","4","Buzz","Fizz","7","8","Fizz","Buzz","11","Fizz","13","14","FizzBuzz"]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.\nReturn the minimized largest sum of the split.\nA subarray is a contiguous part of the array.<strong class="example">Example 1:\nInput: nums = [7,2,5,10,8], k = 2\nOutput: 18\nExplanation: There are four ways to split nums into two subarrays.\nThe best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.\n<strong class="example">Example 2:\nInput: nums = [1,2,3,4,5], k = 2\nOutput: 9\nExplanation: There are four ways to split nums into two subarrays.\nThe best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 1000</li>\n\t<li>0 &lt;= nums[i] &lt;= 10<sup>6</sup></li>\n\t<li>1 &lt;= k &lt;= min(50, nums.length)</li>\n</ul>\n\n"test_case": [\n  [7,2,5,10,8]\n2\n  [1,2,3,4,5]\n2\n],\n"test_case_output": [\'18\', \'9\'],\n"test_case_explanation": [\n  "There are four ways to split nums into two subarrays.\nThe best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.\n"\n\n  "There are four ways to split nums into two subarrays.\nThe best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a string s which consists of lowercase or uppercase letters, return the length of the longest palindromethat can be built with those letters.\nLetters are case sensitive, for example,Aa is not considered a palindrome here.<strong class="example">Example 1:\nInput: s = abccccdd\nOutput: 7\nExplanation: One longest palindrome that can be built is dccaccd, whose length is 7.\n<strong class="example">Example 2:\nInput: s = a\nOutput: 1\nExplanation: The longest palindrome that can be built is a, whose length is 1.\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 2000</li>\n\t<li>s consists of lowercase and/or uppercase Englishletters only.</li>\n</ul>\n\n"test_case": [\n  "abccccdd"\n  "a"\n],\n"test_case_output": [\'7\', \'1\'],\n"test_case_explanation": [\n  "One longest palindrome that can be built is dccaccd, whose length is 7.\n"\n\n  "The longest palindrome that can be built is a, whose length is 1.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). Each people[i] = [h<sub>i</sub>, k<sub>i</sub>] represents the i<sup>th</sup> person of height h<sub>i</sub> with exactly k<sub>i</sub> other people in front who have a height greater than or equal to h<sub>i</sub>.\nReconstruct and return the queue that is represented by the input array people. The returned queue should be formatted as an array queue, where queue[j] = [h<sub>j</sub>, k<sub>j</sub>] is the attributes of the j<sup>th</sup> person in the queue (queue[0] is the person at the front of the queue).<strong class="example">Example 1:\nInput: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\nOutput: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\nExplanation:\nPerson 0 has height 5 with no other people taller or the same height in front.\nPerson 1 has height 7 with no other people taller or the same height in front.\nPerson 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.\nPerson 3 has height 6 with one person taller or the same height in front, which is person 1.\nPerson 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.\nPerson 5 has height 7 with one person taller or the same height in front, which is person 1.\nHence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.\n<strong class="example">Example 2:\nInput: people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]\nOutput: [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]\nConstraints:\n<ul>\n\t<li>1 &lt;= people.length &lt;= 2000</li>\n\t<li>0 &lt;= h<sub>i</sub> &lt;= 10<sup>6</sup></li>\n\t<li>0 &lt;= k<sub>i</sub> &lt; people.length</li>\n\t<li>It is guaranteed that the queue can be reconstructed.</li>\n</ul>\n\n"test_case": [\n  [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\n  [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]\n],\n"test_case_output": [\'[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\', \'[[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]\'],\n"test_case_explanation": [\n  "Person 0 has height 5 with no other people taller or the same height in front.\nPerson 1 has height 7 with no other people taller or the same height in front.\nPerson 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.\nPerson 3 has height 6 with one person taller or the same height in front, which is person 1.\nPerson 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.\nPerson 5 has height 7 with one person taller or the same height in front, which is person 1.\nHence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer num, return a string representing its hexadecimal representation. For negative integers, <a href="https://en.wikipedia.org/wiki/Two%27s_complement" target="_blank">two&rsquo;s complement</a> method is used.\nAll the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.\nNote:You are not allowed to use any built-in library method to directly solve this problem.<strong class="example">Example 1:\nInput: num = 26\nOutput: "1a"\n<strong class="example">Example 2:\nInput: num = -1\nOutput: "ffffffff"\nConstraints:\n<ul>\n\t<li>-2<sup>31</sup> &lt;= num &lt;= 2<sup>31</sup> - 1</li>\n</ul>\n\n"test_case": [\n  26\n  -1\n],\n"test_case_output": [\'"1a"\', \'"ffffffff"\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the root of a binary tree, return the sum of all left leaves.\nA leaf is a node with no children. A left leaf is a leaf that is the left child of another node.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/04/08/leftsum-tree.jpg" style="width: 277px; height: 302px;" />\nInput: root = [3,9,20,null,null,15,7]\nOutput: 24\nExplanation: There are two left leaves in the binary tree, with values 9 and 15 respectively.\n<strong class="example">Example 2:\nInput: root = [1]\nOutput: 0\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [1, 1000].</li>\n\t<li>-1000 &lt;= Node.val &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  [3,9,20,null,null,15,7]\n  [1]\n],\n"test_case_output": [\'24\', \'0\'],\n"test_case_explanation": [\n  "There are two left leaves in the binary tree, with values 9 and 15 respectively.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nA frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.\nGiven a list of stonespositions (in units) in sorted ascending order, determine if the frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be 1 unit.\nIf the frog&#39;s last jump was k units, its next jump must be either k - 1, k, or k + 1 units. The frog can only jump in the forward direction.<strong class="example">Example 1:\nInput: stones = [0,1,3,5,6,8,12,17]\nOutput: true\nExplanation: The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone.\n<strong class="example">Example 2:\nInput: stones = [0,1,2,3,4,8,9,11]\nOutput: false\nExplanation: There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large.\nConstraints:\n<ul>\n\t<li>2 &lt;= stones.length &lt;= 2000</li>\n\t<li>0 &lt;= stones[i] &lt;= 2<sup>31</sup> - 1</li>\n\t<li>stones[0] == 0</li>\n\t<li>stonesis sorted in a strictly increasing order.</li>\n</ul>\n\n"test_case": [\n  [0,1,3,5,6,8,12,17]\n  [0,1,2,3,4,8,9,11]\n],\n"test_case_output": [\'true\', \'false\'],\n"test_case_explanation": [\n  "The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone.\n"\n\n  "There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.<strong class="example">Example 1:\nInput: num = 1432219, k = 3\nOutput: 1219\nExplanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.\n<strong class="example">Example 2:\nInput: num = 10200, k = 1\nOutput: 200\nExplanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.\n<strong class="example">Example 3:\nInput: num = 10, k = 2\nOutput: 0\nExplanation: Remove all the digits from the number and it is left with nothing which is 0.\nConstraints:\n<ul>\n\t<li>1 &lt;= k &lt;= num.length &lt;= 10<sup>5</sup></li>\n\t<li>num consists of only digits.</li>\n\t<li>num does not have any leading zeros except for the zero itself.</li>\n</ul>\n\n"test_case": [\n  "1432219"\n3\n  "10200"\n1\n  "10"\n2\n],\n"test_case_output": [\'1219\', \'200\', \'0\'],\n"test_case_explanation": [\n  "Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.\n"\n\n  "Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.\n"\n\n  "Remove all the digits from the number and it is left with nothing which is 0.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nA binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to representthe minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right.\n<ul>\n\t<li>For example, the below binary watch reads 4:51.</li>\n</ul>\n<img alt="" src="https://assets.leetcode.com/uploads/2021/04/08/binarywatch.jpg" style="width: 500px; height: 500px;" />\nGiven an integer turnedOn which represents the number of LEDs that are currently on (ignoring the PM), return all possible times the watch could represent. You may return the answer in any order.\nThe hour must not contain a leading zero.\n<ul>\n\t<li>For example, 01:00 is not valid. It should be 1:00.</li>\n</ul>\nThe minute mustconsist of two digits and may contain a leading zero.\n<ul>\n\t<li>For example, 10:2 is not valid. It should be 10:02.</li>\n</ul><strong class="example">Example 1:\nInput: turnedOn = 1\nOutput: ["0:01","0:02","0:04","0:08","0:16","0:32","1:00","2:00","4:00","8:00"]\n<strong class="example">Example 2:\nInput: turnedOn = 9\nOutput: []\nConstraints:\n<ul>\n\t<li>0 &lt;= turnedOn &lt;= 10</li>\n</ul>\n\n"test_case": [\n  1\n  9\n],\n"test_case_output": [\'["0:01","0:02","0:04","0:08","0:16","0:32","1:00","2:00","4:00","8:00"]\', \'[]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer n, return the n<sup>th</sup> digit of the infinite integer sequence [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...].<strong class="example">Example 1:\nInput: n = 3\nOutput: 3\n<strong class="example">Example 2:\nInput: n = 11\nOutput: 0\nExplanation: The 11<sup>th</sup> digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 2<sup>31</sup> - 1</li>\n</ul>\n\n"test_case": [\n  3\n  11\n],\n"test_case_output": [\'3\', \'0\'],\n"test_case_explanation": [\n  "The 11"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [A<sub>i</sub>, B<sub>i</sub>] and values[i] represent the equation A<sub>i</sub> / B<sub>i</sub> = values[i]. Each A<sub>i</sub> or B<sub>i</sub> is a string that represents a single variable.\nYou are also given some queries, where queries[j] = [C<sub>j</sub>, D<sub>j</sub>] represents the j<sup>th</sup> query where you must find the answer for C<sub>j</sub> / D<sub>j</sub> = ?.\nReturn the answers to all queries. If a single answer cannot be determined, return -1.0.\nNote: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.\nNote:The variables that do not occur in the list of equations are undefined, so the answer cannot be determined for them.<strong class="example">Example 1:\nInput: equations = [[a,b],[b,c]], values = [2.0,3.0], queries = [[a,c],[b,a],[a,e],[a,a],[x,x]]\nOutput: [6.00000,0.50000,-1.00000,1.00000,-1.00000]\nExplanation: \nGiven: a / b = 2.0, b / c = 3.0\nqueries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? \nreturn: [6.0, 0.5, -1.0, 1.0, -1.0 ]\nnote: x is undefined =&gt; -1.0\n<strong class="example">Example 2:\nInput: equations = [[a,b],[b,c],[bc,cd]], values = [1.5,2.5,5.0], queries = [[a,c],[c,b],[bc,cd],[cd,bc]]\nOutput: [3.75000,0.40000,5.00000,0.20000]\n<strong class="example">Example 3:\nInput: equations = [[a,b]], values = [0.5], queries = [[a,b],[b,a],[a,c],[x,y]]\nOutput: [0.50000,2.00000,-1.00000,-1.00000]\nConstraints:\n<ul>\n\t<li>1 &lt;= equations.length &lt;= 20</li>\n\t<li>equations[i].length == 2</li>\n\t<li>1 &lt;= A<sub>i</sub>.length, B<sub>i</sub>.length &lt;= 5</li>\n\t<li>values.length == equations.length</li>\n\t<li>0.0 &lt; values[i] &lt;= 20.0</li>\n\t<li>1 &lt;= queries.length &lt;= 20</li>\n\t<li>queries[i].length == 2</li>\n\t<li>1 &lt;= C<sub>j</sub>.length, D<sub>j</sub>.length &lt;= 5</li>\n\t<li>A<sub>i</sub>, B<sub>i</sub>, C<sub>j</sub>, D<sub>j</sub> consist of lower case English letters and digits.</li>\n</ul>\n\n"test_case": [\n  [["a","b"],["b","c"]]\n[2.0,3.0]\n[["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]\n  [["a","b"],["b","c"],["bc","cd"]]\n[1.5,2.5,5.0]\n[["a","c"],["c","b"],["bc","cd"],["cd","bc"]]\n  [["a","b"]]\n[0.5]\n[["a","b"],["b","a"],["a","c"],["x","y"]]\n],\n"test_case_output": [\'[6.00000,0.50000,-1.00000,1.00000,-1.00000]\', \'[3.75000,0.40000,5.00000,0.20000]\', \'[0.50000,2.00000,-1.00000,-1.00000]\'],\n"test_case_explanation": [\n  "Given: a / b = 2.0, b / c = 3.0\nqueries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? \nreturn: [6.0, 0.5, -1.0, 1.0, -1.0 ]\nnote: x is undefined =&gt; -1.0\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a positive integer n,you can apply one of the followingoperations:\n<ol>\n\t<li>If n is even, replace n with n / 2.</li>\n\t<li>If n is odd, replace n with either n + 1 or n - 1.</li>\n</ol>\nReturn the minimum number of operations needed for n to become 1.<strong class="example">Example 1:\nInput: n = 8\nOutput: 3\nExplanation: 8 -&gt; 4 -&gt; 2 -&gt; 1\n<strong class="example">Example 2:\nInput: n = 7\nOutput: 4\nExplanation: 7 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1\nor 7 -&gt; 6 -&gt; 3 -&gt; 2 -&gt; 1\n<strong class="example">Example 3:\nInput: n = 4\nOutput: 2\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 2<sup>31</sup> - 1</li>\n</ul>\n\n"test_case": [\n  8\n  7\n  4\n],\n"test_case_output": [\'3\', \'4\', \'2\'],\n"test_case_explanation": [\n  "8 -&gt; 4 -&gt; 2 -&gt; 1\n"\n\n  "7 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1\nor 7 -&gt; 6 -&gt; 3 -&gt; 2 -&gt; 1\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an integer array nums of length n.\nAssume arr<sub>k</sub> to be an array obtained by rotating nums by k positions clock-wise. We define the rotation function F on nums as follow:\n<ul>\n\t<li>F(k) = 0 * arr<sub>k</sub>[0] + 1 * arr<sub>k</sub>[1] + ... + (n - 1) * arr<sub>k</sub>[n - 1].</li>\n</ul>\nReturn the maximum value of F(0), F(1), ..., F(n-1).\nThe test cases are generated so that the answer fits in a 32-bit integer.<strong class="example">Example 1:\nInput: nums = [4,3,2,6]\nOutput: 26\nExplanation:\nF(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25\nF(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16\nF(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23\nF(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26\nSo the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.\n<strong class="example">Example 2:\nInput: nums = [100]\nOutput: 0\nConstraints:\n<ul>\n\t<li>n == nums.length</li>\n\t<li>1 &lt;= n &lt;= 10<sup>5</sup></li>\n\t<li>-100 &lt;= nums[i] &lt;= 100</li>\n</ul>\n\n"test_case": [\n  [4,3,2,6]\n  [100]\n],\n"test_case_output": [\'26\', \'0\'],\n"test_case_explanation": [\n  "F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25\nF(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16\nF(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23\nF(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26\nSo the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.\n<p data-pm-slice="1 1 []">if no such substring exists, return 0.<strong class="example">Example 1:\nInput: s = aaabb, k = 3\nOutput: 3\nExplanation: The longest substring is aaa, as &#39;a&#39; is repeated 3 times.\n<strong class="example">Example 2:\nInput: s = ababbc, k = 2\nOutput: 5\nExplanation: The longest substring is ababb, as &#39;a&#39; is repeated 2 times and &#39;b&#39; is repeated 3 times.\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 10<sup>4</sup></li>\n\t<li>s consists of only lowercase English letters.</li>\n\t<li>1 &lt;= k &lt;= 10<sup>5</sup></li>\n</ul>\n\n"test_case": [\n  "aaabb"\n3\n  "ababbc"\n2\n],\n"test_case_output": [\'3\', \'5\'],\n"test_case_explanation": [\n  "The longest substring is aaa, as &#39;a&#39; is repeated 3 times.\n"\n\n  "The longest substring is ababb, as &#39;a&#39; is repeated 2 times and &#39;b&#39; is repeated 3 times.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an encoded string, return its decoded string.\nThe encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.\nYou may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4].\nThe test cases are generated so that the length of the output will never exceed 10<sup>5</sup>.<strong class="example">Example 1:\nInput: s = 3[a]2[bc]\nOutput: aaabcbc\n<strong class="example">Example 2:\nInput: s = 3[a2[c]]\nOutput: accaccacc\n<strong class="example">Example 3:\nInput: s = 2[abc]3[cd]ef\nOutput: abcabccdcdcdef\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 30</li>\n\t<li>s consists of lowercase English letters, digits, and square brackets &#39;[]&#39;.</li>\n\t<li>s is guaranteed to be a valid input.</li>\n\t<li>All the integers in s are in the range [1, 300].</li>\n</ul>\n\n"test_case": [\n  "3[a]2[bc]"\n  "3[a2[c]]"\n  "2[abc]3[cd]ef"\n],\n"test_case_output": [\'aaabcbc\', \'accaccacc\', \'abcabccdcdcdef\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array data representing the data, return whether it is a valid UTF-8 encoding (i.e. it translates to a sequence of valid UTF-8 encoded characters).\nA character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:\n<ol>\n\t<li>For a 1-byte character, the first bit is a 0, followed by its Unicode code.</li>\n\t<li>For an n-bytes character, the first n bits are all one&#39;s, the n + 1 bit is 0, followed by n - 1 bytes with the most significant 2 bits being 10.</li>\n</ol>\nThis is how the UTF-8 encoding would work:\n     Number of Bytes   |        UTF-8 Octet Sequence\n                       |              (binary)\n   --------------------+-----------------------------------------\n            1          |   0xxxxxxx\n            2          |   110xxxxx 10xxxxxx\n            3          |   1110xxxx 10xxxxxx 10xxxxxx\n            4          |   11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\nx denotes a bit in the binary form of a byte that may be either 0 or 1.\nNote: The input is an array of integers. Only the least significant 8 bits of each integer is used to store the data. This means each integer represents only 1 byte of data.<strong class="example">Example 1:\nInput: data = [197,130,1]\nOutput: true\nExplanation: data represents the octet sequence: 11000101 10000010 00000001.\nIt is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.\n<strong class="example">Example 2:\nInput: data = [235,140,4]\nOutput: false\nExplanation: data represented the octet sequence: 11101011 10001100 00000100.\nThe first 3 bits are all one&#39;s and the 4th bit is 0 means it is a 3-bytes character.\nThe next byte is a continuation byte which starts with 10 and that&#39;s correct.\nBut the second continuation byte does not start with 10, so it is invalid.\nConstraints:\n<ul>\n\t<li>1 &lt;= data.length &lt;= 2 * 10<sup>4</sup></li>\n\t<li>0 &lt;= data[i] &lt;= 255</li>\n</ul>\n\n"test_case": [\n  [197,130,1]\n  [235,140,4]\n],\n"test_case_output": [\'true\', \'false\'],\n"test_case_explanation": [\n  "data represents the octet sequence: 11000101 10000010 00000001.\nIt is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.\n"\n\n  "data represented the octet sequence: 11101011 10001100 00000100.\nThe first 3 bits are all one&#39;s and the 4th bit is 0 means it is a 3-bytes character.\nThe next byte is a continuation byte which starts with 10 and that&#39;s correct.\nBut the second continuation byte does not start with 10, so it is invalid.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an array rectangles where rectangles[i] = [x<sub>i</sub>, y<sub>i</sub>, a<sub>i</sub>, b<sub>i</sub>] represents an axis-aligned rectangle. The bottom-left point of the rectangle is (x<sub>i</sub>, y<sub>i</sub>) and the top-right point of it is (a<sub>i</sub>, b<sub>i</sub>).\nReturn true if all the rectangles together form an exact cover of a rectangular region.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/27/perectrec1-plane.jpg" style="width: 300px; height: 294px;" />\nInput: rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]\nOutput: true\nExplanation: All 5 rectangles together form an exact cover of a rectangular region.\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/27/perfectrec2-plane.jpg" style="width: 300px; height: 294px;" />\nInput: rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]\nOutput: false\nExplanation: Because there is a gap between the two rectangular regions.\n<strong class="example">Example 3:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/27/perfecrrec4-plane.jpg" style="width: 300px; height: 294px;" />\nInput: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]\nOutput: false\nExplanation: Because two of the rectangles overlap with each other.\nConstraints:\n<ul>\n\t<li>1 &lt;= rectangles.length &lt;= 2 * 10<sup>4</sup></li>\n\t<li>rectangles[i].length == 4</li>\n\t<li>-10<sup>5</sup> &lt;= x<sub>i</sub>, y<sub>i</sub>, a<sub>i</sub>, b<sub>i</sub> &lt;= 10<sup>5</sup></li>\n</ul>\n\n"test_case": [\n  [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]\n  [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]\n  [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]\n],\n"test_case_output": [\'true\', \'false\', \'false\'],\n"test_case_explanation": [\n  "All 5 rectangles together form an exact cover of a rectangular region.\n"\n\n  "Because there is a gap between the two rectangular regions.\n"\n\n  "Because two of the rectangles overlap with each other.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou have a list arr of all integers in the range [1, n] sorted in a strictly increasing order. Apply the following algorithm on arr:\n<ul>\n\t<li>Starting from left to right, remove the first number and every other number afterward until you reach the end of the list.</li>\n\t<li>Repeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers.</li>\n\t<li>Keep repeating the steps again, alternating left to right and right to left, until a single number remains.</li>\n</ul>\nGiven the integer n, return the last number that remains in arr.<strong class="example">Example 1:\nInput: n = 9\nOutput: 6\nExplanation:\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\narr = [2, 4, 6, 8]\narr = [2, 6]\narr = [6]\n<strong class="example">Example 2:\nInput: n = 1\nOutput: 1\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 10<sup>9</sup></li>\n</ul>\n\n"test_case": [\n  9\n  1\n],\n"test_case_output": [\'6\', \'1\'],\n"test_case_explanation": [\n  "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\narr = [2, 4, 6, 8]\narr = [2, 6]\narr = [6]\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given two strings s and t.\nString t is generated by random shuffling string s and then add one more letter at a random position.\nReturn the letter that was added to t.<strong class="example">Example 1:\nInput: s = abcd, t = abcde\nOutput: e\nExplanation: &#39;e&#39; is the letter that was added.\n<strong class="example">Example 2:\nInput: s = , t = y\nOutput: y\nConstraints:\n<ul>\n\t<li>0 &lt;= s.length &lt;= 1000</li>\n\t<li>t.length == s.length + 1</li>\n\t<li>s and t consist of lowercase English letters.</li>\n</ul>\n\n"test_case": [\n  "abcd"\n"abcde"\n  ""\n"y"\n],\n"test_case_output": [\'e\', \'y\'],\n"test_case_explanation": [\n  "&#39;e&#39; is the letter that was added.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.<strong class="example">Example 1:\nInput: s = "leetcode"\nOutput: 0\n<strong class="example">Example 2:\nInput: s = "loveleetcode"\nOutput: 2\n<strong class="example">Example 3:\nInput: s = "aabb"\nOutput: -1\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 10<sup>5</sup></li>\n\t<li>s consists of only lowercase English letters.</li>\n</ul>\n\n"test_case": [\n  "leetcode"\n  "loveleetcode"\n  "aabb"\n],\n"test_case_output": [\'0\', \'2\', \'-1\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer n, return all the numbers in the range [1, n] sorted in lexicographical order.\nYou must write an algorithm that runs inO(n)time and uses O(1) extra space.<strong class="example">Example 1:\nInput: n = 13\nOutput: [1,10,11,12,13,2,3,4,5,6,7,8,9]\n<strong class="example">Example 2:\nInput: n = 2\nOutput: [1,2]\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 5 * 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  13\n  2\n],\n"test_case_output": [\'[1,10,11,12,13,2,3,4,5,6,7,8,9]\', \'[1,2]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a string s represents the serialization of a nested list, implement a parser to deserialize it and return the deserialized NestedInteger.\nEach element is either an integer or a list whose elements may also be integers or other lists.<strong class="example">Example 1:\nInput: s = 324\nOutput: 324\nExplanation: You should return a NestedInteger object which contains a single integer 324.\n<strong class="example">Example 2:\nInput: s = [123,[456,[789]]]\nOutput: [123,[456,[789]]]\nExplanation: Return a NestedInteger object containing a nested list with 2 elements:\n1. An integer containing value 123.\n2. A nested list containing two elements:\n    i.  An integer containing value 456.\n    ii. A nested list with one element:\n         a. An integer containing value 789\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 5 * 10<sup>4</sup></li>\n\t<li>s consists of digits, square brackets [], negative sign &#39;-&#39;, and commas &#39;,&#39;.</li>\n\t<li>s is the serialization of valid NestedInteger.</li>\n\t<li>All the values in the input are in the range [-10<sup>6</sup>, 10<sup>6</sup>].</li>\n</ul>\n\n"test_case": [\n  "324"\n  "[123,[456,[789]]]"\n],\n"test_case_output": [\'324\', \'[123,[456,[789]]]\'],\n"test_case_explanation": [\n  "You should return a NestedInteger object which contains a single integer 324.\n"\n\n  "Return a NestedInteger object containing a nested list with 2 elements:\n1. An integer containing value 123.\n2. A nested list containing two elements:\n    i.  An integer containing value 456.\n    ii. A nested list with one element:\n         a. An integer containing value 789\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums, design an algorithm to randomly shuffle the array. All permutations of the array should be equally likely as a result of the shuffling.\nImplement the Solution class:\n<ul>\n\t<li>Solution(int[] nums) Initializes the object with the integer array nums.</li>\n\t<li>int[] reset() Resets the array to its original configuration and returns it.</li>\n\t<li>int[] shuffle() Returns a random shuffling of the array.</li>\n</ul><strong class="example">Example 1:\nInput\n[Solution, shuffle, reset, shuffle]\n[[[1, 2, 3]], [], [], []]\nOutput\n[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]\nExplanation\nSolution solution = new Solution([1, 2, 3]);\nsolution.shuffle();    // Shuffle the array [1,2,3] and return its result.\n                       // Any permutation of [1,2,3] must be equally likely to be returned.\n                       // Example: return [3, 1, 2]\nsolution.reset();      // Resets the array back to its original configuration [1,2,3]. Return [1, 2, 3]\nsolution.shuffle();    // Returns the random shuffling of array [1,2,3]. Example: return [1, 3, 2]\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 50</li>\n\t<li>-10<sup>6</sup> &lt;= nums[i] &lt;= 10<sup>6</sup></li>\n\t<li>All the elements of nums are unique.</li>\n\t<li>At most 10<sup>4</sup> calls in total will be made to reset and shuffle.</li>\n</ul>\n\n"test_case": [\n  ["Solution","shuffle","reset","shuffle"]\n[[[1,2,3]],[],[],[]]\n],\n"test_case_output": [],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise.\nEach letter in magazine can only be used once in ransomNote.<strong class="example">Example 1:\nInput: ransomNote = "a", magazine = "b"\nOutput: false\n<strong class="example">Example 2:\nInput: ransomNote = "aa", magazine = "ab"\nOutput: false\n<strong class="example">Example 3:\nInput: ransomNote = "aa", magazine = "aab"\nOutput: true\nConstraints:\n<ul>\n\t<li>1 &lt;= ransomNote.length, magazine.length &lt;= 10<sup>5</sup></li>\n\t<li>ransomNote and magazine consist of lowercase English letters.</li>\n</ul>\n\n"test_case": [\n  "a"\n"b"\n  "aa"\n"ab"\n  "aa"\n"aab"\n],\n"test_case_output": [\'false\', \'false\', \'true\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a singly linked list, return a random node&#39;s value from the linked list. Each node must have the same probability of being chosen.\nImplement the Solution class:\n<ul>\n\t<li>Solution(ListNode head) Initializes the object with the head of the singly-linked list head.</li>\n\t<li>int getRandom() Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be chosen.</li>\n</ul><strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/16/getrand-linked-list.jpg" style="width: 302px; height: 62px;" />\nInput\n[Solution, getRandom, getRandom, getRandom, getRandom, getRandom]\n[[[1, 2, 3]], [], [], [], [], []]\nOutput\n[null, 1, 3, 2, 2, 3]\nExplanation\nSolution solution = new Solution([1, 2, 3]);\nsolution.getRandom(); // return 1\nsolution.getRandom(); // return 3\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 3\n// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.\nConstraints:\n<ul>\n\t<li>The number of nodes in the linked list will be in the range [1, 10<sup>4</sup>].</li>\n\t<li>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></li>\n\t<li>At most 10<sup>4</sup> calls will be made to getRandom.</li>\n</ul>Follow up:\n<ul>\n\t<li>What if the linked list is extremely large and its length is unknown to you?</li>\n\t<li>Could you solve this efficiently without using extra space?</li>\n</ul>\n\n"test_case": [\n  ["Solution","getRandom","getRandom","getRandom","getRandom","getRandom"]\n[[[1,2,3]],[],[],[],[],[]]\n],\n"test_case_output": [],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nRandomizedCollection is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). It should support inserting and removing specific elements and also reporting a random element.\nImplement the RandomizedCollection class:\n<ul>\n\t<li>RandomizedCollection() Initializes the empty RandomizedCollection object.</li>\n\t<li>bool insert(int val) Inserts an item val into the multiset, even if the item is already present. Returns true if the item is not present, false otherwise.</li>\n\t<li>bool remove(int val) Removes an item val from the multiset if present. Returns true if the item is present, false otherwise. Note that if val has multiple occurrences in the multiset, we only remove one of them.</li>\n\t<li>int getRandom() Returns a random element from the current multiset of elements. The probability of each element being returned is linearly related to the number of the same values the multiset contains.</li>\n</ul>\nYou must implement the functions of the class such that each function works on average O(1) time complexity.\nNote: The test cases are generated such that getRandom will only be called if there is at least one item in the RandomizedCollection.<strong class="example">Example 1:\nInput\n[RandomizedCollection, insert, insert, insert, getRandom, remove, getRandom]\n[[], [1], [1], [2], [], [1], []]\nOutput\n[null, true, false, true, 2, true, 1]\nExplanation\nRandomizedCollection randomizedCollection = new RandomizedCollection();\nrandomizedCollection.insert(1);   // return true since the collection does not contain 1.\n                                  // Inserts 1 into the collection.\nrandomizedCollection.insert(1);   // return false since the collection contains 1.\n                                  // Inserts another 1 into the collection. Collection now contains [1,1].\nrandomizedCollection.insert(2);   // return true since the collection does not contain 2.\n                                  // Inserts 2 into the collection. Collection now contains [1,1,2].\nrandomizedCollection.getRandom(); // getRandom should:\n                                  // - return 1 with probability 2/3, or\n                                  // - return 2 with probability 1/3.\nrandomizedCollection.remove(1);   // return true since the collection contains 1.\n                                  // Removes 1 from the collection. Collection now contains [1,2].\nrandomizedCollection.getRandom(); // getRandom should return 1 or 2, both equally likely.\nConstraints:\n<ul>\n\t<li>-2<sup>31</sup> &lt;= val &lt;= 2<sup>31</sup> - 1</li>\n\t<li>At most 2 * 10<sup>5</sup> calls in total will be made to insert, remove, and getRandom.</li>\n\t<li>There will be at least one element in the data structure when getRandom is called.</li>\n</ul>\n\n"test_case": [\n  ["RandomizedCollection","insert","insert","insert","getRandom","remove","getRandom"]\n[[],[1],[1],[2],[],[1],[]]\n],\n"test_case_output": [],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nImplement the RandomizedSet class:\n<ul>\n\t<li>RandomizedSet() Initializes the RandomizedSet object.</li>\n\t<li>bool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise.</li>\n\t<li>bool remove(int val) Removes an item val from the set if present. Returns true if the item was present, false otherwise.</li>\n\t<li>int getRandom() Returns a random element from the current set of elements (it&#39;s guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.</li>\n</ul>\nYou must implement the functions of the class such that each function works inaverageO(1)time complexity.<strong class="example">Example 1:\nInput\n[RandomizedSet, insert, remove, insert, getRandom, remove, insert, getRandom]\n[[], [1], [2], [2], [], [1], [2], []]\nOutput\n[null, true, false, true, 2, true, false, 2]\nExplanation\nRandomizedSet randomizedSet = new RandomizedSet();\nrandomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.\nrandomizedSet.remove(2); // Returns false as 2 does not exist in the set.\nrandomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].\nrandomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.\nrandomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].\nrandomizedSet.insert(2); // 2 was already in the set, so return false.\nrandomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.\nConstraints:\n<ul>\n\t<li>-2<sup>31</sup> &lt;= val &lt;= 2<sup>31</sup> - 1</li>\n\t<li>At most 2 *10<sup>5</sup> calls will be made to insert, remove, and getRandom.</li>\n\t<li>There will be at least one element in the data structure when getRandom is called.</li>\n</ul>\n\n"test_case": [\n  ["RandomizedSet","insert","remove","insert","getRandom","remove","insert","getRandom"]\n[[],[1],[2],[2],[],[1],[2],[]]\n],\n"test_case_output": [],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an array of distinct integers nums and a target integer target, return the number of possible combinations that add up totarget.\nThe test cases are generated so that the answer can fit in a 32-bit integer.<strong class="example">Example 1:\nInput: nums = [1,2,3], target = 4\nOutput: 7\nExplanation:\nThe possible combination ways are:\n(1, 1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 3)\n(2, 1, 1)\n(2, 2)\n(3, 1)\nNote that different sequences are counted as different combinations.\n<strong class="example">Example 2:\nInput: nums = [9], target = 3\nOutput: 0\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 200</li>\n\t<li>1 &lt;= nums[i] &lt;= 1000</li>\n\t<li>All the elements of nums are unique.</li>\n\t<li>1 &lt;= target &lt;= 1000</li>\n</ul>Follow up: What if negative numbers are allowed in the given array? How does it change the problem? What limitation we need to add to the question to allow negative numbers?\n\n"test_case": [\n  [1,2,3]\n4\n  [9]\n3\n],\n"test_case_output": [\'7\', \'0\'],\n"test_case_explanation": [\n  "The possible combination ways are:\n(1, 1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 3)\n(2, 1, 1)\n(2, 2)\n(3, 1)\nNote that different sequences are counted as different combinations.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nA wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.\n<ul>\n\t<li>For example, [1, 7, 4, 9, 2, 5] is a wiggle sequence because the differences (6, -3, 5, -7, 3) alternate between positive and negative.</li>\n\t<li>In contrast, [1, 4, 7, 2, 5] and [1, 7, 4, 5, 5] are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.</li>\n</ul>\nA subsequence is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.\nGiven an integer array nums, return the length of the longest wiggle subsequence of nums.<strong class="example">Example 1:\nInput: nums = [1,7,4,9,2,5]\nOutput: 6\nExplanation: The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3).\n<strong class="example">Example 2:\nInput: nums = [1,17,5,10,13,15,10,5,16,8]\nOutput: 7\nExplanation: There are several subsequences that achieve this length.\nOne is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8).\n<strong class="example">Example 3:\nInput: nums = [1,2,3,4,5,6,7,8,9]\nOutput: 2\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 1000</li>\n\t<li>0 &lt;= nums[i] &lt;= 1000</li>\n</ul>Follow up: Could you solve this in O(n) time?\n\n"test_case": [\n  [1,7,4,9,2,5]\n  [1,17,5,10,13,15,10,5,16,8]\n  [1,2,3,4,5,6,7,8,9]\n],\n"test_case_output": [\'6\', \'7\', \'2\'],\n"test_case_explanation": [\n  "The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3).\n"\n\n  "There are several subsequences that achieve this length.\nOne is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8).\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven two integers a and b, return the sum of the two integers without using the operators + and -.<strong class="example">Example 1:\nInput: a = 1, b = 2\nOutput: 3\n<strong class="example">Example 2:\nInput: a = 2, b = 3\nOutput: 5\nConstraints:\n<ul>\n\t<li>-1000 &lt;= a, b &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  1\n2\n  2\n3\n],\n"test_case_output": [\'3\', \'5\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a positive integer num, return true if num is a perfect square or false otherwise.\nA perfect square is an integer that is the square of an integer. In other words, it is the product of some integer with itself.\nYou must not use any built-in library function, such as sqrt.<strong class="example">Example 1:\nInput: num = 16\nOutput: true\nExplanation: We return true because 4 * 4 = 16 and 4 is an integer.\n<strong class="example">Example 2:\nInput: num = 14\nOutput: false\nExplanation: We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer.\nConstraints:\n<ul>\n\t<li>1 &lt;= num &lt;= 2<sup>31</sup> - 1</li>\n</ul>\n\n"test_case": [\n  16\n  14\n],\n"test_case_output": [\'true\', \'false\'],\n"test_case_explanation": [\n  "We return true because 4 * 4 = 16 and 4 is an integer.\n"\n\n  "We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer n, return the count of all numbers with unique digits, x, where 0 &lt;= x &lt; 10<sup>n</sup>.<strong class="example">Example 1:\nInput: n = 2\nOutput: 91\nExplanation: The answer should be the total numbers in the range of 0 &le; x &lt; 100, excluding 11,22,33,44,55,66,77,88,99\n<strong class="example">Example 2:\nInput: n = 0\nOutput: 1\nConstraints:\n<ul>\n\t<li>0 &lt;= n &lt;= 8</li>\n</ul>\n\n"test_case": [\n  2\n  0\n],\n"test_case_output": [\'91\', \'1\'],\n"test_case_explanation": [\n  "The answer should be the total numbers in the range of 0 &le; x &lt; 100, excluding 11,22,33,44,55,66,77,88,99\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.<strong class="example">Example 1:\nInput: nums1 = [1,2,2,1], nums2 = [2,2]\nOutput: [2,2]\n<strong class="example">Example 2:\nInput: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\nOutput: [4,9]\nExplanation: [9,4] is also accepted.\nConstraints:\n<ul>\n\t<li>1 &lt;= nums1.length, nums2.length &lt;= 1000</li>\n\t<li>0 &lt;= nums1[i], nums2[i] &lt;= 1000</li>\n</ul>Follow up:\n<ul>\n\t<li>What if the given array is already sorted? How would you optimize your algorithm?</li>\n\t<li>What if nums1&#39;s size is small compared to nums2&#39;s size? Which algorithm is better?</li>\n\t<li>What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?</li>\n</ul>\n\n"test_case": [\n  [1,2,2,1]\n[2,2]\n  [4,9,5]\n[9,4,9,8,4]\n],\n"test_case_output": [\'[2,2]\', \'[4,9]\'],\n"test_case_explanation": [\n  "[9,4] is also accepted.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.<strong class="example">Example 1:\nInput: nums1 = [1,2,2,1], nums2 = [2,2]\nOutput: [2]\n<strong class="example">Example 2:\nInput: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\nOutput: [9,4]\nExplanation: [4,9] is also accepted.\nConstraints:\n<ul>\n\t<li>1 &lt;= nums1.length, nums2.length &lt;= 1000</li>\n\t<li>0 &lt;= nums1[i], nums2[i] &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  [1,2,2,1]\n[2,2]\n  [4,9,5]\n[9,4,9,8,4]\n],\n"test_case_output": [\'[2]\', \'[9,4]\'],\n"test_case_explanation": [\n  "[4,9] is also accepted.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.<strong class="example">Example 1:\nInput: nums = [1,1,1,2,2,3], k = 2\nOutput: [1,2]\n<strong class="example">Example 2:\nInput: nums = [1], k = 1\nOutput: [1]\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>5</sup></li>\n\t<li>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></li>\n\t<li>k is in the range [1, the number of unique elements in the array].</li>\n\t<li>It is guaranteed that the answer is unique.</li>\n</ul>Follow up: Your algorithm&#39;s time complexity must be better than O(n log n), where n is the array&#39;s size.\n\n"test_case": [\n  [1,1,1,2,2,3]\n2\n  [1]\n1\n],\n"test_case_output": [\'[1,2]\', \'[1]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a string s, reverse only all the vowels in the string and return it.\nThe vowels are &#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39;, and &#39;u&#39;, and they can appear in both lower and upper cases, more than once.<strong class="example">Example 1:\nInput: s = "hello"\nOutput: "holle"\n<strong class="example">Example 2:\nInput: s = "leetcode"\nOutput: "leotcede"\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></li>\n\t<li>s consist of printable ASCII characters.</li>\n</ul>\n\n"test_case": [\n  "hello"\n  "leetcode"\n],\n"test_case_output": [\'"holle"\', \'"leotcede"\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nWrite a function that reverses a string. The input string is given as an array of characters s.\nYou must do this by modifying the input array <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank">in-place</a> with O(1) extra memory.<strong class="example">Example 1:\nInput: s = ["h","e","l","l","o"]\nOutput: ["o","l","l","e","h"]\n<strong class="example">Example 2:\nInput: s = ["H","a","n","n","a","h"]\nOutput: ["h","a","n","n","a","H"]\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 10<sup>5</sup></li>\n\t<li>s[i] is a <a href="https://en.wikipedia.org/wiki/ASCII#Printable_characters" target="_blank">printable ascii character</a>.</li>\n</ul>\n\n"test_case": [\n  ["h","e","l","l","o"]\n  ["H","a","n","n","a","h"]\n],\n"test_case_output": [\'["o","l","l","e","h"]\', \'["h","a","n","n","a","H"]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer n, break it into the sum of k positive integers, where k &gt;= 2, and maximize the product of those integers.\nReturn the maximum product you can get.<strong class="example">Example 1:\nInput: n = 2\nOutput: 1\nExplanation: 2 = 1 + 1, 1 &times; 1 = 1.\n<strong class="example">Example 2:\nInput: n = 10\nOutput: 36\nExplanation: 10 = 3 + 3 + 4, 3 &times; 3 &times; 4 = 36.\nConstraints:\n<ul>\n\t<li>2 &lt;= n &lt;= 58</li>\n</ul>\n\n"test_case": [\n  2\n  10\n],\n"test_case_output": [\'1\', \'36\'],\n"test_case_explanation": [\n  "2 = 1 + 1, 1 &times; 1 = 1.\n"\n\n  "10 = 3 + 3 + 4, 3 &times; 3 &times; 4 = 36.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer n, return true if it is a power of four. Otherwise, return false.\nAn integer n is a power of four, if there exists an integer x such that n == 4<sup>x</sup>.<strong class="example">Example 1:\nInput: n = 16\nOutput: true\n<strong class="example">Example 2:\nInput: n = 5\nOutput: false\n<strong class="example">Example 3:\nInput: n = 1\nOutput: true\nConstraints:\n<ul>\n\t<li>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1</li>\n</ul>Follow up: Could you solve it without loops/recursion?\n"test_case": [\n  16\n  5\n  1\n],\n"test_case_output": [\'true\', \'false\', \'true\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a nested list of integers nestedList. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.\nImplement the NestedIterator class:\n<ul>\n\t<li>NestedIterator(List&lt;NestedInteger&gt; nestedList) Initializes the iterator with the nested list nestedList.</li>\n\t<li>int next() Returns the next integer in the nested list.</li>\n\t<li>boolean hasNext() Returns true if there are still some integers in the nested list and false otherwise.</li>\n</ul>\nYour code will be tested with the following pseudocode:\ninitialize iterator with nestedList\nres = []\nwhile iterator.hasNext()\n    append iterator.next() to the end of res\nreturn res\nIf res matches the expected flattened list, then your code will be judged as correct.<strong class="example">Example 1:\nInput: nestedList = [[1,1],2,[1,1]]\nOutput: [1,1,2,1,1]\nExplanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].\n<strong class="example">Example 2:\nInput: nestedList = [1,[4,[6]]]\nOutput: [1,4,6]\nExplanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].\nConstraints:\n<ul>\n\t<li>1 &lt;= nestedList.length &lt;= 500</li>\n\t<li>The values of the integers in the nested list is in the range [-10<sup>6</sup>, 10<sup>6</sup>].</li>\n</ul>\n\n"test_case": [\n  [[1,1],2,[1,1]]\n  [1,[4,[6]]]\n],\n"test_case_output": [\'[1,1,2,1,1]\', \'[1,4,6]\'],\n"test_case_explanation": [\n  "By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].\n"\n\n  "By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer n, return an array ans of length n + 1 such that for each i (0 &lt;= i &lt;= n), ans[i] is the number of 1&#39;s in the binary representation of i.<strong class="example">Example 1:\nInput: n = 2\nOutput: [0,1,1]\nExplanation:\n0 --&gt; 0\n1 --&gt; 1\n2 --&gt; 10\n<strong class="example">Example 2:\nInput: n = 5\nOutput: [0,1,1,2,1,2]\nExplanation:\n0 --&gt; 0\n1 --&gt; 1\n2 --&gt; 10\n3 --&gt; 11\n4 --&gt; 100\n5 --&gt; 101\nConstraints:\n<ul>\n\t<li>0 &lt;= n &lt;= 10<sup>5</sup></li>\n</ul>Follow up:\n<ul>\n\t<li>It is very easy to come up with a solution with a runtime of O(n log n). Can you do it in linear time O(n) and possibly in a single pass?</li>\n\t<li>Can you do it without using any built-in function (i.e., like __builtin_popcount in C++)?</li>\n</ul>\n\n"test_case": [\n  2\n  5\n],\n"test_case_output": [\'[0,1,1]\', \'[0,1,1,2,1,2]\'],\n"test_case_explanation": [\n  "0 --&gt; 0\n1 --&gt; 1\n2 --&gt; 10\n"\n\n  "0 --&gt; 0\n1 --&gt; 1\n2 --&gt; 10\n3 --&gt; 11\n4 --&gt; 100\n5 --&gt; 101\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThe thief has found himself a new place for his thievery again. There is only one entrance to this area, called root.\nBesides the root, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if two directly-linked houses were broken into on the same night.\nGiven the root of the binary tree, return the maximum amount of money the thief can rob without alerting the police.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/10/rob1-tree.jpg" style="width: 277px; height: 293px;" />\nInput: root = [3,2,3,null,3,null,1]\nOutput: 7\nExplanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/10/rob2-tree.jpg" style="width: 357px; height: 293px;" />\nInput: root = [3,4,5,1,3,null,1]\nOutput: 9\nExplanation: Maximum amount of money the thief can rob = 4 + 5 = 9.\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [1, 10<sup>4</sup>].</li>\n\t<li>0 &lt;= Node.val &lt;= 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  [3,2,3,null,3,null,1]\n  [3,4,5,1,3,null,1]\n],\n"test_case_output": [\'7\', \'9\'],\n"test_case_explanation": [\n  "Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.\n"\n\n  "Maximum amount of money the thief can rob = 4 + 5 = 9.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a 0-indexed array of unique strings words.\nA palindrome pair is a pair of integers (i, j) such that:\n<ul>\n\t<li>0 &lt;= i, j &lt; words.length,</li>\n\t<li>i != j, and</li>\n\t<li>words[i] + words[j] (the concatenation of the two strings) is a <span data-keyword="palindrome-string">palindrome</span>.</li>\n</ul>\nReturn an array of all the palindrome pairs of words.\nYou must write an algorithm withO(sum of words[i].length)runtime complexity.<strong class="example">Example 1:\nInput: words = [abcd,dcba,lls,s,sssll]\nOutput: [[0,1],[1,0],[3,2],[2,4]]\nExplanation: The palindromes are [abcddcba,dcbaabcd,slls,llssssll]\n<strong class="example">Example 2:\nInput: words = [bat,tab,cat]\nOutput: [[0,1],[1,0]]\nExplanation: The palindromes are [battab,tabbat]\n<strong class="example">Example 3:\nInput: words = [a,]\nOutput: [[0,1],[1,0]]\nExplanation: The palindromes are [a,a]\nConstraints:\n<ul>\n\t<li>1 &lt;= words.length &lt;= 5000</li>\n\t<li>0 &lt;= words[i].length &lt;= 300</li>\n\t<li>words[i] consists of lowercase English letters.</li>\n</ul>\n\n"test_case": [\n  ["abcd","dcba","lls","s","sssll"]\n  ["bat","tab","cat"]\n  ["a",""]\n],\n"test_case_output": [\'[[0,1],[1,0],[3,2],[2,4]]\', \'[[0,1],[1,0]]\', \'[[0,1],[1,0]]\'],\n"test_case_explanation": [\n  "The palindromes are [abcddcba,dcbaabcd,slls,llssssll]\n"\n\n  "The palindromes are [battab,tabbat]\n"\n\n  "The palindromes are [a,a]\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums, return true if there exists a triple of indices (i, j, k) such that i &lt; j &lt; k and nums[i] &lt; nums[j] &lt; nums[k]. If no such indices exists, return false.<strong class="example">Example 1:\nInput: nums = [1,2,3,4,5]\nOutput: true\nExplanation: Any triplet where i &lt; j &lt; k is valid.\n<strong class="example">Example 2:\nInput: nums = [5,4,3,2,1]\nOutput: false\nExplanation: No triplet exists.\n<strong class="example">Example 3:\nInput: nums = [2,1,5,0,4,6]\nOutput: true\nExplanation: The triplet (3, 4, 5) is valid because nums[3] == 0 &lt; nums[4] == 4 &lt; nums[5] == 6.\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 5 * 10<sup>5</sup></li>\n\t<li>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</li>\n</ul>Follow up: Could you implement a solution that runs in O(n) time complexity and O(1) space complexity?\n"test_case": [\n  [1,2,3,4,5]\n  [5,4,3,2,1]\n  [2,1,5,0,4,6]\n],\n"test_case_output": [\'true\', \'false\', \'true\'],\n"test_case_explanation": [\n  "Any triplet where i &lt; j &lt; k is valid.\n"\n\n  "No triplet exists.\n"\n\n  "The triplet (3, 4, 5) is valid because nums[3] == 0 &lt; nums[4] == 4 &lt; nums[5] == 6.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a list of airline tickets where tickets[i] = [from<sub>i</sub>, to<sub>i</sub>] represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.\nAll of the tickets belong to a man who departs from JFK, thus, the itinerary must begin with JFK. If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.\n<ul>\n\t<li>For example, the itinerary [JFK, LGA] has a smaller lexical order than [JFK, LGB].</li>\n</ul>\nYou may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/14/itinerary1-graph.jpg" style="width: 382px; height: 222px;" />\nInput: tickets = [[MUC,LHR],[JFK,MUC],[SFO,SJC],[LHR,SFO]]\nOutput: [JFK,MUC,LHR,SFO,SJC]\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/14/itinerary2-graph.jpg" style="width: 222px; height: 230px;" />\nInput: tickets = [[JFK,SFO],[JFK,ATL],[SFO,ATL],[ATL,JFK],[ATL,SFO]]\nOutput: [JFK,ATL,JFK,SFO,ATL,SFO]\nExplanation: Another possible reconstruction is [JFK,SFO,ATL,JFK,ATL,SFO] but it is larger in lexical order.\nConstraints:\n<ul>\n\t<li>1 &lt;= tickets.length &lt;= 300</li>\n\t<li>tickets[i].length == 2</li>\n\t<li>from<sub>i</sub>.length == 3</li>\n\t<li>to<sub>i</sub>.length == 3</li>\n\t<li>from<sub>i</sub> and to<sub>i</sub> consist of uppercase English letters.</li>\n\t<li>from<sub>i</sub> != to<sub>i</sub></li>\n</ul>\n\n"test_case": [\n  [["MUC","LHR"],["JFK","MUC"],["SFO","SJC"],["LHR","SFO"]]\n  [["JFK","SFO"],["JFK","ATL"],["SFO","ATL"],["ATL","JFK"],["ATL","SFO"]]\n],\n"test_case_output": [\'[JFK,MUC,LHR,SFO,SJC]\', \'[JFK,ATL,JFK,SFO,ATL,SFO]\'],\n"test_case_explanation": [\n  "Another possible reconstruction is [JFK,SFO,ATL,JFK,ATL,SFO] but it is larger in lexical order.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nOne way to serialize a binary tree is to use preorder traversal. When we encounter a non-null node, we record the node&#39;s value. If it is a null node, we record using a sentinel value such as &#39;#&#39;.\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/12/pre-tree.jpg" style="width: 362px; height: 293px;" />\nFor example, the above binary tree can be serialized to the string 9,3,4,#,#,1,#,#,2,#,6,#,#, where &#39;#&#39; represents a null node.\nGiven a string of comma-separated values preorder, return true if it is a correct preorder traversal serialization of a binary tree.\nIt is guaranteed that each comma-separated value in the string must be either an integer or a character &#39;#&#39; representing null pointer.\nYou may assume that the input format is always valid.\n<ul>\n\t<li>For example, it could never contain two consecutive commas, such as 1,,3.</li>\n</ul>\nNote:You are not allowed to reconstruct the tree.<strong class="example">Example 1:\nInput: preorder = "9,3,4,#,#,1,#,#,2,#,6,#,#"\nOutput: true\n<strong class="example">Example 2:\nInput: preorder = "1,#"\nOutput: false\n<strong class="example">Example 3:\nInput: preorder = "9,#,#,1"\nOutput: false\nConstraints:\n<ul>\n\t<li>1 &lt;= preorder.length &lt;= 10<sup>4</sup></li>\n\t<li>preorder consist of integers in the range [0, 100] and &#39;#&#39; separated by commas &#39;,&#39;.</li>\n</ul>\n\n"test_case": [\n  "9,3,4,#,#,1,#,#,2,#,6,#,#"\n  "1,#"\n  "9,#,#,1"\n],\n"test_case_output": [\'true\', \'false\', \'false\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a sorted integer array nums and an integer n, add/patch elements to the array such that any number in the range [1, n] inclusive can be formed by the sum of some elements in the array.\nReturn the minimum number of patches required.<strong class="example">Example 1:\nInput: nums = [1,3], n = 6\nOutput: 1\nExplanation:\nCombinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.\nNow if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].\nPossible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].\nSo we only need 1 patch.\n<strong class="example">Example 2:\nInput: nums = [1,5,10], n = 20\nOutput: 2\nExplanation: The two patches can be [2, 4].\n<strong class="example">Example 3:\nInput: nums = [1,2,2], n = 5\nOutput: 0\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 1000</li>\n\t<li>1 &lt;= nums[i] &lt;= 10<sup>4</sup></li>\n\t<li>nums is sorted in ascending order.</li>\n\t<li>1 &lt;= n &lt;= 2<sup>31</sup> - 1</li>\n</ul>\n\n"test_case": [\n  [1,3]\n6\n  [1,5,10]\n20\n  [1,2,2]\n5\n],\n"test_case_output": [\'1\', \'2\', \'0\'],\n"test_case_explanation": [\n  "Combinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.\nNow if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].\nPossible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].\nSo we only need 1 patch.\n"\n\n  "The two patches can be [2, 4].\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an m x n integers matrix, return the length of the longest increasing path in matrix.\nFrom each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/05/grid1.jpg" style="width: 242px; height: 242px;" />\nInput: matrix = [[9,9,4],[6,6,8],[2,1,1]]\nOutput: 4\nExplanation: The longest increasing path is [1, 2, 6, 9].\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/27/tmp-grid.jpg" style="width: 253px; height: 253px;" />\nInput: matrix = [[3,4,5],[3,2,6],[2,2,1]]\nOutput: 4\nExplanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.\n<strong class="example">Example 3:\nInput: matrix = [[1]]\nOutput: 1\nConstraints:\n<ul>\n\t<li>m == matrix.length</li>\n\t<li>n == matrix[i].length</li>\n\t<li>1 &lt;= m, n &lt;= 200</li>\n\t<li>0 &lt;= matrix[i][j] &lt;= 2<sup>31</sup> - 1</li>\n</ul>\n\n"test_case": [\n  [[9,9,4],[6,6,8],[2,1,1]]\n  [[3,4,5],[3,2,6],[2,2,1]]\n  [[1]]\n],\n"test_case_output": [\'4\', \'4\', \'1\'],\n"test_case_explanation": [\n  "The longest increasing path is [1, 2, 6, 9].\n"\n\n  "The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.\nThe first node is considered odd, and the second node is even, and so on.\nNote that the relative order inside both the even and odd groups should remain as it was in the input.\nYou must solve the problemin O(1)extra space complexity and O(n) time complexity.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/10/oddeven-linked-list.jpg" style="width: 300px; height: 123px;" />\nInput: head = [1,2,3,4,5]\nOutput: [1,3,5,2,4]\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/10/oddeven2-linked-list.jpg" style="width: 500px; height: 142px;" />\nInput: head = [2,1,3,5,6,4,7]\nOutput: [2,3,6,7,1,5,4]\nConstraints:\n<ul>\n\t<li>The number of nodes in the linked list is in the range [0, 10<sup>4</sup>].</li>\n\t<li>-10<sup>6</sup> &lt;= Node.val &lt;= 10<sup>6</sup></li>\n</ul>\n\n"test_case": [\n  [1,2,3,4,5]\n  [2,1,3,5,6,4,7]\n],\n"test_case_output": [\'[1,3,5,2,4]\', \'[2,3,6,7,1,5,4]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums and two integers lower and upper, return the number of range sums that lie in [lower, upper] inclusive.\nRange sum S(i, j) is defined as the sum of the elements in nums between indices i and j inclusive, where i &lt;= j.<strong class="example">Example 1:\nInput: nums = [-2,5,-1], lower = -2, upper = 2\nOutput: 3\nExplanation: The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.\n<strong class="example">Example 2:\nInput: nums = [0], lower = 0, upper = 0\nOutput: 1\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>5</sup></li>\n\t<li>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</li>\n\t<li>-10<sup>5</sup> &lt;= lower &lt;= upper &lt;= 10<sup>5</sup></li>\n\t<li>The answer is guaranteed to fit in a 32-bit integer.</li>\n</ul>\n\n"test_case": [\n  [-2,5,-1]\n-2\n2\n  [0]\n0\n0\n],\n"test_case_output": [\'3\', \'1\'],\n"test_case_explanation": [\n  "The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer n, return true if it is a power of three. Otherwise, return false.\nAn integer n is a power of three, if there exists an integer x such that n == 3<sup>x</sup>.<strong class="example">Example 1:\nInput: n = 27\nOutput: true\nExplanation: 27 = 3<sup>3</sup>\n<strong class="example">Example 2:\nInput: n = 0\nOutput: false\nExplanation: There is no x where 3<sup>x</sup> = 0.\n<strong class="example">Example 3:\nInput: n = -1\nOutput: false\nExplanation: There is no x where 3<sup>x</sup> = (-1).\nConstraints:\n<ul>\n\t<li>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1</li>\n</ul>Follow up: Could you solve it without loops/recursion?\n"test_case": [\n  27\n  0\n  -1\n],\n"test_case_output": [\'true\', \'false\', \'false\'],\n"test_case_explanation": [\n  "27 = 3"\n\n  "There is no x where 3"\n\n  "There is no x where 3"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums, reorder it such that nums[0] &lt; nums[1] &gt; nums[2] &lt; nums[3]....\nYou may assume the input array always has a valid answer.<strong class="example">Example 1:\nInput: nums = [1,5,1,1,6,4]\nOutput: [1,6,1,5,1,4]\nExplanation: [1,4,1,5,1,6] is also accepted.\n<strong class="example">Example 2:\nInput: nums = [1,3,2,2,3,1]\nOutput: [2,3,1,3,1,2]\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></li>\n\t<li>0 &lt;= nums[i] &lt;= 5000</li>\n\t<li>It is guaranteed that there will be an answer for the given input nums.</li>\n</ul>Follow Up: Can you do it in O(n) time and/or in-place with O(1) extra space?\n"test_case": [\n  [1,5,1,1,6,4]\n  [1,3,2,2,3,1]\n],\n"test_case_output": [\'[1,6,1,5,1,4]\', \'[2,3,1,3,1,2]\'],\n"test_case_explanation": [\n  "[1,4,1,5,1,6] is also accepted.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\nReturn the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\nYou may assume that you have an infinite number of each kind of coin.<strong class="example">Example 1:\nInput: coins = [1,2,5], amount = 11\nOutput: 3\nExplanation: 11 = 5 + 5 + 1\n<strong class="example">Example 2:\nInput: coins = [2], amount = 3\nOutput: -1\n<strong class="example">Example 3:\nInput: coins = [1], amount = 0\nOutput: 0\nConstraints:\n<ul>\n\t<li>1 &lt;= coins.length &lt;= 12</li>\n\t<li>1 &lt;= coins[i] &lt;= 2<sup>31</sup> - 1</li>\n\t<li>0 &lt;= amount &lt;= 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  [1,2,5]\n11\n  [2]\n3\n  [1]\n0\n],\n"test_case_output": [\'3\', \'-1\', \'0\'],\n"test_case_explanation": [\n  "11 = 5 + 5 + 1\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given two integer arrays nums1 and nums2 of lengths m and n respectively. nums1 and nums2 represent the digits of two numbers. You are also given an integer k.\nCreate the maximum number of length k &lt;= m + n from digits of the two numbers. The relative order of the digits from the same array must be preserved.\nReturn an array of the k digits representing the answer.<strong class="example">Example 1:\nInput: nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5\nOutput: [9,8,6,5,3]\n<strong class="example">Example 2:\nInput: nums1 = [6,7], nums2 = [6,0,4], k = 5\nOutput: [6,7,6,0,4]\n<strong class="example">Example 3:\nInput: nums1 = [3,9], nums2 = [8,9], k = 3\nOutput: [9,8,9]\nConstraints:\n<ul>\n\t<li>m == nums1.length</li>\n\t<li>n == nums2.length</li>\n\t<li>1 &lt;= m, n &lt;= 500</li>\n\t<li>0 &lt;= nums1[i], nums2[i] &lt;= 9</li>\n\t<li>1 &lt;= k &lt;= m + n</li>\n</ul>\n\n"test_case": [\n  [3,4,6,5]\n[9,1,2,5,8,3]\n5\n  [6,7]\n[6,0,4]\n5\n  [3,9]\n[8,9]\n3\n],\n"test_case_output": [\'[9,8,6,5,3]\', \'[6,7,6,0,4]\', \'[9,8,9]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThere are n bulbs that are initially off. You first turn on all the bulbs, thenyou turn off every second bulb.\nOn the third round, you toggle every third bulb (turning on if it&#39;s off or turning off if it&#39;s on). For the i<sup>th</sup> round, you toggle every i bulb. For the n<sup>th</sup> round, you only toggle the last bulb.\nReturn the number of bulbs that are on after n rounds.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/11/05/bulb.jpg" style="width: 421px; height: 321px;" />\nInput: n = 3\nOutput: 1\nExplanation: At first, the three bulbs are [off, off, off].\nAfter the first round, the three bulbs are [on, on, on].\nAfter the second round, the three bulbs are [on, off, on].\nAfter the third round, the three bulbs are [on, off, off]. \nSo you should return 1 because there is only one bulb is on.\n<strong class="example">Example 2:\nInput: n = 0\nOutput: 0\n<strong class="example">Example 3:\nInput: n = 1\nOutput: 1\nConstraints:\n<ul>\n\t<li>0 &lt;= n &lt;= 10<sup>9</sup></li>\n</ul>\n\n"test_case": [\n  3\n  0\n  1\n],\n"test_case_output": [\'1\', \'0\', \'1\'],\n"test_case_explanation": [\n  "At first, the three bulbs are [off, off, off].\nAfter the first round, the three bulbs are [on, on, on].\nAfter the second round, the three bulbs are [on, off, on].\nAfter the third round, the three bulbs are [on, off, off]. \nSo you should return 1 because there is only one bulb is on.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. If no such two words exist, return 0.<strong class="example">Example 1:\nInput: words = [abcw,baz,foo,bar,xtfn,abcdef]\nOutput: 16\nExplanation: The two words can be abcw, xtfn.\n<strong class="example">Example 2:\nInput: words = [a,ab,abc,d,cd,bcd,abcd]\nOutput: 4\nExplanation: The two words can be ab, cd.\n<strong class="example">Example 3:\nInput: words = [a,aa,aaa,aaaa]\nOutput: 0\nExplanation: No such pair of words.\nConstraints:\n<ul>\n\t<li>2 &lt;= words.length &lt;= 1000</li>\n\t<li>1 &lt;= words[i].length &lt;= 1000</li>\n\t<li>words[i] consists only of lowercase English letters.</li>\n</ul>\n\n"test_case": [\n  ["abcw","baz","foo","bar","xtfn","abcdef"]\n  ["a","ab","abc","d","cd","bcd","abcd"]\n  ["a","aa","aaa","aaaa"]\n],\n"test_case_output": [\'16\', \'4\', \'0\'],\n"test_case_explanation": [\n  "The two words can be abcw, xtfn.\n"\n\n  "The two words can be ab, cd.\n"\n\n  "No such pair of words.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is <span data-keyword="lexicographically-smaller-string">the smallest in lexicographical order</span> among all possible results.<strong class="example">Example 1:\nInput: s = bcabc\nOutput: abc\n<strong class="example">Example 2:\nInput: s = cbacdcbc\nOutput: acdb\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 10<sup>4</sup></li>\n\t<li>s consists of lowercase English letters.</li>\n</ul>Note: This question is the same as 1081: <a href="https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/" target="_blank">https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/</a>\n\n"test_case": [\n  "bcabc"\n  "cbacdcbc"\n],\n"test_case_output": [\'abc\', \'acdb\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums, return an integer array counts where counts[i] is the number of smaller elements to the right of nums[i].<strong class="example">Example 1:\nInput: nums = [5,2,6,1]\nOutput: [2,1,1,0]\nExplanation:\nTo the right of 5 there are 2 smaller elements (2 and 1).\nTo the right of 2 there is only 1 smaller element (1).\nTo the right of 6 there is 1 smaller element (1).\nTo the right of 1 there is 0 smaller element.\n<strong class="example">Example 2:\nInput: nums = [-1]\nOutput: [0]\n<strong class="example">Example 3:\nInput: nums = [-1,-1]\nOutput: [0,0]\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>5</sup></li>\n\t<li>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  [5,2,6,1]\n  [-1]\n  [-1,-1]\n],\n"test_case_output": [\'[2,1,1,0]\', \'[0]\', \'[0,0]\'],\n"test_case_explanation": [\n  "To the right of 5 there are 2 smaller elements (2 and 1).\nTo the right of 2 there is only 1 smaller element (1).\nTo the right of 6 there is 1 smaller element (1).\nTo the right of 1 there is 0 smaller element.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nA super ugly number is a positive integer whose prime factors are in the array primes.\nGiven an integer n and an array of integers primes, return the n<sup>th</sup> super ugly number.\nThe n<sup>th</sup> super ugly number is guaranteed to fit in a 32-bit signed integer.<strong class="example">Example 1:\nInput: n = 12, primes = [2,7,13,19]\nOutput: 32\nExplanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes = [2,7,13,19].\n<strong class="example">Example 2:\nInput: n = 1, primes = [2,3,5]\nOutput: 1\nExplanation: 1 has no prime factors, therefore all of its prime factors are in the array primes = [2,3,5].\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 10<sup>5</sup></li>\n\t<li>1 &lt;= primes.length &lt;= 100</li>\n\t<li>2 &lt;= primes[i] &lt;= 1000</li>\n\t<li>primes[i] is guaranteed to be a prime number.</li>\n\t<li>All the values of primes are unique and sorted in ascending order.</li>\n</ul>\n\n"test_case": [\n  12\n[2,7,13,19]\n  1\n[2,3,5]\n],\n"test_case_output": [\'32\', \'1\'],\n"test_case_explanation": [\n  "[1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes = [2,7,13,19].\n"\n\n  "1 has no prime factors, therefore all of its prime factors are in the array primes = [2,3,5].\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.\nIf you burst the i<sup>th</sup> balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.\nReturn the maximum coins you can collect by bursting the balloons wisely.<strong class="example">Example 1:\nInput: nums = [3,1,5,8]\nOutput: 167\nExplanation:\nnums = [3,1,5,8] --&gt; [3,5,8] --&gt; [3,8] --&gt; [8] --&gt; []\ncoins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167\n<strong class="example">Example 2:\nInput: nums = [1,5]\nOutput: 10\nConstraints:\n<ul>\n\t<li>n == nums.length</li>\n\t<li>1 &lt;= n &lt;= 300</li>\n\t<li>0 &lt;= nums[i] &lt;= 100</li>\n</ul>\n\n"test_case": [\n  [3,1,5,8]\n  [1,5]\n],\n"test_case_output": [\'167\', \'10\'],\n"test_case_explanation": [\n  "nums = [3,1,5,8] --&gt; [3,5,8] --&gt; [3,8] --&gt; [8] --&gt; []\ncoins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nA tree is an undirected graph in which any two vertices are connected by<i>exactly</i>one path. In other words, any connected graph without simple cycles is a tree.\nGiven a tree of n nodeslabelled from 0 to n - 1, and an array ofn - 1edges where edges[i] = [a<sub>i</sub>, b<sub>i</sub>] indicates that there is an undirected edge between the two nodesa<sub>i</sub> andb<sub>i</sub> in the tree,you can choose any node of the tree as the root. When you select a node x as the root, the result tree has height h. Among all possible rooted trees, those with minimum height (i.e. min(h)) are called minimum height trees (MHTs).\nReturn a list of all MHTs&#39; root labels.You can return the answer in any order.\nThe height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/09/01/e1.jpg" style="width: 800px; height: 213px;" />\nInput: n = 4, edges = [[1,0],[1,2],[1,3]]\nOutput: [1]\nExplanation: As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT.\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/09/01/e2.jpg" style="width: 800px; height: 321px;" />\nInput: n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]\nOutput: [3,4]\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 2 * 10<sup>4</sup></li>\n\t<li>edges.length == n - 1</li>\n\t<li>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</li>\n\t<li>a<sub>i</sub> != b<sub>i</sub></li>\n\t<li>All the pairs (a<sub>i</sub>, b<sub>i</sub>) are distinct.</li>\n\t<li>The given input is guaranteed to be a tree and there will be no repeated edges.</li>\n</ul>\n\n"test_case": [\n  4\n[[1,0],[1,2],[1,3]]\n  6\n[[3,0],[3,1],[3,2],[3,4],[5,4]]\n],\n"test_case_output": [\'[1]\', \'[3,4]\'],\n"test_case_explanation": [\n  "As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an array prices where prices[i] is the price of a given stock on the i<sup>th</sup> day.\nFind the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:\n<ul>\n\t<li>After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).</li>\n</ul>\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).<strong class="example">Example 1:\nInput: prices = [1,2,3,0,2]\nOutput: 3\nExplanation: transactions = [buy, sell, cooldown, buy, sell]\n<strong class="example">Example 2:\nInput: prices = [1]\nOutput: 0\nConstraints:\n<ul>\n\t<li>1 &lt;= prices.length &lt;= 5000</li>\n\t<li>0 &lt;= prices[i] &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  [1,2,3,0,2]\n  [1]\n],\n"test_case_output": [\'3\', \'0\'],\n"test_case_explanation": [\n  "transactions = [buy, sell, cooldown, buy, sell]\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums, handle multiple queries of the following types:\n<ol>\n\t<li>Update the value of an element in nums.</li>\n\t<li>Calculate the sum of the elements of nums between indices left and right inclusive where left &lt;= right.</li>\n</ol>\nImplement the NumArray class:\n<ul>\n\t<li>NumArray(int[] nums) Initializes the object with the integer array nums.</li>\n\t<li>void update(int index, int val) Updates the value of nums[index] to be val.</li>\n\t<li>int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).</li>\n</ul><strong class="example">Example 1:\nInput\n[NumArray, sumRange, update, sumRange]\n[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]\nOutput\n[null, 9, null, 8]\nExplanation\nNumArray numArray = new NumArray([1, 3, 5]);\nnumArray.sumRange(0, 2); // return 1 + 3 + 5 = 9\nnumArray.update(1, 2);   // nums = [1, 2, 5]\nnumArray.sumRange(0, 2); // return 1 + 2 + 5 = 8\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></li>\n\t<li>-100 &lt;= nums[i] &lt;= 100</li>\n\t<li>0 &lt;= index &lt; nums.length</li>\n\t<li>-100 &lt;= val &lt;= 100</li>\n\t<li>0 &lt;= left &lt;= right &lt; nums.length</li>\n\t<li>At most 3 * 10<sup>4</sup> calls will be made to update and sumRange.</li>\n</ul>\n\n"test_case": [\n  ["NumArray","sumRange","update","sumRange"]\n[[[1,3,5]],[0,2],[1,2],[0,2]]\n],\n"test_case_output": [],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nAn additive number is a string whose digits can form an additive sequence.\nA valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.\nGiven a string containing only digits, return true if it is an additive number or false otherwise.\nNote: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.<strong class="example">Example 1:\nInput: 112358\nOutput: true\nExplanation: \nThe digits can form an additive sequence: 1, 1, 2, 3, 5, 8. \n1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8\n<strong class="example">Example 2:\nInput: 199100199\nOutput: true\nExplanation: \nThe additive sequence is: 1, 99, 100, 199.\n1 + 99 = 100, 99 + 100 = 199\nConstraints:\n<ul>\n\t<li>1 &lt;= num.length &lt;= 35</li>\n\t<li>num consists only of digits.</li>\n</ul>Follow up: How would you handle overflow for very large input integers?\n\n"test_case": [\n  "112358"\n  "199100199"\n],\n"test_case_output": [\'true\', \'true\'],\n"test_case_explanation": [\n  "The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. \n1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8\n"\n\n  "The additive sequence is: 1, 99, 100, 199.\n1 + 99 = 100, 99 + 100 = 199\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a 2D matrix matrix, handle multiple queries of the following type:\n<ul>\n\t<li>Calculate the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).</li>\n</ul>\nImplement the NumMatrix class:\n<ul>\n\t<li>NumMatrix(int[][] matrix) Initializes the object with the integer matrix matrix.</li>\n\t<li>int sumRegion(int row1, int col1, int row2, int col2) Returns the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).</li>\n</ul>\nYou must design an algorithm where sumRegion works on O(1) time complexity.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/14/sum-grid.jpg" style="width: 415px; height: 415px;" />\nInput\n[NumMatrix, sumRegion, sumRegion, sumRegion]\n[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]\nOutput\n[null, 8, 11, 12]\nExplanation\nNumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);\nnumMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle)\nnumMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle)\nnumMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle)\nConstraints:\n<ul>\n\t<li>m == matrix.length</li>\n\t<li>n == matrix[i].length</li>\n\t<li>1 &lt;= m, n &lt;= 200</li>\n\t<li>-10<sup>4</sup> &lt;= matrix[i][j] &lt;= 10<sup>4</sup></li>\n\t<li>0 &lt;= row1 &lt;= row2 &lt; m</li>\n\t<li>0 &lt;= col1 &lt;= col2 &lt; n</li>\n\t<li>At most 10<sup>4</sup> calls will be made to sumRegion.</li>\n</ul>\n\n"test_case": [\n  ["NumMatrix","sumRegion","sumRegion","sumRegion"]\n[[[[3,0,1,4,2],[5,6,3,2,1],[1,2,0,1,5],[4,1,0,1,7],[1,0,3,0,5]]],[2,1,4,3],[1,1,2,2],[1,2,2,4]]\n],\n"test_case_output": [],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums, handle multiple queries of the following type:\n<ol>\n\t<li>Calculate the sum of the elements of nums between indices left and right inclusive where left &lt;= right.</li>\n</ol>\nImplement the NumArray class:\n<ul>\n\t<li>NumArray(int[] nums) Initializes the object with the integer array nums.</li>\n\t<li>int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).</li>\n</ul><strong class="example">Example 1:\nInput\n[NumArray, sumRange, sumRange, sumRange]\n[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]\nOutput\n[null, 1, -1, -3]\nExplanation\nNumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);\nnumArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1\nnumArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1\nnumArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>4</sup></li>\n\t<li>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></li>\n\t<li>0 &lt;= left &lt;= right &lt; nums.length</li>\n\t<li>At most 10<sup>4</sup> calls will be made to sumRange.</li>\n</ul>\n\n"test_case": [\n  ["NumArray","sumRange","sumRange","sumRange"]\n[[[-2,0,3,-5,2,-1]],[0,2],[2,5],[0,5]]\n],\n"test_case_output": [],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a string s that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.\nReturn a list of unique strings that are valid with the minimum number of removals. You may return the answer in any order.<strong class="example">Example 1:\nInput: s = ()())()\nOutput: [(())(),()()()]\n<strong class="example">Example 2:\nInput: s = (a)())()\nOutput: [(a())(),(a)()()]\n<strong class="example">Example 3:\nInput: s = )(\nOutput: []\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 25</li>\n\t<li>s consists of lowercase English letters and parentheses &#39;(&#39; and &#39;)&#39;.</li>\n\t<li>There will be at most 20 parentheses in s.</li>\n</ul>\n\n"test_case": [\n  "()())()"\n  "(a)())()"\n  ")("\n],\n"test_case_output": [\'[(())(),()()()]\', \'[(a())(),(a)()()]\', \'[]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums, return the length of the longest strictly increasing <span data-keyword="subsequence-array">subsequence</span>.<strong class="example">Example 1:\nInput: nums = [10,9,2,5,3,7,101,18]\nOutput: 4\nExplanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.\n<strong class="example">Example 2:\nInput: nums = [0,1,0,3,2,3]\nOutput: 4\n<strong class="example">Example 3:\nInput: nums = [7,7,7,7,7,7,7]\nOutput: 1\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 2500</li>\n\t<li>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></li>\n</ul>Follow up:Can you come up with an algorithm that runs inO(n log(n)) time complexity?\n\n"test_case": [\n  [10,9,2,5,3,7,101,18]\n  [0,1,0,3,2,3]\n  [7,7,7,7,7,7,7]\n],\n"test_case_output": [\'4\', \'4\', \'1\'],\n"test_case_explanation": [\n  "The longest increasing subsequence is [2,3,7,101], therefore the length is 4.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are playing the <a href="https://en.wikipedia.org/wiki/Bulls_and_Cows" target="_blank">Bulls and Cows</a> game with your friend.\nYou write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:\n<ul>\n\t<li>The number of bulls, which are digits in the guess that are in the correct position.</li>\n\t<li>The number of cows, which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.</li>\n</ul>\nGiven the secret number secret and your friend&#39;s guess guess, return the hint for your friend&#39;s guess.\nThe hint should be formatted as xAyB, where x is the number of bulls and y is the number of cows. Note that both secret and guess may contain duplicate digits.<strong class="example">Example 1:\nInput: secret = 1807, guess = 7810\nOutput: 1A3B\nExplanation: Bulls are connected with a &#39;|&#39; and cows are underlined:\n1807\n  |\n7810\n<strong class="example">Example 2:\nInput: secret = 1123, guess = 0111\nOutput: 1A1B\nExplanation: Bulls are connected with a &#39;|&#39; and cows are underlined:\n1123        1123\n  |      or     |\n0111        0111\nNote that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull.\nConstraints:\n<ul>\n\t<li>1 &lt;= secret.length, guess.length &lt;= 1000</li>\n\t<li>secret.length == guess.length</li>\n\t<li>secret and guess consist of digits only.</li>\n</ul>\n\n"test_case": [\n  "1807"\n"7810"\n  "1123"\n"0111"\n],\n"test_case_output": [\'1A3B\', \'1A1B\'],\n"test_case_explanation": [\n  "Bulls are connected with a &#39;|&#39; and cows are underlined:\n1807\n  |\n7810\n"\n\n  "Bulls are connected with a &#39;|&#39; and cows are underlined:\n1123        1123\n  |      or     |\n0111        0111\nNote that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nSerialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\nDesign an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.\nClarification: The input/output format is the same as <a href="https://support.leetcode.com/hc/en-us/articles/360011883654-What-does-1-null-2-3-mean-in-binary-tree-representation-" target="_blank">how LeetCode serializes a binary tree</a>. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/09/15/serdeser.jpg" style="width: 442px; height: 324px;" />\nInput: root = [1,2,3,null,null,4,5]\nOutput: [1,2,3,null,null,4,5]\n<strong class="example">Example 2:\nInput: root = []\nOutput: []\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [0, 10<sup>4</sup>].</li>\n\t<li>-1000 &lt;= Node.val &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  [1,2,3,null,null,4,5]\n  []\n],\n"test_case_output": [\'[1,2,3,null,null,4,5]\', \'[]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThe median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.\n<ul>\n\t<li>For example, for arr = [2,3,4], the median is 3.</li>\n\t<li>For example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5.</li>\n</ul>\nImplement the MedianFinder class:\n<ul>\n\t<li>MedianFinder() initializes the MedianFinder object.</li>\n\t<li>void addNum(int num) adds the integer num from the data stream to the data structure.</li>\n\t<li>double findMedian() returns the median of all elements so far. Answers within 10<sup>-5</sup> of the actual answer will be accepted.</li>\n</ul><strong class="example">Example 1:\nInput\n[MedianFinder, addNum, addNum, findMedian, addNum, findMedian]\n[[], [1], [2], [], [3], []]\nOutput\n[null, null, null, 1.5, null, 2.0]\nExplanation\nMedianFinder medianFinder = new MedianFinder();\nmedianFinder.addNum(1);    // arr = [1]\nmedianFinder.addNum(2);    // arr = [1, 2]\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\nmedianFinder.addNum(3);    // arr[1, 2, 3]\nmedianFinder.findMedian(); // return 2.0\nConstraints:\n<ul>\n\t<li>-10<sup>5</sup> &lt;= num &lt;= 10<sup>5</sup></li>\n\t<li>There will be at least one element in the data structure before calling findMedian.</li>\n\t<li>At most 5 * 10<sup>4</sup> calls will be made to addNum and findMedian.</li>\n</ul>Follow up:\n<ul>\n\t<li>If all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?</li>\n\t<li>If 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?</li>\n</ul>\n\n"test_case": [\n  ["MedianFinder","addNum","addNum","findMedian","addNum","findMedian"]\n[[],[1],[2],[],[3],[]]\n],\n"test_case_output": [],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are playing the following Nim Game with your friend:\n<ul>\n\t<li>Initially, there is a heap of stones on the table.</li>\n\t<li>You and your friend will alternate taking turns, and you go first.</li>\n\t<li>On each turn, the person whose turn it is will remove 1 to 3 stones from the heap.</li>\n\t<li>The one who removes the last stone is the winner.</li>\n</ul>\nGiven n, the number of stones in the heap, return true if you can win the game assuming both you and your friend play optimally, otherwise return false.<strong class="example">Example 1:\nInput: n = 4\nOutput: false\nExplanation: These are the possible outcomes:\n1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.\n2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.\n3. You remove 3 stones. Your friend removes the last stone. Your friend wins.\nIn all outcomes, your friend wins.\n<strong class="example">Example 2:\nInput: n = 1\nOutput: true\n<strong class="example">Example 3:\nInput: n = 2\nOutput: true\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 2<sup>31</sup> - 1</li>\n</ul>\n\n"test_case": [\n  4\n  1\n  2\n],\n"test_case_output": [\'false\', \'true\', \'true\'],\n"test_case_explanation": [\n  "These are the possible outcomes:\n1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.\n2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.\n3. You remove 3 stones. Your friend removes the last stone. Your friend wins.\nIn all outcomes, your friend wins.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a pattern and a string s, find if sfollows the same pattern.\nHere follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.<strong class="example">Example 1:\nInput: pattern = abba, s = dog cat cat dog\nOutput: true\n<strong class="example">Example 2:\nInput: pattern = abba, s = dog cat cat fish\nOutput: false\n<strong class="example">Example 3:\nInput: pattern = aaaa, s = dog cat cat dog\nOutput: false\nConstraints:\n<ul>\n\t<li>1 &lt;= pattern.length &lt;= 300</li>\n\t<li>pattern contains only lower-case English letters.</li>\n\t<li>1 &lt;= s.length &lt;= 3000</li>\n\t<li>s contains only lowercase English letters and spaces &#39; &#39;.</li>\n\t<li>s does not contain any leading or trailing spaces.</li>\n\t<li>All the words in s are separated by a single space.</li>\n</ul>\n\n"test_case": [\n  "abba"\n"dog cat cat dog"\n  "abba"\n"dog cat cat fish"\n  "aaaa"\n"dog cat cat dog"\n],\n"test_case_output": [\'true\', \'false\', \'false\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nAccording to<a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life" target="_blank">Wikipedia&#39;s article</a>: The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\nThe board is made up of an m x n grid of cells, where each cell has an initial state: live (represented by a 1) or dead (represented by a 0). Each cell interacts with its <a href="https://en.wikipedia.org/wiki/Moore_neighborhood" target="_blank">eight neighbors</a> (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):\n<ol>\n\t<li>Any live cell with fewer than two live neighbors dies as if caused by under-population.</li>\n\t<li>Any live cell with two or three live neighbors lives on to the next generation.</li>\n\t<li>Any live cell with more than three live neighbors dies, as if by over-population.</li>\n\t<li>Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.</li>\n</ol>\n<span>The next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. Given the current state of the m x n grid board, return the next state.</span><strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/12/26/grid1.jpg" style="width: 562px; height: 322px;" />\nInput: board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]\nOutput: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/12/26/grid2.jpg" style="width: 402px; height: 162px;" />\nInput: board = [[1,1],[1,0]]\nOutput: [[1,1],[1,1]]\nConstraints:\n<ul>\n\t<li>m == board.length</li>\n\t<li>n == board[i].length</li>\n\t<li>1 &lt;= m, n &lt;= 25</li>\n\t<li>board[i][j] is 0 or 1.</li>\n</ul>Follow up:\n<ul>\n\t<li>Could you solve it in-place? Remember that the board needs to be updated simultaneously: You cannot update some cells first and then use their updated values to update other cells.</li>\n\t<li>In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches upon the border of the array (i.e., live cells reach the border). How would you address these problems?</li>\n</ul>\n\n"test_case": [\n  [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]\n  [[1,1],[1,0]]\n],\n"test_case_output": [\'[[0,0,0],[1,0,1],[0,1,1],[0,1,0]]\', \'[[1,1],[1,1]]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an array of integers nums containingn + 1 integers where each integer is in the range [1, n] inclusive.\nThere is only one repeated number in nums, return thisrepeatednumber.\nYou must solve the problem without modifying the array numsand uses only constant extra space.<strong class="example">Example 1:\nInput: nums = [1,3,4,2,2]\nOutput: 2\n<strong class="example">Example 2:\nInput: nums = [3,1,3,4,2]\nOutput: 3\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 10<sup>5</sup></li>\n\t<li>nums.length == n + 1</li>\n\t<li>1 &lt;= nums[i] &lt;= n</li>\n\t<li>All the integers in nums appear only once except for precisely one integer which appears two or more times.</li>\n</ul>Follow up:\n<ul>\n\t<li>How can we prove that at least one duplicate number must exist in nums?</li>\n\t<li>Can you solve the problem in linear runtime complexity?</li>\n</ul>\n\n"test_case": [\n  [1,3,4,2,2]\n  [3,1,3,4,2]\n],\n"test_case_output": [\'2\', \'3\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nDesign an iterator that supports the peek operation on an existing iterator in addition to the hasNext and the next operations.\nImplement the PeekingIterator class:\n<ul>\n\t<li>PeekingIterator(Iterator&lt;int&gt; nums) Initializes the object with the given integer iterator iterator.</li>\n\t<li>int next() Returns the next element in the array and moves the pointer to the next element.</li>\n\t<li>boolean hasNext() Returns true if there are still elements in the array.</li>\n\t<li>int peek() Returns the next element in the array without moving the pointer.</li>\n</ul>\nNote: Each language may have a different implementation of the constructor and Iterator, but they all support the int next() and boolean hasNext() functions.<strong class="example">Example 1:\nInput\n[PeekingIterator, next, peek, next, next, hasNext]\n[[[1, 2, 3]], [], [], [], [], []]\nOutput\n[null, 1, 2, 2, 3, false]\nExplanation\nPeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [1,2,3]\npeekingIterator.next();    // return 1, the pointer moves to the next element [1,2,3].\npeekingIterator.peek();    // return 2, the pointer does not move [1,2,3].\npeekingIterator.next();    // return 2, the pointer moves to the next element [1,2,3]\npeekingIterator.next();    // return 3, the pointer moves to the next element [1,2,3]\npeekingIterator.hasNext(); // return False\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 1000</li>\n\t<li>1 &lt;= nums[i] &lt;= 1000</li>\n\t<li>All the calls to next and peek are valid.</li>\n\t<li>At most 1000 calls will be made to next, hasNext, and peek.</li>\n</ul>Follow up: How would you extend your design to be generic and work with all types, not just integer?\n"test_case": [\n  ["PeekingIterator","next","peek","next","next","hasNext"]\n[[[1,2,3]],[],[],[],[],[]]\n],\n"test_case_output": [],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums, move all 0&#39;s to the end of it while maintaining the relative order of the non-zero elements.\nNote that you must do this in-place without making a copy of the array.<strong class="example">Example 1:\nInput: nums = [0,1,0,3,12]\nOutput: [1,3,12,0,0]\n<strong class="example">Example 2:\nInput: nums = [0]\nOutput: [0]\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>4</sup></li>\n\t<li>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</li>\n</ul>Follow up: Could you minimize the total number of operations done?\n"test_case": [\n  [0,1,0,3,12]\n  [0]\n],\n"test_case_output": [\'[1,3,12,0,0]\', \'[0]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a string num that contains only digits and an integer target, return all possibilities to insert the binary operators &#39;+&#39;, &#39;-&#39;, and/or &#39;*&#39; between the digits of num so that the resultant expression evaluates to the target value.\nNote that operands in the returned expressions should not contain leading zeros.<strong class="example">Example 1:\nInput: num = 123, target = 6\nOutput: [1*2*3,1+2+3]\nExplanation: Both 1*2*3 and 1+2+3 evaluate to 6.\n<strong class="example">Example 2:\nInput: num = 232, target = 8\nOutput: [2*3+2,2+3*2]\nExplanation: Both 2*3+2 and 2+3*2 evaluate to 8.\n<strong class="example">Example 3:\nInput: num = 3456237490, target = 9191\nOutput: []\nExplanation: There are no expressions that can be created from 3456237490 to evaluate to 9191.\nConstraints:\n<ul>\n\t<li>1 &lt;= num.length &lt;= 10</li>\n\t<li>num consists of only digits.</li>\n\t<li>-2<sup>31</sup> &lt;= target &lt;= 2<sup>31</sup> - 1</li>\n</ul>\n\n"test_case": [\n  "123"\n6\n  "232"\n8\n  "3456237490"\n9191\n],\n"test_case_output": [\'[1*2*3,1+2+3]\', \'[2*3+2,2+3*2]\', \'[]\'],\n"test_case_explanation": [\n  "Both 1*2*3 and 1+2+3 evaluate to 6.\n"\n\n  "Both 2*3+2 and 2+3*2 evaluate to 8.\n"\n\n  "There are no expressions that can be created from 3456237490 to evaluate to 9191.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer n, return the least number of perfect square numbers that sum to n.\nA perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.<strong class="example">Example 1:\nInput: n = 12\nOutput: 3\nExplanation: 12 = 4 + 4 + 4.\n<strong class="example">Example 2:\nInput: n = 13\nOutput: 2\nExplanation: 13 = 4 + 9.\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  12\n  13\n],\n"test_case_output": [\'3\', \'2\'],\n"test_case_explanation": [\n  "12 = 4 + 4 + 4.\n"\n\n  "13 = 4 + 9.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.\nSuppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.\nYou are given an API bool isBadVersion(version) which returns whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.<strong class="example">Example 1:\nInput: n = 5, bad = 4\nOutput: 4\nExplanation:\ncall isBadVersion(3) -&gt; false\ncall isBadVersion(5)-&gt; true\ncall isBadVersion(4)-&gt; true\nThen 4 is the first bad version.\n<strong class="example">Example 2:\nInput: n = 1, bad = 1\nOutput: 1\nConstraints:\n<ul>\n\t<li>1 &lt;= bad &lt;= n &lt;= 2<sup>31</sup> - 1</li>\n</ul>\n\n"test_case": [\n  5\n4\n  1\n1\n],\n"test_case_output": [\'4\', \'1\'],\n"test_case_explanation": [\n  "call isBadVersion(3) -&gt; false\ncall isBadVersion(5)-&gt; true\ncall isBadVersion(4)-&gt; true\nThen 4 is the first bad version.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an array of integers citations where citations[i] is the number of citations a researcher received for their i<sup>th</sup> paper and citations is sorted in ascending order, return the researcher&#39;s h-index.\nAccording to the <a href="https://en.wikipedia.org/wiki/H-index" target="_blank">definition of h-index on Wikipedia</a>: The h-index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h times.\nYou must write an algorithm that runs in logarithmic time.<strong class="example">Example 1:\nInput: citations = [0,1,3,5,6]\nOutput: 3\nExplanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.\n<strong class="example">Example 2:\nInput: citations = [1,2,100]\nOutput: 2\nConstraints:\n<ul>\n\t<li>n == citations.length</li>\n\t<li>1 &lt;= n &lt;= 10<sup>5</sup></li>\n\t<li>0 &lt;= citations[i] &lt;= 1000</li>\n\t<li>citations is sorted in ascending order.</li>\n</ul>\n\n"test_case": [\n  [0,1,3,5,6]\n  [1,2,100]\n],\n"test_case_output": [\'3\', \'2\'],\n"test_case_explanation": [\n  "[0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an array of integers citations where citations[i] is the number of citations a researcher received for their i<sup>th</sup> paper, return the researcher&#39;s h-index.\nAccording to the <a href="https://en.wikipedia.org/wiki/H-index" target="_blank">definition of h-index on Wikipedia</a>: The h-index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h times.<strong class="example">Example 1:\nInput: citations = [3,0,6,1,5]\nOutput: 3\nExplanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.\n<strong class="example">Example 2:\nInput: citations = [1,3,1]\nOutput: 1\nConstraints:\n<ul>\n\t<li>n == citations.length</li>\n\t<li>1 &lt;= n &lt;= 5000</li>\n\t<li>0 &lt;= citations[i] &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  [3,0,6,1,5]\n  [1,3,1]\n],\n"test_case_output": [\'3\', \'1\'],\n"test_case_explanation": [\n  "[3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nConvert a non-negative integer num to its English words representation.<strong class="example">Example 1:\nInput: num = 123\nOutput: One Hundred Twenty Three\n<strong class="example">Example 2:\nInput: num = 12345\nOutput: Twelve Thousand Three Hundred Forty Five\n<strong class="example">Example 3:\nInput: num = 1234567\nOutput: One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\nConstraints:\n<ul>\n\t<li>0 &lt;= num &lt;= 2<sup>31</sup> - 1</li>\n</ul>\n\n"test_case": [\n  123\n  12345\n  1234567\n],\n"test_case_output": [\'One Hundred Twenty Three\', \'Twelve Thousand Three Hundred Forty Five\', \'One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nAn ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.\nGiven an integer n, return the n<sup>th</sup> ugly number.<strong class="example">Example 1:\nInput: n = 10\nOutput: 12\nExplanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.\n<strong class="example">Example 2:\nInput: n = 1\nOutput: 1\nExplanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 1690</li>\n</ul>\n\n"test_case": [\n  10\n  1\n],\n"test_case_output": [\'12\', \'1\'],\n"test_case_explanation": [\n  "[1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.\n"\n\n  "1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nAn ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.\nGiven an integer n, return true if n is an ugly number.<strong class="example">Example 1:\nInput: n = 6\nOutput: true\nExplanation: 6 = 2 &times; 3\n<strong class="example">Example 2:\nInput: n = 1\nOutput: true\nExplanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\n<strong class="example">Example 3:\nInput: n = 14\nOutput: false\nExplanation: 14 is not ugly since it includes the prime factor 7.\nConstraints:\n<ul>\n\t<li>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1</li>\n</ul>\n\n"test_case": [\n  6\n  1\n  14\n],\n"test_case_output": [\'true\', \'true\', \'false\'],\n"test_case_explanation": [\n  "6 = 2 &times; 3\n"\n\n  "1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\n"\n\n  "14 is not ugly since it includes the prime factor 7.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.\nYou must write analgorithm that runs in linear runtime complexity and usesonly constant extra space.<strong class="example">Example 1:\nInput: nums = [1,2,1,3,2,5]\nOutput: [3,5]\nExplanation:  [5, 3] is also a valid answer.\n<strong class="example">Example 2:\nInput: nums = [-1,0]\nOutput: [-1,0]\n<strong class="example">Example 3:\nInput: nums = [0,1]\nOutput: [1,0]\nConstraints:\n<ul>\n\t<li>2 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></li>\n\t<li>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</li>\n\t<li>Each integer in nums will appear twice, only two integers will appear once.</li>\n</ul>\n\n"test_case": [\n  [1,2,1,3,2,5]\n  [-1,0]\n  [0,1]\n],\n"test_case_output": [\'[3,5]\', \'[-1,0]\', \'[1,0]\'],\n"test_case_explanation": [\n  "[5, 3] is also a valid answer.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer num, repeatedly add all its digits until the result has only one digit, and return it.<strong class="example">Example 1:\nInput: num = 38\nOutput: 2\nExplanation: The process is\n38 --&gt; 3 + 8 --&gt; 11\n11 --&gt; 1 + 1 --&gt; 2 \nSince 2 has only one digit, return it.\n<strong class="example">Example 2:\nInput: num = 0\nOutput: 0\nConstraints:\n<ul>\n\t<li>0 &lt;= num &lt;= 2<sup>31</sup> - 1</li>\n</ul>Follow up: Could you do it without any loop/recursion in O(1) runtime?\n\n"test_case": [\n  38\n  0\n],\n"test_case_output": [\'2\', \'0\'],\n"test_case_explanation": [\n  "The process is\n38 --&gt; 3 + 8 --&gt; 11\n11 --&gt; 1 + 1 --&gt; 2 \nSince 2 has only one digit, return it.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the root of a binary tree, return all root-to-leaf paths in any order.\nA leaf is a node with no children.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/12/paths-tree.jpg" style="width: 207px; height: 293px;" />\nInput: root = [1,2,3,null,5]\nOutput: [1-&gt;2-&gt;5,1-&gt;3]\n<strong class="example">Example 2:\nInput: root = [1]\nOutput: [1]\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [1, 100].</li>\n\t<li>-100 &lt;= Node.val &lt;= 100</li>\n</ul>\n\n"test_case": [\n  [1,2,3,null,5]\n  [1]\n],\n"test_case_output": [\'[1-&gt;2-&gt;5,1-&gt;3]\', \'[1]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven two strings s and t, return true if t is an anagram of s, and false otherwise.\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.<strong class="example">Example 1:\nInput: s = "anagram", t = "nagaram"\nOutput: true\n<strong class="example">Example 2:\nInput: s = "rat", t = "car"\nOutput: false\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length, t.length &lt;= 5 * 10<sup>4</sup></li>\n\t<li>s and t consist of lowercase English letters.</li>\n</ul>Follow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?\n\n"test_case": [\n  "anagram"\n"nagaram"\n  "rat"\n"car"\n],\n"test_case_output": [\'true\', \'false\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a string expression of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. You may return the answer in any order.\nThe test cases are generated such that the output values fit in a 32-bit integer and the number of different results does not exceed 10<sup>4</sup>.<strong class="example">Example 1:\nInput: expression = 2-1-1\nOutput: [0,2]\nExplanation:\n((2-1)-1) = 0 \n(2-(1-1)) = 2\n<strong class="example">Example 2:\nInput: expression = 2*3-4*5\nOutput: [-34,-14,-10,-10,10]\nExplanation:\n(2*(3-(4*5))) = -34 \n((2*3)-(4*5)) = -14 \n((2*(3-4))*5) = -10 \n(2*((3-4)*5)) = -10 \n(((2*3)-4)*5) = 10\nConstraints:\n<ul>\n\t<li>1 &lt;= expression.length &lt;= 20</li>\n\t<li>expression consists of digits and the operator &#39;+&#39;, &#39;-&#39;, and &#39;*&#39;.</li>\n\t<li>All the integer values in the input expression are in the range [0, 99].</li>\n</ul>\n\n"test_case": [\n  "2-1-1"\n  "2*3-4*5"\n],\n"test_case_output": [\'[0,2]\', \'[-34,-14,-10,-10,10]\'],\n"test_case_explanation": [\n  "((2-1)-1) = 0 \n(2-(1-1)) = 2\n"\n\n  "(2*(3-(4*5))) = -34 \n((2*3)-(4*5)) = -14 \n((2*(3-4))*5) = -10 \n(2*((3-4)*5)) = -10 \n(((2*3)-4)*5) = 10\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nWrite an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:\n<ul>\n\t<li>Integers in each row are sorted in ascending from left to right.</li>\n\t<li>Integers in each column are sorted in ascending from top to bottom.</li>\n</ul><strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/11/24/searchgrid2.jpg" style="width: 300px; height: 300px;" />\nInput: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5\nOutput: true\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/11/24/searchgrid.jpg" style="width: 300px; height: 300px;" />\nInput: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20\nOutput: false\nConstraints:\n<ul>\n\t<li>m == matrix.length</li>\n\t<li>n == matrix[i].length</li>\n\t<li>1 &lt;= n, m &lt;= 300</li>\n\t<li>-10<sup>9</sup> &lt;= matrix[i][j] &lt;= 10<sup>9</sup></li>\n\t<li>All the integers in each row are sorted in ascending order.</li>\n\t<li>All the integers in each column are sorted in ascending order.</li>\n\t<li>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></li>\n</ul>\n\n"test_case": [\n  [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]]\n5\n  [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]]\n20\n],\n"test_case_output": [\'true\', \'false\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an array of integersnums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.\nReturn the max sliding window.<strong class="example">Example 1:\nInput: nums = [1,3,-1,-3,5,3,6,7], k = 3\nOutput: [3,3,5,5,6,7]\nExplanation: \nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n<strong class="example">Example 2:\nInput: nums = [1], k = 1\nOutput: [1]\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>5</sup></li>\n\t<li>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></li>\n\t<li>1 &lt;= k &lt;= nums.length</li>\n</ul>\n\n"test_case": [\n  [1,3,-1,-3,5,3,6,7]\n3\n  [1]\n1\n],\n"test_case_output": [\'[3,3,5,5,6,7]\', \'[1]\'],\n"test_case_explanation": [\n  "Window position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\nYou must write an algorithm that runs inO(n)time and without using the division operation.<strong class="example">Example 1:\nInput: nums = [1,2,3,4]\nOutput: [24,12,8,6]\n<strong class="example">Example 2:\nInput: nums = [-1,1,0,-3,3]\nOutput: [0,0,9,0,0]\nConstraints:\n<ul>\n\t<li>2 &lt;= nums.length &lt;= 10<sup>5</sup></li>\n\t<li>-30 &lt;= nums[i] &lt;= 30</li>\n\t<li>The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.</li>\n</ul>Follow up:Can you solve the problem in O(1)extraspace complexity? (The output array does not count as extra space for space complexity analysis.)\n\n"test_case": [\n  [1,2,3,4]\n  [-1,1,0,-3,3]\n],\n"test_case_output": [\'[24,12,8,6]\', \'[0,0,9,0,0]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThere is a singly-linked list head and we want to delete a node node in it.\nYou are given the node to be deleted node. You will not be given access to the first node of head.\nAll the values of the linked list are unique, and it is guaranteed that the given node node is not the last node in the linked list.\nDelete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean:\n<ul>\n\t<li>The value of the given node should not exist in the linked list.</li>\n\t<li>The number of nodes in the linked list should decrease by one.</li>\n\t<li>All the values before node should be in the same order.</li>\n\t<li>All the values after node should be in the same order.</li>\n</ul>\nCustom testing:\n<ul>\n\t<li>For the input, you should provide the entire linked list head and the node to be given node. node should not be the last node of the list and should be an actual node in the list.</li>\n\t<li>We will build the linked list and pass the node to your function.</li>\n\t<li>The output will be the entire list after calling your function.</li>\n</ul><strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/09/01/node1.jpg" style="width: 400px; height: 286px;" />\nInput: head = [4,5,1,9], node = 5\nOutput: [4,1,9]\nExplanation: You are given the second node with value 5, the linked list should become 4 -&gt; 1 -&gt; 9 after calling your function.\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/09/01/node2.jpg" style="width: 400px; height: 315px;" />\nInput: head = [4,5,1,9], node = 1\nOutput: [4,5,9]\nExplanation: You are given the third node with value 1, the linked list should become 4 -&gt; 5 -&gt; 9 after calling your function.\nConstraints:\n<ul>\n\t<li>The number of the nodes in the given list is in the range [2, 1000].</li>\n\t<li>-1000 &lt;= Node.val &lt;= 1000</li>\n\t<li>The value of each node in the list is unique.</li>\n\t<li>The node to be deleted is in the list and is not a tail node.</li>\n</ul>\n\n"test_case": [\n  [4,5,1,9]\n5\n  [4,5,1,9]\n1\n],\n"test_case_output": [\'[4,1,9]\', \'[4,5,9]\'],\n"test_case_explanation": [\n  "You are given the second node with value 5, the linked list should become 4 -&gt; 1 -&gt; 9 after calling your function.\n"\n\n  "You are given the third node with value 1, the linked list should become 4 -&gt; 5 -&gt; 9 after calling your function.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.\nAccording to the <a href="https://en.wikipedia.org/wiki/Lowest_common_ancestor" target="_blank">definition of LCA on Wikipedia</a>: &ldquo;The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).&rdquo;<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png" style="width: 200px; height: 190px;" />\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\nOutput: 3\nExplanation: The LCA of nodes 5 and 1 is 3.\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png" style="width: 200px; height: 190px;" />\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\nOutput: 5\nExplanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.\n<strong class="example">Example 3:\nInput: root = [1,2], p = 1, q = 2\nOutput: 1\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [2, 10<sup>5</sup>].</li>\n\t<li>-10<sup>9</sup> &lt;= Node.val &lt;= 10<sup>9</sup></li>\n\t<li>All Node.val are unique.</li>\n\t<li>p != q</li>\n\t<li>p and q will exist in the tree.</li>\n</ul>\n\n"test_case": [\n  [3,5,1,6,2,0,8,null,null,7,4]\n5\n1\n  [3,5,1,6,2,0,8,null,null,7,4]\n5\n4\n  [1,2]\n1\n2\n],\n"test_case_output": [\'3\', \'5\', \'1\'],\n"test_case_explanation": [\n  "The LCA of nodes 5 and 1 is 3.\n"\n\n  "The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.\nAccording to the <a href="https://en.wikipedia.org/wiki/Lowest_common_ancestor" target="_blank">definition of LCA on Wikipedia</a>: &ldquo;The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).&rdquo;<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png" style="width: 200px; height: 190px;" />\nInput: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\nOutput: 6\nExplanation: The LCA of nodes 2 and 8 is 6.\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png" style="width: 200px; height: 190px;" />\nInput: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\nOutput: 2\nExplanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.\n<strong class="example">Example 3:\nInput: root = [2,1], p = 2, q = 1\nOutput: 2\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [2, 10<sup>5</sup>].</li>\n\t<li>-10<sup>9</sup> &lt;= Node.val &lt;= 10<sup>9</sup></li>\n\t<li>All Node.val are unique.</li>\n\t<li>p != q</li>\n\t<li>p and q will exist in the BST.</li>\n</ul>\n\n"test_case": [\n  [6,2,8,0,4,7,9,null,null,3,5]\n2\n8\n  [6,2,8,0,4,7,9,null,null,3,5]\n2\n4\n  [2,1]\n2\n1\n],\n"test_case_output": [\'6\', \'2\', \'2\'],\n"test_case_explanation": [\n  "The LCA of nodes 2 and 8 is 6.\n"\n\n  "The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the head of a singly linked list, return true if it is a <span data-keyword="palindrome-sequence">palindrome</span> or false otherwise.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/03/pal1linked-list.jpg" style="width: 422px; height: 62px;" />\nInput: head = [1,2,2,1]\nOutput: true\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/03/pal2linked-list.jpg" style="width: 182px; height: 62px;" />\nInput: head = [1,2]\nOutput: false\nConstraints:\n<ul>\n\t<li>The number of nodes in the list is in the range [1, 10<sup>5</sup>].</li>\n\t<li>0 &lt;= Node.val &lt;= 9</li>\n</ul>Follow up: Could you do it in O(n) time and O(1) space?\n"test_case": [\n  [1,2,2,1]\n  [1,2]\n],\n"test_case_output": [\'true\', \'false\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.<strong class="example">Example 1:\nInput: n = 13\nOutput: 6\n<strong class="example">Example 2:\nInput: n = 0\nOutput: 0\nConstraints:\n<ul>\n\t<li>0 &lt;= n &lt;= 10<sup>9</sup></li>\n</ul>\n\n"test_case": [\n  13\n  0\n],\n"test_case_output": [\'6\', \'0\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nImplement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).\nImplement the MyQueue class:\n<ul>\n\t<li>void push(int x) Pushes element x to the back of the queue.</li>\n\t<li>int pop() Removes the element from the front of the queue and returns it.</li>\n\t<li>int peek() Returns the element at the front of the queue.</li>\n\t<li>boolean empty() Returns true if the queue is empty, false otherwise.</li>\n</ul>\nNotes:\n<ul>\n\t<li>You must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.</li>\n\t<li>Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack&#39;s standard operations.</li>\n</ul><strong class="example">Example 1:\nInput\n[MyQueue, push, push, peek, pop, empty]\n[[], [1], [2], [], [], []]\nOutput\n[null, null, null, 1, 1, false]\nExplanation\nMyQueue myQueue = new MyQueue();\nmyQueue.push(1); // queue is: [1]\nmyQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\nmyQueue.peek(); // return 1\nmyQueue.pop(); // return 1, queue is [2]\nmyQueue.empty(); // return false\nConstraints:\n<ul>\n\t<li>1 &lt;= x &lt;= 9</li>\n\t<li>At most 100calls will be made to push, pop, peek, and empty.</li>\n\t<li>All the calls to pop and peek are valid.</li>\n</ul>Follow-up: Can you implement the queue such that each operation is <a href="https://en.wikipedia.org/wiki/Amortized_analysis" target="_blank">amortized</a> O(1) time complexity? In other words, performing n operations will take overall O(n) time even if one of those operations may take longer.\n\n"test_case": [\n  ["MyQueue","push","push","peek","pop","empty"]\n[[],[1],[2],[],[],[]]\n],\n"test_case_output": [],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer n, return true if it is a power of two. Otherwise, return false.\nAn integer n is a power of two, if there exists an integer x such that n == 2<sup>x</sup>.<strong class="example">Example 1:\nInput: n = 1\nOutput: true\nExplanation: 2<sup>0</sup> = 1\n<strong class="example">Example 2:\nInput: n = 16\nOutput: true\nExplanation: 2<sup>4</sup> = 16\n<strong class="example">Example 3:\nInput: n = 3\nOutput: false\nConstraints:\n<ul>\n\t<li>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1</li>\n</ul>Follow up: Could you solve it without loops/recursion?\n"test_case": [\n  1\n  16\n  3\n],\n"test_case_output": [\'true\', \'true\', \'false\'],\n"test_case_explanation": [\n  "2"\n\n  "2"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the root of a binary search tree, and an integer k, return the k<sup>th</sup> smallest value (1-indexed) of all the values of the nodes in the tree.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/28/kthtree1.jpg" style="width: 212px; height: 301px;" />\nInput: root = [3,1,4,null,2], k = 1\nOutput: 1\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/28/kthtree2.jpg" style="width: 382px; height: 302px;" />\nInput: root = [5,3,6,2,4,null,null,1], k = 3\nOutput: 3\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is n.</li>\n\t<li>1 &lt;= k &lt;= n &lt;= 10<sup>4</sup></li>\n\t<li>0 &lt;= Node.val &lt;= 10<sup>4</sup></li>\n</ul>Follow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?\n\n"test_case": [\n  [3,1,4,null,2]\n1\n  [5,3,6,2,4,null,null,1]\n3\n],\n"test_case_output": [\'1\', \'3\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array of size n, find all elements that appear more than &lfloor; n/3 &rfloor; times.<strong class="example">Example 1:\nInput: nums = [3,2,3]\nOutput: [3]\n<strong class="example">Example 2:\nInput: nums = [1]\nOutput: [1]\n<strong class="example">Example 3:\nInput: nums = [1,2]\nOutput: [1,2]\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></li>\n\t<li>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></li>\n</ul>Follow up: Could you solve the problem in linear time and in O(1) space?\n\n"test_case": [\n  [3,2,3]\n  [1]\n  [1,2]\n],\n"test_case_output": [\'[3]\', \'[1]\', \'[1,2]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a sorted unique integer array nums.\nA range [a,b] is the set of all integers from a to b (inclusive).\nReturn the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of nums is covered by exactly one of the ranges, and there is no integer x such that x is in one of the ranges but not in nums.\nEach range [a,b] in the list should be output as:\n<ul>\n\t<li>a-&gt;b if a != b</li>\n\t<li>a if a == b</li>\n</ul><strong class="example">Example 1:\nInput: nums = [0,1,2,4,5,7]\nOutput: [0-&gt;2,4-&gt;5,7]\nExplanation: The ranges are:\n[0,2] --&gt; 0-&gt;2\n[4,5] --&gt; 4-&gt;5\n[7,7] --&gt; 7\n<strong class="example">Example 2:\nInput: nums = [0,2,3,4,6,8,9]\nOutput: [0,2-&gt;4,6,8-&gt;9]\nExplanation: The ranges are:\n[0,0] --&gt; 0\n[2,4] --&gt; 2-&gt;4\n[6,6] --&gt; 6\n[8,9] --&gt; 8-&gt;9\nConstraints:\n<ul>\n\t<li>0 &lt;= nums.length &lt;= 20</li>\n\t<li>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</li>\n\t<li>All the values of nums are unique.</li>\n\t<li>nums is sorted in ascending order.</li>\n</ul>\n\n"test_case": [\n  [0,1,2,4,5,7]\n  [0,2,3,4,6,8,9]\n],\n"test_case_output": [\'[0-&gt;2,4-&gt;5,7]\', \'[0,2-&gt;4,6,8-&gt;9]\'],\n"test_case_explanation": [\n  "The ranges are:\n[0,2] --&gt; 0-&gt;2\n[4,5] --&gt; 4-&gt;5\n[7,7] --&gt; 7\n"\n\n  "The ranges are:\n[0,0] --&gt; 0\n[2,4] --&gt; 2-&gt;4\n[6,6] --&gt; 6\n[8,9] --&gt; 8-&gt;9\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a string s which represents an expression, evaluate this expression and return its value.\nThe integer division should truncate toward zero.\nYou may assume that the given expression is always valid. All intermediate results will be in the range of [-2<sup>31</sup>, 2<sup>31</sup> - 1].\nNote: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().<strong class="example">Example 1:\nInput: s = "3+2*2"\nOutput: 7\n<strong class="example">Example 2:\nInput: s = " 3/2 "\nOutput: 1\n<strong class="example">Example 3:\nInput: s = " 3+5 / 2 "\nOutput: 5\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></li>\n\t<li>s consists of integers and operators (&#39;+&#39;, &#39;-&#39;, &#39;*&#39;, &#39;/&#39;) separated by some number of spaces.</li>\n\t<li>s represents a valid expression.</li>\n\t<li>All the integers in the expression are non-negative integers in the range [0, 2<sup>31</sup> - 1].</li>\n\t<li>The answer is guaranteed to fit in a 32-bit integer.</li>\n</ul>\n\n"test_case": [\n  "3+2*2"\n  " 3/2 "\n  " 3+5 / 2 "\n],\n"test_case_output": [\'7\', \'1\', \'5\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the root of a binary tree, invert the tree, and return its root.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/14/invert1-tree.jpg" style="width: 500px; height: 165px;" />\nInput: root = [4,2,7,1,3,6,9]\nOutput: [4,7,2,9,6,3,1]\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/14/invert2-tree.jpg" style="width: 500px; height: 120px;" />\nInput: root = [2,1,3]\nOutput: [2,3,1]\n<strong class="example">Example 3:\nInput: root = []\nOutput: []\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [0, 100].</li>\n\t<li>-100 &lt;= Node.val &lt;= 100</li>\n</ul>\n\n"test_case": [\n  [4,2,7,1,3,6,9]\n  [2,1,3]\n  []\n],\n"test_case_output": [\'[4,7,2,9,6,3,1]\', \'[2,3,1]\', \'[]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nImplement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).\nImplement the MyStack class:\n<ul>\n\t<li>void push(int x) Pushes element x to the top of the stack.</li>\n\t<li>int pop() Removes the element on the top of the stack and returns it.</li>\n\t<li>int top() Returns the element on the top of the stack.</li>\n\t<li>boolean empty() Returns true if the stack is empty, false otherwise.</li>\n</ul>\nNotes:\n<ul>\n\t<li>You must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid.</li>\n\t<li>Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue&#39;s standard operations.</li>\n</ul><strong class="example">Example 1:\nInput\n[MyStack, push, push, top, pop, empty]\n[[], [1], [2], [], [], []]\nOutput\n[null, null, null, 2, 2, false]\nExplanation\nMyStack myStack = new MyStack();\nmyStack.push(1);\nmyStack.push(2);\nmyStack.top(); // return 2\nmyStack.pop(); // return 2\nmyStack.empty(); // return False\nConstraints:\n<ul>\n\t<li>1 &lt;= x &lt;= 9</li>\n\t<li>At most 100 calls will be made to push, pop, top, and empty.</li>\n\t<li>All the calls to pop and top are valid.</li>\n</ul>Follow-up: Can you implement the stack using only one queue?\n\n"test_case": [\n  ["MyStack","push","push","top","pop","empty"]\n[[],[1],[2],[],[],[]]\n],\n"test_case_output": [],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a string s representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation.\nNote: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().<strong class="example">Example 1:\nInput: s = 1 + 1\nOutput: 2\n<strong class="example">Example 2:\nInput: s =  2-1 + 2 \nOutput: 3\n<strong class="example">Example 3:\nInput: s = (1+(4+5+2)-3)+(6+8)\nOutput: 23\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></li>\n\t<li>s consists of digits, &#39;+&#39;, &#39;-&#39;, &#39;(&#39;, &#39;)&#39;, and &#39; &#39;.</li>\n\t<li>s represents a valid expression.</li>\n\t<li>&#39;+&#39; is not used as a unary operation (i.e., +1 and +(2 + 3) is invalid).</li>\n\t<li>&#39;-&#39; could be used as a unary operation (i.e., -1 and -(2 + 3) is valid).</li>\n\t<li>There will be no two consecutive operators in the input.</li>\n\t<li>Every number and running calculation will fit in a signed 32-bit integer.</li>\n</ul>\n\n"test_case": [\n  "1 + 1"\n  " 2-1 + 2 "\n  "(1+(4+5+2)-3)+(6+8)"\n],\n"test_case_output": [\'2\', \'3\', \'23\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the coordinates of two rectilinear rectangles in a 2D plane, return the total area covered by the two rectangles.\nThe first rectangle is defined by its bottom-left corner (ax1, ay1) and its top-right corner (ax2, ay2).\nThe second rectangle is defined by its bottom-left corner (bx1, by1) and its top-right corner (bx2, by2).<strong class="example">Example 1:\n<img alt="Rectangle Area" src="https://assets.leetcode.com/uploads/2021/05/08/rectangle-plane.png" style="width: 700px; height: 365px;" />\nInput: ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2\nOutput: 45\n<strong class="example">Example 2:\nInput: ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2\nOutput: 16\nConstraints:\n<ul>\n\t<li>-10<sup>4</sup> &lt;= ax1 &lt;= ax2 &lt;= 10<sup>4</sup></li>\n\t<li>-10<sup>4</sup> &lt;= ay1 &lt;= ay2 &lt;= 10<sup>4</sup></li>\n\t<li>-10<sup>4</sup> &lt;= bx1 &lt;= bx2 &lt;= 10<sup>4</sup></li>\n\t<li>-10<sup>4</sup> &lt;= by1 &lt;= by2 &lt;= 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  -3\n0\n3\n4\n0\n-1\n9\n2\n  -2\n-2\n2\n2\n-2\n-2\n2\n2\n],\n"test_case_output": [\'45\', \'16\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the root of a complete binary tree, return the number of the nodes in the tree.\nAccording to <a href="http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees" target="_blank">Wikipedia</a>, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2<sup>h</sup> nodes inclusive at the last level h.\nDesign an algorithm that runs in less than<code data-stringify-type="code">O(n)time complexity.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/14/complete.jpg" style="width: 372px; height: 302px;" />\nInput: root = [1,2,3,4,5,6]\nOutput: 6\n<strong class="example">Example 2:\nInput: root = []\nOutput: 0\n<strong class="example">Example 3:\nInput: root = [1]\nOutput: 1\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [0, 5 * 10<sup>4</sup>].</li>\n\t<li>0 &lt;= Node.val &lt;= 5 * 10<sup>4</sup></li>\n\t<li>The tree is guaranteed to be complete.</li>\n</ul>\n\n"test_case": [\n  [1,2,3,4,5,6]\n  []\n  [1]\n],\n"test_case_output": [\'6\', \'0\', \'1\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an integer array nums and two integers indexDiff and valueDiff.\nFind a pair of indices (i, j) such that:\n<ul>\n\t<li>i != j,</li>\n\t<li>abs(i - j) &lt;= indexDiff.</li>\n\t<li>abs(nums[i] - nums[j]) &lt;= valueDiff, and</li>\n</ul>\nReturn true if such pair exists or false otherwise.<strong class="example">Example 1:\nInput: nums = [1,2,3,1], indexDiff = 3, valueDiff = 0\nOutput: true\nExplanation: We can choose (i, j) = (0, 3).\nWe satisfy the three conditions:\ni != j --&gt; 0 != 3\nabs(i - j) &lt;= indexDiff --&gt; abs(0 - 3) &lt;= 3\nabs(nums[i] - nums[j]) &lt;= valueDiff --&gt; abs(1 - 1) &lt;= 0\n<strong class="example">Example 2:\nInput: nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3\nOutput: false\nExplanation: After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false.\nConstraints:\n<ul>\n\t<li>2 &lt;= nums.length &lt;= 10<sup>5</sup></li>\n\t<li>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></li>\n\t<li>1 &lt;= indexDiff &lt;= nums.length</li>\n\t<li>0 &lt;= valueDiff &lt;= 10<sup>9</sup></li>\n</ul>\n\n"test_case": [\n  [1,2,3,1]\n3\n0\n  [1,5,9,1,5,9]\n2\n3\n],\n"test_case_output": [\'true\', \'false\'],\n"test_case_explanation": [\n  "We can choose (i, j) = (0, 3).\nWe satisfy the three conditions:\ni != j --&gt; 0 != 3\nabs(i - j) &lt;= indexDiff --&gt; abs(0 - 3) &lt;= 3\nabs(nums[i] - nums[j]) &lt;= valueDiff --&gt; abs(1 - 1) &lt;= 0\n"\n\n  "After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) &lt;= k.<strong class="example">Example 1:\nInput: nums = [1,2,3,1], k = 3\nOutput: true\n<strong class="example">Example 2:\nInput: nums = [1,0,1,1], k = 1\nOutput: true\n<strong class="example">Example 3:\nInput: nums = [1,2,3,1,2,3], k = 2\nOutput: false\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>5</sup></li>\n\t<li>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></li>\n\t<li>0 &lt;= k &lt;= 10<sup>5</sup></li>\n</ul>\n\n"test_case": [\n  [1,2,3,1]\n3\n  [1,0,1,1]\n1\n  [1,2,3,1,2,3]\n2\n],\n"test_case_output": [\'true\', \'true\', \'false\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nA city&#39;s skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.\nThe geometric information of each building is given in the array buildings where buildings[i] = [left<sub>i</sub>, right<sub>i</sub>, height<sub>i</sub>]:\n<ul>\n\t<li>left<sub>i</sub> is the x coordinate of the left edge of the i<sup>th</sup> building.</li>\n\t<li>right<sub>i</sub> is the x coordinate of the right edge of the i<sup>th</sup> building.</li>\n\t<li>height<sub>i</sub> is the height of the i<sup>th</sup> building.</li>\n</ul>\nYou may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.\nThe skyline should be represented as a list of key points sorted by their x-coordinate in the form [[x<sub>1</sub>,y<sub>1</sub>],[x<sub>2</sub>,y<sub>2</sub>],...]. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline&#39;s termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline&#39;s contour.\nNote: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, [...,[2 3],[4 5],[7 5],[11 5],[12 7],...] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [...,[2 3],[4 5],[12 7],...]<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/12/01/merged.jpg" style="width: 800px; height: 331px;" />\nInput: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\nOutput: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\nExplanation:\nFigure A shows the buildings of the input.\nFigure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.\n<strong class="example">Example 2:\nInput: buildings = [[0,2,3],[2,5,3]]\nOutput: [[0,3],[5,0]]\nConstraints:\n<ul>\n\t<li>1 &lt;= buildings.length &lt;= 10<sup>4</sup></li>\n\t<li>0 &lt;= left<sub>i</sub> &lt; right<sub>i</sub> &lt;= 2<sup>31</sup> - 1</li>\n\t<li>1 &lt;= height<sub>i</sub> &lt;= 2<sup>31</sup> - 1</li>\n\t<li>buildings is sorted by left<sub>i</sub> innon-decreasing order.</li>\n</ul>\n\n"test_case": [\n  [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\n  [[0,2,3],[2,5,3]]\n],\n"test_case_output": [\'[[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\', \'[[0,3],[5,0]]\'],\n"test_case_explanation": [\n  "Figure A shows the buildings of the input.\nFigure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.<strong class="example">Example 1:\nInput: nums = [1,2,3,1]\nOutput: true\n<strong class="example">Example 2:\nInput: nums = [1,2,3,4]\nOutput: false\n<strong class="example">Example 3:\nInput: nums = [1,1,1,3,3,4,3,2,4,2]\nOutput: true\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>5</sup></li>\n\t<li>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></li>\n</ul>\n\n"test_case": [\n  [1,2,3,1]\n  [1,2,3,4]\n  [1,1,1,3,3,4,3,2,4,2]\n],\n"test_case_output": [\'true\', \'false\', \'true\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nFind all valid combinations of k numbers that sum up to n such that the following conditions are true:\n<ul>\n\t<li>Only numbers 1 through 9 are used.</li>\n\t<li>Each number is used at most once.</li>\n</ul>\nReturn a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.<strong class="example">Example 1:\nInput: k = 3, n = 7\nOutput: [[1,2,4]]\nExplanation:\n1 + 2 + 4 = 7\nThere are no other valid combinations.\n<strong class="example">Example 2:\nInput: k = 3, n = 9\nOutput: [[1,2,6],[1,3,5],[2,3,4]]\nExplanation:\n1 + 2 + 6 = 9\n1 + 3 + 5 = 9\n2 + 3 + 4 = 9\nThere are no other valid combinations.\n<strong class="example">Example 3:\nInput: k = 4, n = 1\nOutput: []\nExplanation: There are no valid combinations.\nUsing 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 &gt; 1, there are no valid combination.\nConstraints:\n<ul>\n\t<li>2 &lt;= k &lt;= 9</li>\n\t<li>1 &lt;= n &lt;= 60</li>\n</ul>\n\n"test_case": [\n  3\n7\n  3\n9\n  4\n1\n],\n"test_case_output": [\'[[1,2,4]]\', \'[[1,2,6],[1,3,5],[2,3,4]]\', \'[]\'],\n"test_case_explanation": [\n  "1 + 2 + 4 = 7\nThere are no other valid combinations.\n"\n\n  "1 + 2 + 6 = 9\n1 + 3 + 5 = 9\n2 + 3 + 4 = 9\nThere are no other valid combinations.\n"\n\n  "There are no valid combinations.\nUsing 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 &gt; 1, there are no valid combination.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums and an integer k, return the k<sup>th</sup> largest element in the array.\nNote that it is the k<sup>th</sup> largest element in the sorted order, not the k<sup>th</sup> distinct element.\nCan you solve it without sorting?<strong class="example">Example 1:\nInput: nums = [3,2,1,5,6,4], k = 2\nOutput: 5\n<strong class="example">Example 2:\nInput: nums = [3,2,3,1,2,4,5,5,6], k = 4\nOutput: 4\nConstraints:\n<ul>\n\t<li>1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup></li>\n\t<li>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  [3,2,1,5,6,4]\n2\n  [3,2,3,1,2,4,5,5,6]\n4\n],\n"test_case_output": [\'5\', \'4\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a string s. You can convert s to a <span data-keyword="palindrome-string">palindrome</span> by adding characters in front of it.\nReturn the shortest palindrome you can find by performing this transformation.<strong class="example">Example 1:\nInput: s = "aacecaaa"\nOutput: "aaacecaaa"\n<strong class="example">Example 2:\nInput: s = "abcd"\nOutput: "dcbabcd"\nConstraints:\n<ul>\n\t<li>0 &lt;= s.length &lt;= 5 * 10<sup>4</sup></li>\n\t<li>s consists of lowercase English letters only.</li>\n</ul>\n\n"test_case": [\n  "aacecaaa"\n  "abcd"\n],\n"test_case_output": [\'"aaacecaaa"\', \'"dcbabcd"\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, andit will automatically contact the police if two adjacent houses were broken into on the same night.\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.<strong class="example">Example 1:\nInput: nums = [2,3,2]\nOutput: 3\nExplanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.\n<strong class="example">Example 2:\nInput: nums = [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n<strong class="example">Example 3:\nInput: nums = [1,2,3]\nOutput: 3\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 100</li>\n\t<li>0 &lt;= nums[i] &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  [2,3,2]\n  [1,2,3,1]\n  [1,2,3]\n],\n"test_case_output": [\'3\', \'4\', \'3\'],\n"test_case_explanation": [\n  "You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.\n"\n\n  "Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nDesign a data structure that supports adding new words and finding if a string matches any previously added string.\nImplement the WordDictionary class:\n<ul>\n\t<li>WordDictionary()Initializes the object.</li>\n\t<li>void addWord(word) Adds word to the data structure, it can be matched later.</li>\n\t<li>bool search(word)Returns true if there is any string in the data structure that matches wordor false otherwise. word may contain dots &#39;.&#39; where dots can be matched with any letter.</li>\n</ul><strong class="example">Example:\nInput\n[WordDictionary,addWord,addWord,addWord,search,search,search,search]\n[[],[bad],[dad],[mad],[pad],[bad],[.ad],[b..]]\nOutput\n[null,null,null,null,false,true,true,true]\nExplanation\nWordDictionary wordDictionary = new WordDictionary();\nwordDictionary.addWord(bad);\nwordDictionary.addWord(dad);\nwordDictionary.addWord(mad);\nwordDictionary.search(pad); // return False\nwordDictionary.search(bad); // return True\nwordDictionary.search(.ad); // return True\nwordDictionary.search(b..); // return True\nConstraints:\n<ul>\n\t<li>1 &lt;= word.length &lt;= 25</li>\n\t<li>word in addWord consists of lowercase English letters.</li>\n\t<li>word in search consist of &#39;.&#39; or lowercase English letters.</li>\n\t<li>There will be at most 2 dots in word for search queries.</li>\n\t<li>At most 10<sup>4</sup> calls will be made to addWord and search.</li>\n</ul>\n\n"test_case": [\n  ["WordDictionary","addWord","addWord","addWord","search","search","search","search"]\n[[],["bad"],["dad"],["mad"],["pad"],["bad"],[".ad"],["b.."]]\n],\n"test_case_output": [],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThere are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [a<sub>i</sub>, b<sub>i</sub>] indicates that you must take course b<sub>i</sub> first if you want to take course a<sub>i</sub>.\n<ul>\n\t<li>For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.</li>\n</ul>\nReturn the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.<strong class="example">Example 1:\nInput: numCourses = 2, prerequisites = [[1,0]]\nOutput: [0,1]\nExplanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].\n<strong class="example">Example 2:\nInput: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]\nOutput: [0,2,1,3]\nExplanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.\nSo one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].\n<strong class="example">Example 3:\nInput: numCourses = 1, prerequisites = []\nOutput: [0]\nConstraints:\n<ul>\n\t<li>1 &lt;= numCourses &lt;= 2000</li>\n\t<li>0 &lt;= prerequisites.length &lt;= numCourses * (numCourses - 1)</li>\n\t<li>prerequisites[i].length == 2</li>\n\t<li>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; numCourses</li>\n\t<li>a<sub>i</sub> != b<sub>i</sub></li>\n\t<li>All the pairs [a<sub>i</sub>, b<sub>i</sub>] are distinct.</li>\n</ul>\n\n"test_case": [\n  2\n[[1,0]]\n  4\n[[1,0],[2,0],[3,1],[3,2]]\n  1\n[]\n],\n"test_case_output": [\'[0,1]\', \'[0,2,1,3]\', \'[0]\'],\n"test_case_explanation": [\n  "There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].\n"\n\n  "There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.\nSo one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an array of positive integers nums and a positive integer target, return the minimal length of a <span data-keyword="subarray-nonempty">subarray</span> whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.<strong class="example">Example 1:\nInput: target = 7, nums = [2,3,1,2,4,3]\nOutput: 2\nExplanation: The subarray [4,3] has the minimal length under the problem constraint.\n<strong class="example">Example 2:\nInput: target = 4, nums = [1,4,4]\nOutput: 1\n<strong class="example">Example 3:\nInput: target = 11, nums = [1,1,1,1,1,1,1,1]\nOutput: 0\nConstraints:\n<ul>\n\t<li>1 &lt;= target &lt;= 10<sup>9</sup></li>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>5</sup></li>\n\t<li>1 &lt;= nums[i] &lt;= 10<sup>4</sup></li>\n</ul>Follow up: If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log(n)).\n"test_case": [\n  7\n[2,3,1,2,4,3]\n  4\n[1,4,4]\n  11\n[1,1,1,1,1,1,1,1]\n],\n"test_case_output": [\'2\', \'1\', \'0\'],\n"test_case_explanation": [\n  "The subarray [4,3] has the minimal length under the problem constraint.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nA <a href="https://en.wikipedia.org/wiki/Trie" target="_blank">trie</a> (pronounced as try) or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\nImplement the Trie class:\n<ul>\n\t<li>Trie() Initializes the trie object.</li>\n\t<li>void insert(String word) Inserts the string word into the trie.</li>\n\t<li>boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.</li>\n\t<li>boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.</li>\n</ul><strong class="example">Example 1:\nInput\n[Trie, insert, search, search, startsWith, insert, search]\n[[], [apple], [apple], [app], [app], [app], [app]]\nOutput\n[null, null, true, false, true, null, true]\nExplanation\nTrie trie = new Trie();\ntrie.insert(apple);\ntrie.search(apple);   // return True\ntrie.search(app);     // return False\ntrie.startsWith(app); // return True\ntrie.insert(app);\ntrie.search(app);     // return True\nConstraints:\n<ul>\n\t<li>1 &lt;= word.length, prefix.length &lt;= 2000</li>\n\t<li>word and prefix consist only of lowercase English letters.</li>\n\t<li>At most 3 * 10<sup>4</sup> calls in total will be made to insert, search, and startsWith.</li>\n</ul>\n\n"test_case": [\n  ["Trie","insert","search","search","startsWith","insert","search"]\n[[],["apple"],["apple"],["app"],["app"],["app"],["app"]]\n],\n"test_case_output": [],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThere are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [a<sub>i</sub>, b<sub>i</sub>] indicates that you must take course b<sub>i</sub> first if you want to take course a<sub>i</sub>.\n<ul>\n\t<li>For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.</li>\n</ul>\nReturn true if you can finish all courses. Otherwise, return false.<strong class="example">Example 1:\nInput: numCourses = 2, prerequisites = [[1,0]]\nOutput: true\nExplanation: There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0. So it is possible.\n<strong class="example">Example 2:\nInput: numCourses = 2, prerequisites = [[1,0],[0,1]]\nOutput: false\nExplanation: There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.\nConstraints:\n<ul>\n\t<li>1 &lt;= numCourses &lt;= 2000</li>\n\t<li>0 &lt;= prerequisites.length &lt;= 5000</li>\n\t<li>prerequisites[i].length == 2</li>\n\t<li>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; numCourses</li>\n\t<li>All the pairs prerequisites[i] are unique.</li>\n</ul>\n\n"test_case": [\n  2\n[[1,0]]\n  2\n[[1,0],[0,1]]\n],\n"test_case_output": [\'true\', \'false\'],\n"test_case_explanation": [\n  "There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0. So it is possible.\n"\n\n  "There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the head of a singly linked list, reverse the list, and return the reversed list.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg" style="width: 542px; height: 222px;" />\nInput: head = [1,2,3,4,5]\nOutput: [5,4,3,2,1]\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg" style="width: 182px; height: 222px;" />\nInput: head = [1,2]\nOutput: [2,1]\n<strong class="example">Example 3:\nInput: head = []\nOutput: []\nConstraints:\n<ul>\n\t<li>The number of nodes in the list is the range [0, 5000].</li>\n\t<li>-5000 &lt;= Node.val &lt;= 5000</li>\n</ul>Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both?\n\n"test_case": [\n  [1,2,3,4,5]\n  [1,2]\n  []\n],\n"test_case_output": [\'[5,4,3,2,1]\', \'[2,1]\', \'[]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven two strings s and t, determine if they are isomorphic.\nTwo strings s and t are isomorphic if the characters in s can be replaced to get t.\nAll occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.<strong class="example">Example 1:\nInput: s = "egg", t = "add"\nOutput: true\n<strong class="example">Example 2:\nInput: s = "foo", t = "bar"\nOutput: false\n<strong class="example">Example 3:\nInput: s = "paper", t = "title"\nOutput: true\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 5 * 10<sup>4</sup></li>\n\t<li>t.length == s.length</li>\n\t<li>s and t consist of any valid ascii character.</li>\n</ul>\n\n"test_case": [\n  "egg"\n"add"\n  "foo"\n"bar"\n  "paper"\n"title"\n],\n"test_case_output": [\'true\', \'false\', \'true\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer n, return the number of prime numbers that are strictly less than n.<strong class="example">Example 1:\nInput: n = 10\nOutput: 4\nExplanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\n<strong class="example">Example 2:\nInput: n = 0\nOutput: 0\n<strong class="example">Example 3:\nInput: n = 1\nOutput: 0\nConstraints:\n<ul>\n\t<li>0 &lt;= n &lt;= 5 * 10<sup>6</sup></li>\n</ul>\n\n"test_case": [\n  10\n  0\n  1\n],\n"test_case_output": [\'4\', \'0\', \'0\'],\n"test_case_explanation": [\n  "There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg" style="width: 500px; height: 142px;" />\nInput: head = [1,2,6,3,4,5,6], val = 6\nOutput: [1,2,3,4,5]\n<strong class="example">Example 2:\nInput: head = [], val = 1\nOutput: []\n<strong class="example">Example 3:\nInput: head = [7,7,7,7], val = 7\nOutput: []\nConstraints:\n<ul>\n\t<li>The number of nodes in the list is in the range [0, 10<sup>4</sup>].</li>\n\t<li>1 &lt;= Node.val &lt;= 50</li>\n\t<li>0 &lt;= val &lt;= 50</li>\n</ul>\n\n"test_case": [\n  [1,2,6,3,4,5,6]\n6\n  []\n1\n  [7,7,7,7]\n7\n],\n"test_case_output": [\'[1,2,3,4,5]\', \'[]\', \'[]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nWrite an algorithm to determine if a number n is happy.\nA happy number is a number defined by the following process:\n<ul>\n\t<li>Starting with any positive integer, replace the number by the sum of the squares of its digits.</li>\n\t<li>Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.</li>\n\t<li>Those numbers for which this process ends in 1 are happy.</li>\n</ul>\nReturn true if n is a happy number, and false if not.<strong class="example">Example 1:\nInput: n = 19\nOutput: true\nExplanation:\n1<sup>2</sup> + 9<sup>2</sup> = 82\n8<sup>2</sup> + 2<sup>2</sup> = 68\n6<sup>2</sup> + 8<sup>2</sup> = 100\n1<sup>2</sup> + 0<sup>2</sup> + 0<sup>2</sup> = 1\n<strong class="example">Example 2:\nInput: n = 2\nOutput: false\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 2<sup>31</sup> - 1</li>\n</ul>\n\n"test_case": [\n  19\n  2\n],\n"test_case_output": [\'true\', \'false\'],\n"test_case_explanation": [\n  "1"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven two integers left and right that represent the range [left, right], return the bitwise AND of all numbers in this range, inclusive.<strong class="example">Example 1:\nInput: left = 5, right = 7\nOutput: 4\n<strong class="example">Example 2:\nInput: left = 0, right = 0\nOutput: 0\n<strong class="example">Example 3:\nInput: left = 1, right = 2147483647\nOutput: 0\nConstraints:\n<ul>\n\t<li>0 &lt;= left &lt;= right &lt;= 2<sup>31</sup> - 1</li>\n</ul>\n\n"test_case": [\n  5\n7\n  0\n0\n  1\n2147483647\n],\n"test_case_output": [\'4\', \'0\', \'0\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an m x n 2D binary grid grid which represents a map of &#39;1&#39;s (land) and &#39;0&#39;s (water), return the number of islands.\nAn island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.<strong class="example">Example 1:\nInput: grid = [\n  [1,1,1,1,0],\n  [1,1,0,1,0],\n  [1,1,0,0,0],\n  [0,0,0,0,0]\n]\nOutput: 1\n<strong class="example">Example 2:\nInput: grid = [\n  [1,1,0,0,0],\n  [1,1,0,0,0],\n  [0,0,1,0,0],\n  [0,0,0,1,1]\n]\nOutput: 3\nConstraints:\n<ul>\n\t<li>m == grid.length</li>\n\t<li>n == grid[i].length</li>\n\t<li>1 &lt;= m, n &lt;= 300</li>\n\t<li>grid[i][j] is &#39;0&#39; or &#39;1&#39;.</li>\n</ul>\n\n"test_case": [\n  [["1","1","1","1","0"],["1","1","0","1","0"],["1","1","0","0","0"],["0","0","0","0","0"]]\n  [["1","1","0","0","0"],["1","1","0","0","0"],["0","0","1","0","0"],["0","0","0","1","1"]]\n],\n"test_case_output": [\'1\', \'3\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/02/14/tree.jpg" style="width: 401px; height: 301px;" />\nInput: root = [1,2,3,null,5,null,4]\nOutput: [1,3,4]\n<strong class="example">Example 2:\nInput: root = [1,null,3]\nOutput: [1,3]\n<strong class="example">Example 3:\nInput: root = []\nOutput: []\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [0, 100].</li>\n\t<li>-100 &lt;= Node.val &lt;= 100</li>\n</ul>\n\n"test_case": [\n  [1,2,3,null,5,null,4]\n  [1,null,3]\n  []\n],\n"test_case_output": [\'[1,3,4]\', \'[1,3]\', \'[]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.<strong class="example">Example 1:\nInput: nums = [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n<strong class="example">Example 2:\nInput: nums = [2,7,9,3,1]\nOutput: 12\nExplanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\nTotal amount you can rob = 2 + 9 + 1 = 12.\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 100</li>\n\t<li>0 &lt;= nums[i] &lt;= 400</li>\n</ul>\n\n"test_case": [\n  [1,2,3,1]\n  [2,7,9,3,1]\n],\n"test_case_output": [\'4\', \'12\'],\n"test_case_explanation": [\n  "Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n"\n\n  "Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\nTotal amount you can rob = 2 + 9 + 1 = 12.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nReverse bits of a given 32 bits unsigned integer.\nNote:\n<ul>\n\t<li>Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer&#39;s internal binary representation is the same, whether it is signed or unsigned.</li>\n\t<li>In Java, the compiler represents the signed integers using <a href="https://en.wikipedia.org/wiki/Two%27s_complement" target="_blank">2&#39;s complement notation</a>. Therefore, in <strong class="example">Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.</li>\n</ul><strong class="example">Example 1:\nInput: n = 00000010100101000001111010011100\nOutput:    964176192 (00111001011110000010100101000000)\nExplanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.\n<strong class="example">Example 2:\nInput: n = 11111111111111111111111111111101\nOutput:   3221225471 (10111111111111111111111111111111)\nExplanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.\nConstraints:\n<ul>\n\t<li>The input must be a binary string of length 32</li>\n</ul>Follow up: If this function is called many times, how would you optimize it?\n\n"test_case": [\n  00000010100101000001111010011100\n  11111111111111111111111111111101\n],\n"test_case_output": [\'   964176192 (00111001011110000010100101000000)\', \'  3221225471 (10111111111111111111111111111111)\'],\n"test_case_explanation": [\n  "The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.\n"\n\n  "The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums, rotate the array to the right by k steps, where k is non-negative.<strong class="example">Example 1:\nInput: nums = [1,2,3,4,5,6,7], k = 3\nOutput: [5,6,7,1,2,3,4]\nExplanation:\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]\n<strong class="example">Example 2:\nInput: nums = [-1,-100,3,99], k = 2\nOutput: [3,99,-1,-100]\nExplanation: \nrotate 1 steps to the right: [99,-1,-100,3]\nrotate 2 steps to the right: [3,99,-1,-100]\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>5</sup></li>\n\t<li>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</li>\n\t<li>0 &lt;= k &lt;= 10<sup>5</sup></li>\n</ul>Follow up:\n<ul>\n\t<li>Try to come up with as many solutions as you can. There are at least three different ways to solve this problem.</li>\n\t<li>Could you do it in-place with O(1) extra space?</li>\n</ul>\n\n"test_case": [\n  [1,2,3,4,5,6,7]\n3\n  [-1,-100,3,99]\n2\n],\n"test_case_output": [\'[5,6,7,1,2,3,4]\', \'[3,99,-1,-100]\'],\n"test_case_explanation": [\n  "rotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]\n"\n\n  "rotate 1 steps to the right: [99,-1,-100,3]\nrotate 2 steps to the right: [3,99,-1,-100]\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThe DNA sequence is composed of a series of nucleotides abbreviated as &#39;A&#39;, &#39;C&#39;, &#39;G&#39;, and &#39;T&#39;.\n<ul>\n\t<li>For example, ACGAATTCCG is a DNA sequence.</li>\n</ul>\nWhen studying DNA, it is useful to identify repeated sequences within the DNA.\nGiven a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.<strong class="example">Example 1:\nInput: s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"\nOutput: ["AAAAACCCCC","CCCCCAAAAA"]\n<strong class="example">Example 2:\nInput: s = "AAAAAAAAAAAAA"\nOutput: ["AAAAAAAAAA"]\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 10<sup>5</sup></li>\n\t<li>s[i] is either &#39;A&#39;, &#39;C&#39;, &#39;G&#39;, or &#39;T&#39;.</li>\n</ul>\n\n"test_case": [\n  "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"\n  "AAAAAAAAAAAAA"\n],\n"test_case_output": [\'["AAAAACCCCC","CCCCCAAAAA"]\', \'["AAAAAAAAAA"]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a list of non-negative integers nums, arrange them such that they form the largest number and return it.\nSince the result may be very large, so you need to return a string instead of an integer.<strong class="example">Example 1:\nInput: nums = [10,2]\nOutput: 210\n<strong class="example">Example 2:\nInput: nums = [3,30,34,5,9]\nOutput: 9534330\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 100</li>\n\t<li>0 &lt;= nums[i] &lt;= 10<sup>9</sup></li>\n</ul>\n\n"test_case": [\n  [10,2]\n  [3,30,34,5,9]\n],\n"test_case_output": [\'210\', \'9534330\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThe demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of m x n rooms laid out in a 2D grid. Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.\nThe knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.\nSome of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight&#39;s health (represented by positive integers).\nTo reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\nReturn the knight&#39;s minimum initial health so that he can rescue the princess.\nNote that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/13/dungeon-grid-1.jpg" style="width: 253px; height: 253px;" />\nInput: dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]\nOutput: 7\nExplanation: The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-&gt; RIGHT -&gt; DOWN -&gt; DOWN.\n<strong class="example">Example 2:\nInput: dungeon = [[0]]\nOutput: 1\nConstraints:\n<ul>\n\t<li>m == dungeon.length</li>\n\t<li>n == dungeon[i].length</li>\n\t<li>1 &lt;= m, n &lt;= 200</li>\n\t<li>-1000 &lt;= dungeon[i][j] &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  [[-2,-3,3],[-5,-10,1],[10,30,-5]]\n  [[0]]\n],\n"test_case_output": [\'7\', \'1\'],\n"test_case_explanation": [\n  "The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-&gt; RIGHT -&gt; DOWN -&gt; DOWN.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nImplement the BSTIterator class that represents an iterator over the <a href="https://en.wikipedia.org/wiki/Tree_traversal#In-order_(LNR)" target="_blank">in-order traversal</a> of a binary search tree (BST):\n<ul>\n\t<li>BSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.</li>\n\t<li>boolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.</li>\n\t<li>int next() Moves the pointer to the right, then returns the number at the pointer.</li>\n</ul>\nNotice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.\nYou may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2018/12/25/bst-tree.png" style="width: 189px; height: 178px;" />\nInput\n[BSTIterator, next, next, hasNext, next, hasNext, next, hasNext, next, hasNext]\n[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]\nOutput\n[null, 3, 7, true, 9, true, 15, true, 20, false]\nExplanation\nBSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);\nbSTIterator.next();    // return 3\nbSTIterator.next();    // return 7\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 9\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 15\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 20\nbSTIterator.hasNext(); // return False\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [1, 10<sup>5</sup>].</li>\n\t<li>0 &lt;= Node.val &lt;= 10<sup>6</sup></li>\n\t<li>At most 10<sup>5</sup> calls will be made to hasNext, and next.</li>\n</ul>Follow up:\n<ul>\n\t<li>Could you implement next() and hasNext() to run in average O(1) time and useO(h) memory, where h is the height of the tree?</li>\n</ul>\n\n"test_case": [\n  ["BSTIterator","next","next","hasNext","next","hasNext","next","hasNext","next","hasNext"]\n[[[7,3,15,null,null,9,20]],[],[],[],[],[],[],[],[],[]]\n],\n"test_case_output": [],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\nFor example:\nA -&gt; 1\nB -&gt; 2\nC -&gt; 3\n...\nZ -&gt; 26\nAA -&gt; 27\nAB -&gt; 28 \n...\n<strong class="example">Example 1:\nInput: columnTitle = A\nOutput: 1\n<strong class="example">Example 2:\nInput: columnTitle = AB\nOutput: 28\n<strong class="example">Example 3:\nInput: columnTitle = ZY\nOutput: 701\nConstraints:\n<ul>\n\t<li>1 &lt;= columnTitle.length &lt;= 7</li>\n\t<li>columnTitle consists only of uppercase English letters.</li>\n\t<li>columnTitle is in the range [A, FXSHRXW].</li>\n</ul>\n\n"test_case": [\n  "A"\n  "AB"\n  "ZY"\n],\n"test_case_output": [\'1\', \'28\', \'701\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an array nums of size n, return the majority element.\nThe majority element is the element that appears more than &lfloor;n / 2&rfloor; times. You may assume that the majority element always exists in the array.<strong class="example">Example 1:\nInput: nums = [3,2,3]\nOutput: 3\n<strong class="example">Example 2:\nInput: nums = [2,2,1,1,1,2,2]\nOutput: 2\nConstraints:\n<ul>\n\t<li>n == nums.length</li>\n\t<li>1 &lt;= n &lt;= 5 * 10<sup>4</sup></li>\n\t<li>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></li>\n</ul>Follow-up: Could you solve the problem in linear time and in O(1) space?\n"test_case": [\n  [3,2,3]\n  [2,2,1,1,1,2,2]\n],\n"test_case_output": [\'3\', \'2\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer columnNumber, return its corresponding column title as it appears in an Excel sheet.\nFor example:\nA -&gt; 1\nB -&gt; 2\nC -&gt; 3\n...\nZ -&gt; 26\nAA -&gt; 27\nAB -&gt; 28 \n...\n<strong class="example">Example 1:\nInput: columnNumber = 1\nOutput: A\n<strong class="example">Example 2:\nInput: columnNumber = 28\nOutput: AB\n<strong class="example">Example 3:\nInput: columnNumber = 701\nOutput: ZY\nConstraints:\n<ul>\n\t<li>1 &lt;= columnNumber &lt;= 2<sup>31</sup> - 1</li>\n</ul>\n\n"test_case": [\n  1\n  28\n  701\n],\n"test_case_output": [\'A\', \'AB\', \'ZY\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index<sub>1</sub>] and numbers[index<sub>2</sub>] where 1 &lt;= index<sub>1</sub> &lt; index<sub>2</sub> &lt;= numbers.length.\nReturn the indices of the two numbers, index<sub>1</sub> and index<sub>2</sub>, added by one as an integer array [index<sub>1</sub>, index<sub>2</sub>] of length 2.\nThe tests are generated such that there is exactly one solution. You may not use the same element twice.\nYour solution must use only constant extra space.<strong class="example">Example 1:\nInput: numbers = [2,7,11,15], target = 9\nOutput: [1,2]\nExplanation: The sum of 2 and 7 is 9. Therefore, index<sub>1</sub> = 1, index<sub>2</sub> = 2. We return [1, 2].\n<strong class="example">Example 2:\nInput: numbers = [2,3,4], target = 6\nOutput: [1,3]\nExplanation: The sum of 2 and 4 is 6. Therefore index<sub>1</sub> = 1, index<sub>2</sub> = 3. We return [1, 3].\n<strong class="example">Example 3:\nInput: numbers = [-1,0], target = -1\nOutput: [1,2]\nExplanation: The sum of -1 and 0 is -1. Therefore index<sub>1</sub> = 1, index<sub>2</sub> = 2. We return [1, 2].\nConstraints:\n<ul>\n\t<li>2 &lt;= numbers.length &lt;= 3 * 10<sup>4</sup></li>\n\t<li>-1000 &lt;= numbers[i] &lt;= 1000</li>\n\t<li>numbers is sorted in non-decreasing order.</li>\n\t<li>-1000 &lt;= target &lt;= 1000</li>\n\t<li>The tests are generated such that there is exactly one solution.</li>\n</ul>\n\n"test_case": [\n  [2,7,11,15]\n9\n  [2,3,4]\n6\n  [-1,0]\n-1\n],\n"test_case_output": [\'[1,2]\', \'[1,3]\', \'[1,2]\'],\n"test_case_explanation": [\n  "The sum of 2 and 7 is 9. Therefore, index"\n\n  "The sum of 2 and 4 is 6. Therefore index"\n\n  "The sum of -1 and 0 is -1. Therefore index"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven two integers representing the numerator and denominator of a fraction, return the fraction in string format.\nIf the fractional part is repeating, enclose the repeating part in parentheses.\nIf multiple answers are possible, return any of them.\nIt is guaranteed that the length of the answer string is less than 10<sup>4</sup> for all the given inputs.<strong class="example">Example 1:\nInput: numerator = 1, denominator = 2\nOutput: 0.5\n<strong class="example">Example 2:\nInput: numerator = 2, denominator = 1\nOutput: 2\n<strong class="example">Example 3:\nInput: numerator = 4, denominator = 333\nOutput: 0.(012)\nConstraints:\n<ul>\n\t<li>-2<sup>31</sup> &lt;=numerator, denominator &lt;= 2<sup>31</sup> - 1</li>\n\t<li>denominator != 0</li>\n</ul>\n\n"test_case": [\n  1\n2\n  2\n1\n  4\n333\n],\n"test_case_output": [\'0.5\', \'2\', \'0.(012)\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven two version numbers,version1 and version2, compare them.\n<ul>\n</ul>\nVersion numbers consist of one or more revisions joined by a dot&#39;.&#39;. Each revisionconsists of digitsand may contain leading zeros. Every revision contains at least one character. Revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example2.5.33and0.1are valid version numbers.\nTo compare version numbers, compare their revisions in left-to-right order. Revisions are compared using theirinteger value ignoring any leading zeros. This means that revisions1and001are consideredequal. If a version number does not specify a revision at an index, thentreat the revision as0. For example, version1.0 is less than version1.1because their revision 0s are the same, but their revision 1s are0and1respectively, and0 &lt; 1.\nReturn the following:\n<ul>\n\t<li>If version1 &lt; version2, return -1.</li>\n\t<li>If version1 &gt; version2, return 1.</li>\n\t<li>Otherwise, return 0.</li>\n</ul><strong class="example">Example 1:\nInput: version1 = 1.01, version2 = 1.001\nOutput: 0\nExplanation: Ignoring leading zeroes, both 01 and 001 represent the same integer 1.\n<strong class="example">Example 2:\nInput: version1 = 1.0, version2 = 1.0.0\nOutput: 0\nExplanation: version1 does not specify revision 2, which means it is treated as 0.\n<strong class="example">Example 3:\nInput: version1 = 0.1, version2 = 1.1\nOutput: -1\nExplanation: version1&#39;s revision 0 is 0, while version2&#39;s revision 0 is 1. 0 &lt; 1, so version1 &lt; version2.\nConstraints:\n<ul>\n\t<li>1 &lt;= version1.length, version2.length &lt;= 500</li>\n\t<li>version1 and version2only contain digits and &#39;.&#39;.</li>\n\t<li>version1 and version2are valid version numbers.</li>\n\t<li>All the given revisions inversion1 and version2can be stored ina32-bit integer.</li>\n</ul>\n\n"test_case": [\n  "1.01"\n"1.001"\n  "1.0"\n"1.0.0"\n  "0.1"\n"1.1"\n],\n"test_case_output": [\'0\', \'0\', \'-1\'],\n"test_case_explanation": [\n  "Ignoring leading zeroes, both 01 and 001 represent the same integer 1.\n"\n\n  "version1 does not specify revision 2, which means it is treated as 0.\n"\n\n  "version1&#39;s revision 0 is 0, while version2&#39;s revision 0 is 1. 0 &lt; 1, so version1 &lt; version2.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return 0.\nYou must write an algorithm that runs in linear time and uses linear extra space.<strong class="example">Example 1:\nInput: nums = [3,6,9,1]\nOutput: 3\nExplanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.\n<strong class="example">Example 2:\nInput: nums = [10]\nOutput: 0\nExplanation: The array contains less than 2 elements, therefore return 0.\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>5</sup></li>\n\t<li>0 &lt;= nums[i] &lt;= 10<sup>9</sup></li>\n</ul>\n\n"test_case": [\n  [3,6,9,1]\n  [10]\n],\n"test_case_output": [\'3\', \'0\'],\n"test_case_explanation": [\n  "The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.\n"\n\n  "The array contains less than 2 elements, therefore return 0.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nA peak element is an element that is strictly greater than its neighbors.\nGiven a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.\nYou may imagine that nums[-1] = nums[n] = -&infin;. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.\nYou must write an algorithm that runs in O(log n) time.<strong class="example">Example 1:\nInput: nums = [1,2,3,1]\nOutput: 2\nExplanation: 3 is a peak element and your function should return the index number 2.\n<strong class="example">Example 2:\nInput: nums = [1,2,1,3,5,6,4]\nOutput: 5\nExplanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.Constraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 1000</li>\n\t<li>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</li>\n\t<li>nums[i] != nums[i + 1] for all valid i.</li>\n</ul>\n\n"test_case": [\n  [1,2,3,1]\n  [1,2,1,3,5,6,4]\n],\n"test_case_output": [\'2\', \'5\'],\n"test_case_explanation": [\n  "3 is a peak element and your function should return the index number 2.\n"\n\n  "Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.Constraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.\nFor example, the following two linked lists begin to intersect at node c1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/05/160_statement.png" style="width: 500px; height: 162px;" />\nThe test cases are generated such that there are no cycles anywhere in the entire linked structure.\nNote that the linked lists must retain their original structure after the function returns.\nCustom Judge:\nThe inputs to the judge are given as follows (your program is not given these inputs):\n<ul>\n\t<li>intersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node.</li>\n\t<li>listA - The first linked list.</li>\n\t<li>listB - The second linked list.</li>\n\t<li>skipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node.</li>\n\t<li>skipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node.</li>\n</ul>\nThe judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program. If you correctly return the intersected node, then your solution will be accepted.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/05/160_example_1_1.png" style="width: 500px; height: 162px;" />\nInput: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3\nOutput: Intersected at &#39;8&#39;\nExplanation: The intersected node&#39;s value is 8 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.\n- Note that the intersected node&#39;s value is not 1 because the nodes with value 1 in A and B (2<sup>nd</sup> node in A and 3<sup>rd</sup> node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3<sup>rd</sup> node in A and 4<sup>th</sup> node in B) point to the same location in memory.\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/05/160_example_2.png" style="width: 500px; height: 194px;" />\nInput: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\nOutput: Intersected at &#39;2&#39;\nExplanation: The intersected node&#39;s value is 2 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.\n<strong class="example">Example 3:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/05/160_example_3.png" style="width: 300px; height: 189px;" />\nInput: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\nOutput: No intersection\nExplanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\nExplanation: The two lists do not intersect, so return null.\nConstraints:\n<ul>\n\t<li>The number of nodes of listA is in the m.</li>\n\t<li>The number of nodes of listB is in the n.</li>\n\t<li>1 &lt;= m, n &lt;= 3 * 10<sup>4</sup></li>\n\t<li>1 &lt;= Node.val &lt;= 10<sup>5</sup></li>\n\t<li>0 &lt;= skipA &lt;m</li>\n\t<li>0 &lt;= skipB &lt;n</li>\n\t<li>intersectVal is 0 if listA and listB do not intersect.</li>\n\t<li>intersectVal == listA[skipA] == listB[skipB] if listA and listB intersect.</li>\n</ul>Follow up: Could you write a solution that runs in O(m + n) time and use only O(1) memory?\n"test_case": [\n  8\n[4,1,8,4,5]\n[5,6,1,8,4,5]\n2\n3\n  2\n[1,9,1,2,4]\n[3,2,4]\n3\n1\n  0\n[2,6,4]\n[1,5]\n3\n2\n],\n"test_case_output": [\'Intersected at &#39;8&#39;\', \'Intersected at &#39;2&#39;\', \'No intersection\'],\n"test_case_explanation": [\n  "The intersected node&#39;s value is 8 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.\n- Note that the intersected node&#39;s value is not 1 because the nodes with value 1 in A and B (2"\n\n  "The intersected node&#39;s value is 2 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.\n"\n\n  "From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\nExplanation: The two lists do not intersect, so return null.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nSuppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:\n<ul>\n\t<li>[4,5,6,7,0,1,4] if it was rotated 4 times.</li>\n\t<li>[0,1,4,4,5,6,7] if it was rotated 7 times.</li>\n</ul>\nNotice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].\nGiven the sorted rotated array nums that may contain duplicates, return the minimum element of this array.\nYou must decrease the overall operation steps as much as possible.<strong class="example">Example 1:\nInput: nums = [1,3,5]\nOutput: 1\n<strong class="example">Example 2:\nInput: nums = [2,2,2,0,1]\nOutput: 0\nConstraints:\n<ul>\n\t<li>n == nums.length</li>\n\t<li>1 &lt;= n &lt;= 5000</li>\n\t<li>-5000 &lt;= nums[i] &lt;= 5000</li>\n\t<li>nums is sorted and rotated between 1 and n times.</li>\n</ul>Follow up: This problem is similar to<a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/" target="_blank">Find Minimum in Rotated Sorted Array</a>, butnums may contain duplicates. Would this affect the runtime complexity? How and why?\n"test_case": [\n  [1,3,5]\n  [2,2,2,0,1]\n],\n"test_case_output": [\'1\', \'0\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums, find a <span data-keyword="subarray-nonempty">subarray</span> that has the largest product, and return the product.\nThe test cases are generated so that the answer will fit in a 32-bit integer.<strong class="example">Example 1:\nInput: nums = [2,3,-2,4]\nOutput: 6\nExplanation: [2,3] has the largest product 6.\n<strong class="example">Example 2:\nInput: nums = [-2,0,-1]\nOutput: 0\nExplanation: The result cannot be 2, because [-2,-1] is not a subarray.\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></li>\n\t<li>-10 &lt;= nums[i] &lt;= 10</li>\n\t<li>The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.</li>\n</ul>\n\n"test_case": [\n  [2,3,-2,4]\n  [-2,0,-1]\n],\n"test_case_output": [\'6\', \'0\'],\n"test_case_explanation": [\n  "[2,3] has the largest product 6.\n"\n\n  "The result cannot be 2, because [-2,-1] is not a subarray.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an input string s, reverse the order of the words.\nA word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.\nReturn a string of the words in reverse order concatenated by a single space.\nNote that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.<strong class="example">Example 1:\nInput: s = the sky is blue\nOutput: blue is sky the\n<strong class="example">Example 2:\nInput: s =   hello world  \nOutput: world hello\nExplanation: Your reversed string should not contain leading or trailing spaces.\n<strong class="example">Example 3:\nInput: s = a good   example\nOutput: example good a\nExplanation: You need to reduce multiple spaces between two words to a single space in the reversed string.\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 10<sup>4</sup></li>\n\t<li>s contains English letters (upper-case and lower-case), digits, and spaces &#39; &#39;.</li>\n\t<li>There is at least one word in s.</li>\n</ul><b data-stringify-type="bold">Follow-up:If the string data type is mutable in your language, canyou solve it<b data-stringify-type="bold">in-placewith<code data-stringify-type="code">O(1)extra space?\n\n"test_case": [\n  "the sky is blue"\n  "  hello world  "\n  "a good   example"\n],\n"test_case_output": [\'blue is sky the\', \'world hello\', \'example good a\'],\n"test_case_explanation": [\n  "Your reversed string should not contain leading or trailing spaces.\n"\n\n  "You need to reduce multiple spaces between two words to a single space in the reversed string.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an array of strings tokens that represents an arithmetic expression in a <a href="http://en.wikipedia.org/wiki/Reverse_Polish_notation" target="_blank">Reverse Polish Notation</a>.\nEvaluate the expression. Return an integer that represents the value of the expression.\nNote that:\n<ul>\n\t<li>The valid operators are &#39;+&#39;, &#39;-&#39;, &#39;*&#39;, and &#39;/&#39;.</li>\n\t<li>Each operand may be an integer or another expression.</li>\n\t<li>The division between two integers always truncates toward zero.</li>\n\t<li>There will not be any division by zero.</li>\n\t<li>The input represents a valid arithmetic expression in a reverse polish notation.</li>\n\t<li>The answer and all the intermediate calculations can be represented in a 32-bit integer.</li>\n</ul><strong class="example">Example 1:\nInput: tokens = [2,1,+,3,*]\nOutput: 9\nExplanation: ((2 + 1) * 3) = 9\n<strong class="example">Example 2:\nInput: tokens = [4,13,5,/,+]\nOutput: 6\nExplanation: (4 + (13 / 5)) = 6\n<strong class="example">Example 3:\nInput: tokens = [10,6,9,3,+,-11,*,/,*,17,+,5,+]\nOutput: 22\nExplanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22\nConstraints:\n<ul>\n\t<li>1 &lt;= tokens.length &lt;= 10<sup>4</sup></li>\n\t<li>tokens[i] is either an operator: +, -, *, or /, or an integer in the range [-200, 200].</li>\n</ul>\n\n"test_case": [\n  ["2","1","+","3","*"]\n  ["4","13","5","/","+"]\n  ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]\n],\n"test_case_output": [\'9\', \'6\', \'22\'],\n"test_case_explanation": [\n  "((2 + 1) * 3) = 9\n"\n\n  "(4 + (13 / 5)) = 6\n"\n\n  "((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an array of points where points[i] = [x<sub>i</sub>, y<sub>i</sub>] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/02/25/plane1.jpg" style="width: 300px; height: 294px;" />\nInput: points = [[1,1],[2,2],[3,3]]\nOutput: 3\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/02/25/plane2.jpg" style="width: 300px; height: 294px;" />\nInput: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\nOutput: 4\nConstraints:\n<ul>\n\t<li>1 &lt;= points.length &lt;= 300</li>\n\t<li>points[i].length == 2</li>\n\t<li>-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></li>\n\t<li>All the points are unique.</li>\n</ul>\n\n"test_case": [\n  [[1,1],[2,2],[3,3]]\n  [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\n],\n"test_case_output": [\'3\', \'4\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the head of a linked list, return the list after sorting it in ascending order.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/09/14/sort_list_1.jpg" style="width: 450px; height: 194px;" />\nInput: head = [4,2,1,3]\nOutput: [1,2,3,4]\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/09/14/sort_list_2.jpg" style="width: 550px; height: 184px;" />\nInput: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]\n<strong class="example">Example 3:\nInput: head = []\nOutput: []\nConstraints:\n<ul>\n\t<li>The number of nodes in the list is in the range [0, 5 * 10<sup>4</sup>].</li>\n\t<li>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></li>\n</ul>Follow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e. constant space)?\n\n"test_case": [\n  [4,2,1,3]\n  [-1,5,3,4,0]\n  []\n],\n"test_case_output": [\'[1,2,3,4]\', \'[-1,0,3,4,5]\', \'[]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the head of a singly linked list, sort the list using insertion sort, and return the sorted list&#39;s head.\nThe steps of the insertion sort algorithm:\n<ol>\n\t<li>Insertion sort iterates, consuming one input element each repetition and growing a sorted output list.</li>\n\t<li>At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.</li>\n\t<li>It repeats until no input elements remain.</li>\n</ol>\nThe following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.\n<img alt="" src="https://upload.wikimedia.org/wikipedia/commons/0/0f/Insertion-sort-example-300px.gif" style="height:180px; width:300px" /><strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/04/sort1linked-list.jpg" style="width: 422px; height: 222px;" />\nInput: head = [4,2,1,3]\nOutput: [1,2,3,4]\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/04/sort2linked-list.jpg" style="width: 542px; height: 222px;" />\nInput: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]\nConstraints:\n<ul>\n\t<li>The number of nodes in the list is in the range [1, 5000].</li>\n\t<li>-5000 &lt;= Node.val &lt;= 5000</li>\n</ul>\n\n"test_case": [\n  [4,2,1,3]\n  [-1,5,3,4,0]\n],\n"test_case_output": [\'[1,2,3,4]\', \'[-1,0,3,4,5]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nDesign a data structure that follows the constraints of a <a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU" target="_blank">Least Recently Used (LRU) cache</a>.\nImplement the LRUCache class:\n<ul>\n\t<li>LRUCache(int capacity) Initialize the LRU cache with positive size capacity.</li>\n\t<li>int get(int key) Return the value of the key if the key exists, otherwise return -1.</li>\n\t<li>void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.</li>\n</ul>\nThe functions get and put must each run in O(1) average time complexity.<strong class="example">Example 1:\nInput\n[LRUCache, put, put, get, put, get, put, get, get, get]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\nOutput\n[null, null, null, 1, null, -1, null, -1, 3, 4]\nExplanation\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4\nConstraints:\n<ul>\n\t<li>1 &lt;= capacity &lt;= 3000</li>\n\t<li>0 &lt;= key &lt;= 10<sup>4</sup></li>\n\t<li>0 &lt;= value &lt;= 10<sup>5</sup></li>\n\t<li>At most 2 * 10<sup>5</sup> calls will be made to get and put.</li>\n</ul>\n\n"test_case": [\n  ["LRUCache","put","put","get","put","get","put","get","get","get"]\n[[2],[1,1],[2,2],[1],[3,3],[2],[4,4],[1],[3],[4]]\n],\n"test_case_output": [],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the root of abinary tree, return the postorder traversal of its nodes&#39; values.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/08/28/pre1.jpg" style="width: 127px; height: 200px;" />\nInput: root = [1,null,2,3]\nOutput: [3,2,1]\n<strong class="example">Example 2:\nInput: root = []\nOutput: []\n<strong class="example">Example 3:\nInput: root = [1]\nOutput: [1]\nConstraints:\n<ul>\n\t<li>The number of the nodes in the tree is in the range [0, 100].</li>\n\t<li>-100 &lt;= Node.val &lt;= 100</li>\n</ul>Follow up: Recursive solution is trivial, could you do it iteratively?\n"test_case": [\n  [1,null,2,3]\n  []\n  [1]\n],\n"test_case_output": [\'[3,2,1]\', \'[]\', \'[1]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the root of a binary tree, return the preorder traversal of its nodes&#39; values.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg" style="width: 125px; height: 200px;" />\nInput: root = [1,null,2,3]\nOutput: [1,2,3]\n<strong class="example">Example 2:\nInput: root = []\nOutput: []\n<strong class="example">Example 3:\nInput: root = [1]\nOutput: [1]\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [0, 100].</li>\n\t<li>-100 &lt;= Node.val &lt;= 100</li>\n</ul>Follow up: Recursive solution is trivial, could you do it iteratively?\n\n"test_case": [\n  [1,null,2,3]\n  []\n  [1]\n],\n"test_case_output": [\'[1,2,3]\', \'[]\', \'[1]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given the head of a singly linked-list. The list can be represented as:\nL<sub>0</sub> &rarr; L<sub>1</sub> &rarr; &hellip; &rarr; L<sub>n - 1</sub> &rarr; L<sub>n</sub>\nReorder the list to be on the following form:\nL<sub>0</sub> &rarr; L<sub>n</sub> &rarr; L<sub>1</sub> &rarr; L<sub>n - 1</sub> &rarr; L<sub>2</sub> &rarr; L<sub>n - 2</sub> &rarr; &hellip;\nYou may not modify the values in the list&#39;s nodes. Only nodes themselves may be changed.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/04/reorder1linked-list.jpg" style="width: 422px; height: 222px;" />\nInput: head = [1,2,3,4]\nOutput: [1,4,2,3]\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/03/09/reorder2-linked-list.jpg" style="width: 542px; height: 222px;" />\nInput: head = [1,2,3,4,5]\nOutput: [1,5,2,4,3]\nConstraints:\n<ul>\n\t<li>The number of nodes in the list is in the range [1, 5 * 10<sup>4</sup>].</li>\n\t<li>1 &lt;= Node.val &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  [1,2,3,4]\n  [1,2,3,4,5]\n],\n"test_case_output": [\'[1,4,2,3]\', \'[1,5,2,4,3]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail&#39;s next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.\nDo not modify the linked list.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png" style="height: 145px; width: 450px;" />\nInput: head = [3,2,0,-4], pos = 1\nOutput: tail connects to node index 1\nExplanation: There is a cycle in the linked list, where tail connects to the second node.\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png" style="height: 105px; width: 201px;" />\nInput: head = [1,2], pos = 0\nOutput: tail connects to node index 0\nExplanation: There is a cycle in the linked list, where tail connects to the first node.\n<strong class="example">Example 3:\n<img alt="" src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png" style="height: 65px; width: 65px;" />\nInput: head = [1], pos = -1\nOutput: no cycle\nExplanation: There is no cycle in the linked list.\nConstraints:\n<ul>\n\t<li>The number of the nodes in the list is in the range [0, 10<sup>4</sup>].</li>\n\t<li>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></li>\n\t<li>pos is -1 or a valid index in the linked-list.</li>\n</ul>Follow up: Can you solve it using O(1) (i.e. constant) memory?\n\n"test_case": [\n  [3,2,0,-4]\n1\n  [1,2]\n0\n  [1]\n-1\n],\n"test_case_output": [\'tail connects to node index 1\', \'tail connects to node index 0\', \'no cycle\'],\n"test_case_explanation": [\n  "There is a cycle in the linked list, where tail connects to the second node.\n"\n\n  "There is a cycle in the linked list, where tail connects to the first node.\n"\n\n  "There is no cycle in the linked list.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.\nNote that the same word in the dictionary may be reused multiple times in the segmentation.<strong class="example">Example 1:\nInput: s = catsanddog, wordDict = [cat,cats,and,sand,dog]\nOutput: [cats and dog,cat sand dog]\n<strong class="example">Example 2:\nInput: s = pineapplepenapple, wordDict = [apple,pen,applepen,pine,pineapple]\nOutput: [pine apple pen apple,pineapple pen apple,pine applepen apple]\nExplanation: Note that you are allowed to reuse a dictionary word.\n<strong class="example">Example 3:\nInput: s = catsandog, wordDict = [cats,dog,sand,and,cat]\nOutput: []\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 20</li>\n\t<li>1 &lt;= wordDict.length &lt;= 1000</li>\n\t<li>1 &lt;= wordDict[i].length &lt;= 10</li>\n\t<li>s and wordDict[i] consist of only lowercase English letters.</li>\n\t<li>All the strings of wordDict are unique.</li>\n\t<li>Input is generated in a way that the length of the answer doesn&#39;t exceed10<sup>5</sup>.</li>\n</ul>\n\n"test_case": [\n  "catsanddog"\n["cat","cats","and","sand","dog"]\n  "pineapplepenapple"\n["apple","pen","applepen","pine","pineapple"]\n  "catsandog"\n["cats","dog","sand","and","cat"]\n],\n"test_case_output": [\'[cats and dog,cat sand dog]\', \'[pine apple pen apple,pineapple pen apple,pine applepen apple]\', \'[]\'],\n"test_case_explanation": [\n  "Note that you are allowed to reuse a dictionary word.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.\nNote that the same word in the dictionary may be reused multiple times in the segmentation.<strong class="example">Example 1:\nInput: s = leetcode, wordDict = [leet,code]\nOutput: true\nExplanation: Return true because leetcode can be segmented as leet code.\n<strong class="example">Example 2:\nInput: s = applepenapple, wordDict = [apple,pen]\nOutput: true\nExplanation: Return true because applepenapple can be segmented as apple pen apple.\nNote that you are allowed to reuse a dictionary word.\n<strong class="example">Example 3:\nInput: s = catsandog, wordDict = [cats,dog,sand,and,cat]\nOutput: false\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 300</li>\n\t<li>1 &lt;= wordDict.length &lt;= 1000</li>\n\t<li>1 &lt;= wordDict[i].length &lt;= 20</li>\n\t<li>s and wordDict[i] consist of only lowercase English letters.</li>\n\t<li>All the strings of wordDict are unique.</li>\n</ul>\n\n"test_case": [\n  "leetcode"\n["leet","code"]\n  "applepenapple"\n["apple","pen"]\n  "catsandog"\n["cats","dog","sand","and","cat"]\n],\n"test_case_output": [\'true\', \'true\', \'false\'],\n"test_case_explanation": [\n  "Return true because leetcode can be segmented as leet code.\n"\n\n  "Return true because applepenapple can be segmented as apple pen apple.\nNote that you are allowed to reuse a dictionary word.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nA linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.\nConstruct a <a href="https://en.wikipedia.org/wiki/Object_copying#Deep_copy" target="_blank">deep copy</a> of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.\nFor example, if there are two nodes X and Y in the original list, where X.random --&gt; Y, then for the corresponding two nodes x and y in the copied list, x.random --&gt; y.\nReturn the head of the copied linked list.\nThe linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:\n<ul>\n\t<li>val: an integer representing Node.val</li>\n\t<li>random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.</li>\n</ul>\nYour code will only be given the head of the original linked list.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2019/12/18/e1.png" style="width: 700px; height: 142px;" />\nInput: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\nOutput: [[7,null],[13,0],[11,4],[10,2],[1,0]]\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2019/12/18/e2.png" style="width: 700px; height: 114px;" />\nInput: head = [[1,1],[2,1]]\nOutput: [[1,1],[2,1]]\n<strong class="example">Example 3:\n<img alt="" src="https://assets.leetcode.com/uploads/2019/12/18/e3.png" style="width: 700px; height: 122px;" />\nInput: head = [[3,null],[3,0],[3,null]]\nOutput: [[3,null],[3,0],[3,null]]\nConstraints:\n<ul>\n\t<li>0 &lt;= n &lt;= 1000</li>\n\t<li>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></li>\n\t<li>Node.random is null or is pointing to some node in the linked list.</li>\n</ul>\n\n"test_case": [\n  [[7,null],[13,0],[11,4],[10,2],[1,0]]\n  [[1,1],[2,1]]\n  [[3,null],[3,0],[3,null]]\n],\n"test_case_output": [\'[[7,null],[13,0],[11,4],[10,2],[1,0]]\', \'[[1,1],[2,1]]\', \'[[3,null],[3,0],[3,null]]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums whereevery element appears three times except for one, which appears exactly once. Find the single element and return it.\nYou mustimplement a solution with a linear runtime complexity and useonly constantextra space.<strong class="example">Example 1:\nInput: nums = [2,2,3,2]\nOutput: 3\n<strong class="example">Example 2:\nInput: nums = [0,1,0,1,0,1,99]\nOutput: 99\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></li>\n\t<li>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</li>\n\t<li>Each element in nums appears exactly three times except for one element which appears once.</li>\n</ul>\n\n"test_case": [\n  [2,2,3,2]\n  [0,1,0,1,0,1,99]\n],\n"test_case_output": [\'3\', \'99\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a non-emptyarray of integers nums, every element appears twice except for one. Find that single one.\nYou mustimplement a solution with a linear runtime complexity and useonly constantextra space.<strong class="example">Example 1:\nInput: nums = [2,2,1]\nOutput: 1\n<strong class="example">Example 2:\nInput: nums = [4,1,2,1,2]\nOutput: 4\n<strong class="example">Example 3:\nInput: nums = [1]\nOutput: 1\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></li>\n\t<li>-3 * 10<sup>4</sup> &lt;= nums[i] &lt;= 3 * 10<sup>4</sup></li>\n\t<li>Each element in the array appears twice except for one element which appears only once.</li>\n</ul>\n\n"test_case": [\n  [2,2,1]\n  [4,1,2,1,2]\n  [1]\n],\n"test_case_output": [\'1\', \'4\', \'1\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThere are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.\nYou are giving candies to these children subjected to the following requirements:\n<ul>\n\t<li>Each child must have at least one candy.</li>\n\t<li>Children with a higher rating get more candies than their neighbors.</li>\n</ul>\nReturn the minimum number of candies you need to have to distribute the candies to the children.<strong class="example">Example 1:\nInput: ratings = [1,0,2]\nOutput: 5\nExplanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\n<strong class="example">Example 2:\nInput: ratings = [1,2,2]\nOutput: 4\nExplanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\nThe third child gets 1 candy because it satisfies the above two conditions.\nConstraints:\n<ul>\n\t<li>n == ratings.length</li>\n\t<li>1 &lt;= n &lt;= 2 * 10<sup>4</sup></li>\n\t<li>0 &lt;= ratings[i] &lt;= 2 * 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  [1,0,2]\n  [1,2,2]\n],\n"test_case_output": [\'5\', \'4\'],\n"test_case_explanation": [\n  "You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\n"\n\n  "You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\nThe third child gets 1 candy because it satisfies the above two conditions.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThere are n gas stations along a circular route, where the amount of gas at the i<sup>th</sup> station is gas[i].\nYou have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the i<sup>th</sup> station to its next (i + 1)<sup>th</sup> station. You begin the journey with an empty tank at one of the gas stations.\nGiven two integer arrays gas and cost, return the starting gas station&#39;s index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique<strong class="example">Example 1:\nInput: gas = [1,2,3,4,5], cost = [3,4,5,1,2]\nOutput: 3\nExplanation:\nStart at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 4. Your tank = 4 - 1 + 5 = 8\nTravel to station 0. Your tank = 8 - 2 + 1 = 7\nTravel to station 1. Your tank = 7 - 3 + 2 = 6\nTravel to station 2. Your tank = 6 - 4 + 3 = 5\nTravel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\nTherefore, return 3 as the starting index.\n<strong class="example">Example 2:\nInput: gas = [2,3,4], cost = [3,4,3]\nOutput: -1\nExplanation:\nYou can&#39;t start at station 0 or 1, as there is not enough gas to travel to the next station.\nLet&#39;s start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 0. Your tank = 4 - 3 + 2 = 3\nTravel to station 1. Your tank = 3 - 3 + 3 = 3\nYou cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\nTherefore, you can&#39;t travel around the circuit once no matter where you start.\nConstraints:\n<ul>\n\t<li>n == gas.length == cost.length</li>\n\t<li>1 &lt;= n &lt;= 10<sup>5</sup></li>\n\t<li>0 &lt;= gas[i], cost[i] &lt;= 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  [1,2,3,4,5]\n[3,4,5,1,2]\n  [2,3,4]\n[3,4,3]\n],\n"test_case_output": [\'3\', \'-1\'],\n"test_case_explanation": [\n  "Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 4. Your tank = 4 - 1 + 5 = 8\nTravel to station 0. Your tank = 8 - 2 + 1 = 7\nTravel to station 1. Your tank = 7 - 3 + 2 = 6\nTravel to station 2. Your tank = 6 - 4 + 3 = 5\nTravel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\nTherefore, return 3 as the starting index.\n"\n\n  "You can&#39;t start at station 0 or 1, as there is not enough gas to travel to the next station.\nLet&#39;s start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 0. Your tank = 4 - 3 + 2 = 3\nTravel to station 1. Your tank = 3 - 3 + 3 = 3\nYou cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\nTherefore, you can&#39;t travel around the circuit once no matter where you start.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a reference of a node in a <a href="https://en.wikipedia.org/wiki/Connectivity_(graph_theory)#Connected_graph" target="_blank">connected</a> undirected graph.\nReturn a <a href="https://en.wikipedia.org/wiki/Object_copying#Deep_copy" target="_blank">deep copy</a> (clone) of the graph.\nEach node in the graph contains a value (int) and a list (List[Node]) of its neighbors.\nclass Node {\n    public int val;\n    public List&lt;Node&gt; neighbors;\n}\nTest case format:\nFor simplicity, each node&#39;s value is the same as the node&#39;s index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list.\nAn adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.\nThe given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2019/11/04/133_clone_graph_question.png" style="width: 454px; height: 500px;" />\nInput: adjList = [[2,4],[1,3],[2,4],[1,3]]\nOutput: [[2,4],[1,3],[2,4],[1,3]]\nExplanation: There are 4 nodes in the graph.\n1st node (val = 1)&#39;s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n2nd node (val = 2)&#39;s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n3rd node (val = 3)&#39;s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n4th node (val = 4)&#39;s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/01/07/graph.png" style="width: 163px; height: 148px;" />\nInput: adjList = [[]]\nOutput: [[]]\nExplanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.\n<strong class="example">Example 3:\nInput: adjList = []\nOutput: []\nExplanation: This an empty graph, it does not have any nodes.\nConstraints:\n<ul>\n\t<li>The number of nodes in the graph is in the range [0, 100].</li>\n\t<li>1 &lt;= Node.val &lt;= 100</li>\n\t<li>Node.val is unique for each node.</li>\n\t<li>There are no repeated edges and no self-loops in the graph.</li>\n\t<li>The Graph is connected and all nodes can be visited starting from the given node.</li>\n</ul>\n\n"test_case": [\n  [[2,4],[1,3],[2,4],[1,3]]\n  [[]]\n  []\n],\n"test_case_output": [\'[[2,4],[1,3],[2,4],[1,3]]\', \'[[]]\', \'[]\'],\n"test_case_explanation": [\n  "There are 4 nodes in the graph.\n1st node (val = 1)&#39;s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n2nd node (val = 2)&#39;s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n3rd node (val = 3)&#39;s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n4th node (val = 4)&#39;s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n"\n\n  "Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.\n"\n\n  "This an empty graph, it does not have any nodes.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an m x n matrix board containing &#39;X&#39; and &#39;O&#39;, capture all regions that are 4-directionallysurrounded by &#39;X&#39;.\nA region is captured by flipping all &#39;O&#39;s into &#39;X&#39;s in that surrounded region.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/02/19/xogrid.jpg" style="width: 550px; height: 237px;" />\nInput: board = [[X,X,X,X],[X,O,O,X],[X,X,O,X],[X,O,X,X]]\nOutput: [[X,X,X,X],[X,X,X,X],[X,X,X,X],[X,O,X,X]]\nExplanation: Notice that an &#39;O&#39; should not be flipped if:\n- It is on the border, or\n- It is adjacent to an &#39;O&#39; that should not be flipped.\nThe bottom &#39;O&#39; is on the border, so it is not flipped.\nThe other three &#39;O&#39; form a surrounded region, so they are flipped.\n<strong class="example">Example 2:\nInput: board = [[X]]\nOutput: [[X]]\nConstraints:\n<ul>\n\t<li>m == board.length</li>\n\t<li>n == board[i].length</li>\n\t<li>1 &lt;= m, n &lt;= 200</li>\n\t<li>board[i][j] is &#39;X&#39; or &#39;O&#39;.</li>\n</ul>\n\n"test_case": [\n  [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]\n  [["X"]]\n],\n"test_case_output": [\'[[X,X,X,X],[X,X,X,X],[X,X,X,X],[X,O,X,X]]\', \'[[X]]\'],\n"test_case_explanation": [\n  "Notice that an &#39;O&#39; should not be flipped if:\n- It is on the border, or\n- It is adjacent to an &#39;O&#39; that should not be flipped.\nThe bottom &#39;O&#39; is on the border, so it is not flipped.\nThe other three &#39;O&#39; form a surrounded region, so they are flipped.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given the root of a binary tree containing digits from 0 to 9 only.\nEach root-to-leaf path in the tree represents a number.\n<ul>\n\t<li>For example, the root-to-leaf path 1 -&gt; 2 -&gt; 3 represents the number 123.</li>\n</ul>\nReturn the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.\nA leaf node is a node with no children.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/02/19/num1tree.jpg" style="width: 212px; height: 182px;" />\nInput: root = [1,2,3]\nOutput: 25\nExplanation:\nThe root-to-leaf path 1-&gt;2 represents the number 12.\nThe root-to-leaf path 1-&gt;3 represents the number 13.\nTherefore, sum = 12 + 13 = 25.\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/02/19/num2tree.jpg" style="width: 292px; height: 302px;" />\nInput: root = [4,9,0,5,1]\nOutput: 1026\nExplanation:\nThe root-to-leaf path 4-&gt;9-&gt;5 represents the number 495.\nThe root-to-leaf path 4-&gt;9-&gt;1 represents the number 491.\nThe root-to-leaf path 4-&gt;0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026.\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [1, 1000].</li>\n\t<li>0 &lt;= Node.val &lt;= 9</li>\n\t<li>The depth of the tree will not exceed 10.</li>\n</ul>\n\n"test_case": [\n  [1,2,3]\n  [4,9,0,5,1]\n],\n"test_case_output": [\'25\', \'1026\'],\n"test_case_explanation": [\n  "The root-to-leaf path 1-&gt;2 represents the number 12.\nThe root-to-leaf path 1-&gt;3 represents the number 13.\nTherefore, sum = 12 + 13 = 25.\n"\n\n  "The root-to-leaf path 4-&gt;9-&gt;5 represents the number 495.\nThe root-to-leaf path 4-&gt;9-&gt;1 represents the number 491.\nThe root-to-leaf path 4-&gt;0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an unsorted array of integers nums, return the length of the longest consecutive elements sequence.\nYou must write an algorithm that runs inO(n)time.<strong class="example">Example 1:\nInput: nums = [100,4,200,1,3,2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n<strong class="example">Example 2:\nInput: nums = [0,3,7,2,5,8,4,6,0,1]\nOutput: 9\nConstraints:\n<ul>\n\t<li>0 &lt;= nums.length &lt;= 10<sup>5</sup></li>\n\t<li>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></li>\n</ul>\n\n"test_case": [\n  [100,4,200,1,3,2]\n  [0,3,7,2,5,8,4,6,0,1]\n],\n"test_case_output": [\'4\', \'9\'],\n"test_case_explanation": [\n  "The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nA transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -&gt; s<sub>1</sub> -&gt; s<sub>2</sub> -&gt; ... -&gt; s<sub>k</sub> such that:\n<ul>\n\t<li>Every adjacent pair of words differs by a single letter.</li>\n\t<li>Every s<sub>i</sub> for 1 &lt;= i &lt;= k is in wordList. Note that beginWord does not need to be in wordList.</li>\n\t<li>s<sub>k</sub> == endWord</li>\n</ul>\nGiven two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.<strong class="example">Example 1:\nInput: beginWord = hit, endWord = cog, wordList = [hot,dot,dog,lot,log,cog]\nOutput: 5\nExplanation: One shortest transformation sequence is hit -&gt; hot -&gt; dot -&gt; dog -&gt; cog, which is 5 words long.\n<strong class="example">Example 2:\nInput: beginWord = hit, endWord = cog, wordList = [hot,dot,dog,lot,log]\nOutput: 0\nExplanation: The endWord cog is not in wordList, therefore there is no valid transformation sequence.\nConstraints:\n<ul>\n\t<li>1 &lt;= beginWord.length &lt;= 10</li>\n\t<li>endWord.length == beginWord.length</li>\n\t<li>1 &lt;= wordList.length &lt;= 5000</li>\n\t<li>wordList[i].length == beginWord.length</li>\n\t<li>beginWord, endWord, and wordList[i] consist of lowercase English letters.</li>\n\t<li>beginWord != endWord</li>\n\t<li>All the words in wordList are unique.</li>\n</ul>\n\n"test_case": [\n  "hit"\n"cog"\n["hot","dot","dog","lot","log","cog"]\n  "hit"\n"cog"\n["hot","dot","dog","lot","log"]\n],\n"test_case_output": [\'5\', \'0\'],\n"test_case_explanation": [\n  "One shortest transformation sequence is hit -&gt; hot -&gt; dot -&gt; dog -&gt; cog, which is 5 words long.\n"\n\n  "The endWord cog is not in wordList, therefore there is no valid transformation sequence.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nA phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\nGiven a string s, return true if it is a palindrome, or false otherwise.<strong class="example">Example 1:\nInput: s = A man, a plan, a canal: Panama\nOutput: true\nExplanation: amanaplanacanalpanama is a palindrome.\n<strong class="example">Example 2:\nInput: s = race a car\nOutput: false\nExplanation: raceacar is not a palindrome.\n<strong class="example">Example 3:\nInput: s =  \nOutput: true\nExplanation: s is an empty string  after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome.\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 2 * 10<sup>5</sup></li>\n\t<li>s consists only of printable ASCII characters.</li>\n</ul>\n\n"test_case": [\n  "A man, a plan, a canal: Panama"\n  "race a car"\n  " "\n],\n"test_case_output": [\'true\', \'false\', \'true\'],\n"test_case_explanation": [\n  "amanaplanacanalpanama is a palindrome.\n"\n\n  "raceacar is not a palindrome.\n"\n\n  "s is an empty string  after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nA path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\nThe path sum of a path is the sum of the node&#39;s values in the path.\nGiven the root of a binary tree, return the maximum path sum of any non-empty path.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/10/13/exx1.jpg" style="width: 322px; height: 182px;" />\nInput: root = [1,2,3]\nOutput: 6\nExplanation: The optimal path is 2 -&gt; 1 -&gt; 3 with a path sum of 2 + 1 + 3 = 6.\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/10/13/exx2.jpg" />\nInput: root = [-10,9,20,null,null,15,7]\nOutput: 42\nExplanation: The optimal path is 15 -&gt; 20 -&gt; 7 with a path sum of 15 + 20 + 7 = 42.\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [1, 3 * 10<sup>4</sup>].</li>\n\t<li>-1000 &lt;= Node.val &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  [1,2,3]\n  [-10,9,20,null,null,15,7]\n],\n"test_case_output": [\'6\', \'42\'],\n"test_case_explanation": [\n  "The optimal path is 2 -&gt; 1 -&gt; 3 with a path sum of 2 + 1 + 3 = 6.\n"\n\n  "The optimal path is 15 -&gt; 20 -&gt; 7 with a path sum of 15 + 20 + 7 = 42.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an array prices where prices[i] is the price of a given stock on the i<sup>th</sup> day.\nFind the maximum profit you can achieve. You may complete at most two transactions.\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).<strong class="example">Example 1:\nInput: prices = [3,3,5,0,0,3,1,4]\nOutput: 6\nExplanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\nThen buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\n<strong class="example">Example 2:\nInput: prices = [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nNote that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.\n<strong class="example">Example 3:\nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\nConstraints:\n<ul>\n\t<li>1 &lt;= prices.length &lt;= 10<sup>5</sup></li>\n\t<li>0 &lt;= prices[i] &lt;= 10<sup>5</sup></li>\n</ul>\n\n"test_case": [\n  [3,3,5,0,0,3,1,4]\n  [1,2,3,4,5]\n  [7,6,4,3,1]\n],\n"test_case_output": [\'6\', \'4\', \'0\'],\n"test_case_explanation": [\n  "Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\nThen buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\n"\n\n  "Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nNote that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.\n"\n\n  "In this case, no transaction is done, i.e. max profit = 0.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an integer array prices where prices[i] is the price of a given stock on the i<sup>th</sup> day.\nOn each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.\nFind and return the maximum profit you can achieve.<strong class="example">Example 1:\nInput: prices = [7,1,5,3,6,4]\nOutput: 7\nExplanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\nThen buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\nTotal profit is 4 + 3 = 7.\n<strong class="example">Example 2:\nInput: prices = [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nTotal profit is 4.\n<strong class="example">Example 3:\nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.\nConstraints:\n<ul>\n\t<li>1 &lt;= prices.length &lt;= 3 * 10<sup>4</sup></li>\n\t<li>0 &lt;= prices[i] &lt;= 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  [7,1,5,3,6,4]\n  [1,2,3,4,5]\n  [7,6,4,3,1]\n],\n"test_case_output": [\'7\', \'4\', \'0\'],\n"test_case_explanation": [\n  "Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\nThen buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\nTotal profit is 4 + 3 = 7.\n"\n\n  "Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nTotal profit is 4.\n"\n\n  "There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an array prices where prices[i] is the price of a given stock on the i<sup>th</sup> day.\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.<strong class="example">Example 1:\nInput: prices = [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n<strong class="example">Example 2:\nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transactions are done and the max profit = 0.\nConstraints:\n<ul>\n\t<li>1 &lt;= prices.length &lt;= 10<sup>5</sup></li>\n\t<li>0 &lt;= prices[i] &lt;= 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  [7,1,5,3,6,4]\n  [7,6,4,3,1]\n],\n"test_case_output": [\'5\', \'0\'],\n"test_case_explanation": [\n  "Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n"\n\n  "In this case, no transactions are done and the max profit = 0.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a triangle array, return the minimum path sum from top to bottom.\nFor each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.<strong class="example">Example 1:\nInput: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\nOutput: 11\nExplanation: The triangle looks like:\n   2\n  3 4\n 6 5 7\n4 1 8 3\nThe minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).\n<strong class="example">Example 2:\nInput: triangle = [[-10]]\nOutput: -10\nConstraints:\n<ul>\n\t<li>1 &lt;= triangle.length &lt;= 200</li>\n\t<li>triangle[0].length == 1</li>\n\t<li>triangle[i].length == triangle[i - 1].length + 1</li>\n\t<li>-10<sup>4</sup> &lt;= triangle[i][j] &lt;= 10<sup>4</sup></li>\n</ul>Follow up: Could youdo this using only O(n) extra space, where n is the total number of rows in the triangle?\n"test_case": [\n  [[2],[3,4],[6,5,7],[4,1,8,3]]\n  [[-10]]\n],\n"test_case_output": [\'11\', \'-10\'],\n"test_case_explanation": [\n  "The triangle looks like:\n   2\n  3 4\n 6 5 7\n4 1 8 3\nThe minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer rowIndex, return the rowIndex<sup>th</sup> (0-indexed) row of the Pascal&#39;s triangle.\nIn Pascal&#39;s triangle, each number is the sum of the two numbers directly above it as shown:\n<img alt="" src="https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif" style="height:240px; width:260px" /><strong class="example">Example 1:\nInput: rowIndex = 3\nOutput: [1,3,3,1]\n<strong class="example">Example 2:\nInput: rowIndex = 0\nOutput: [1]\n<strong class="example">Example 3:\nInput: rowIndex = 1\nOutput: [1,1]\nConstraints:\n<ul>\n\t<li>0 &lt;= rowIndex &lt;= 33</li>\n</ul>Follow up: Could you optimize your algorithm to use only O(rowIndex) extra space?\n\n"test_case": [\n  3\n  0\n  1\n],\n"test_case_output": [\'[1,3,3,1]\', \'[1]\', \'[1,1]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer numRows, return the first numRows of Pascal&#39;s triangle.\nIn Pascal&#39;s triangle, each number is the sum of the two numbers directly above it as shown:\n<img alt="" src="https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif" style="height:240px; width:260px" /><strong class="example">Example 1:\nInput: numRows = 5\nOutput: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n<strong class="example">Example 2:\nInput: numRows = 1\nOutput: [[1]]\nConstraints:\n<ul>\n\t<li>1 &lt;= numRows &lt;= 30</li>\n</ul>\n\n"test_case": [\n  5\n  1\n],\n"test_case_output": [\'[[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\', \'[[1]]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a binary tree\nstruct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\nInitially, all next pointers are set to NULL.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2019/02/15/117_sample.png" style="width: 500px; height: 171px;" />\nInput: root = [1,2,3,4,5,null,7]\nOutput: [1,#,2,3,#,4,5,7,#]\nExplanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with &#39;#&#39; signifying the end of each level.\n<strong class="example">Example 2:\nInput: root = []\nOutput: []\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [0, 6000].</li>\n\t<li>-100 &lt;= Node.val &lt;= 100</li>\n</ul>Follow-up:\n<ul>\n\t<li>You may only use constant extra space.</li>\n\t<li>The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.</li>\n</ul>\n\n"test_case": [\n  [1,2,3,4,5,null,7]\n  []\n],\n"test_case_output": [\'[1,#,2,3,#,4,5,7,#]\', \'[]\'],\n"test_case_explanation": [\n  "Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with &#39;#&#39; signifying the end of each level.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\nstruct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\nInitially, all next pointers are set to NULL.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2019/02/14/116_sample.png" style="width: 500px; height: 171px;" />\nInput: root = [1,2,3,4,5,6,7]\nOutput: [1,#,2,3,#,4,5,6,7,#]\nExplanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with &#39;#&#39; signifying the end of each level.\n<strong class="example">Example 2:\nInput: root = []\nOutput: []\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [0, 2<sup>12</sup> - 1].</li>\n\t<li>-1000 &lt;= Node.val &lt;= 1000</li>\n</ul>Follow-up:\n<ul>\n\t<li>You may only use constant extra space.</li>\n\t<li>The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.</li>\n</ul>\n\n"test_case": [\n  [1,2,3,4,5,6,7]\n  []\n],\n"test_case_output": [\'[1,#,2,3,#,4,5,6,7,#]\', \'[]\'],\n"test_case_explanation": [\n  "Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with &#39;#&#39; signifying the end of each level.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven two strings s and t, return <i>the number of distinct</i> <i>subsequences</i><i> of </i>s<i> which equals </i>t.\nThe test cases are generated so that the answer fits on a 32-bit signed integer.<strong class="example">Example 1:\nInput: s = rabbbit, t = rabbit\nOutput: 3\nExplanation:\nAs shown below, there are 3 ways you can generate rabbit from s.\nrabbbit\nrabbbit\nrabbbit\n<strong class="example">Example 2:\nInput: s = babgbag, t = bag\nOutput: 5\nExplanation:\nAs shown below, there are 5 ways you can generate bag from s.\nbabgbag\nbabgbag\nbabgbag\nbabgbag\nbabgbagConstraints:\n<ul>\n\t<li>1 &lt;= s.length, t.length &lt;= 1000</li>\n\t<li>s and t consist of English letters.</li>\n</ul>\n\n"test_case": [\n  "rabbbit"\n"rabbit"\n  "babgbag"\n"bag"\n],\n"test_case_output": [\'3\', \'5\'],\n"test_case_explanation": [\n  "As shown below, there are 3 ways you can generate rabbit from s.\nrabbbit\nrabbbit\nrabbbit\n"\n\n  "As shown below, there are 5 ways you can generate bag from s.\nbabgbag\nbabgbag\nbabgbag\nbabgbag\nbabgbagConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the root of a binary tree, flatten the tree into a linked list:\n<ul>\n\t<li>The linked list should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.</li>\n\t<li>The linked list should be in the same order as a <a href="https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR" target="_blank">pre-order traversal</a> of the binary tree.</li>\n</ul><strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/14/flaten.jpg" style="width: 500px; height: 226px;" />\nInput: root = [1,2,5,3,4,null,6]\nOutput: [1,null,2,null,3,null,4,null,5,null,6]\n<strong class="example">Example 2:\nInput: root = []\nOutput: []\n<strong class="example">Example 3:\nInput: root = [0]\nOutput: [0]\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [0, 2000].</li>\n\t<li>-100 &lt;= Node.val &lt;= 100</li>\n</ul>Follow up: Can you flatten the tree in-place (with O(1) extra space)?\n"test_case": [\n  [1,2,5,3,4,null,6]\n  []\n  [0]\n],\n"test_case_output": [\'[1,null,2,null,3,null,4,null,5,null,6]\', \'[]\', \'[0]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.\nA root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/18/pathsumii1.jpg" style="width: 500px; height: 356px;" />\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\nOutput: [[5,4,11,2],[5,8,4,5]]\nExplanation: There are two paths whose sum equals targetSum:\n5 + 4 + 11 + 2 = 22\n5 + 8 + 4 + 5 = 22\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg" style="width: 212px; height: 181px;" />\nInput: root = [1,2,3], targetSum = 5\nOutput: []\n<strong class="example">Example 3:\nInput: root = [1,2], targetSum = 0\nOutput: []\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [0, 5000].</li>\n\t<li>-1000 &lt;= Node.val &lt;= 1000</li>\n\t<li>-1000 &lt;= targetSum &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  [5,4,8,11,null,13,4,7,2,null,null,5,1]\n22\n  [1,2,3]\n5\n  [1,2]\n0\n],\n"test_case_output": [\'[[5,4,11,2],[5,8,4,5]]\', \'[]\', \'[]\'],\n"test_case_explanation": [\n  "There are two paths whose sum equals targetSum:\n5 + 4 + 11 + 2 = 22\n5 + 8 + 4 + 5 = 22\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.\nA leaf is a node with no children.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/18/pathsum1.jpg" style="width: 500px; height: 356px;" />\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\nOutput: true\nExplanation: The root-to-leaf path with the target sum is shown.\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg" />\nInput: root = [1,2,3], targetSum = 5\nOutput: false\nExplanation: There two root-to-leaf paths in the tree:\n(1 --&gt; 2): The sum is 3.\n(1 --&gt; 3): The sum is 4.\nThere is no root-to-leaf path with sum = 5.\n<strong class="example">Example 3:\nInput: root = [], targetSum = 0\nOutput: false\nExplanation: Since the tree is empty, there are no root-to-leaf paths.\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [0, 5000].</li>\n\t<li>-1000 &lt;= Node.val &lt;= 1000</li>\n\t<li>-1000 &lt;= targetSum &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  [5,4,8,11,null,13,4,7,2,null,null,null,1]\n22\n  [1,2,3]\n5\n  []\n0\n],\n"test_case_output": [\'true\', \'false\', \'false\'],\n"test_case_explanation": [\n  "The root-to-leaf path with the target sum is shown.\n"\n\n  "There two root-to-leaf paths in the tree:\n(1 --&gt; 2): The sum is 3.\n(1 --&gt; 3): The sum is 4.\nThere is no root-to-leaf path with sum = 5.\n"\n\n  "Since the tree is empty, there are no root-to-leaf paths.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a binary tree, find its minimum depth.\nThe minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\nNote:A leaf is a node with no children.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/10/12/ex_depth.jpg" style="width: 432px; height: 302px;" />\nInput: root = [3,9,20,null,null,15,7]\nOutput: 2\n<strong class="example">Example 2:\nInput: root = [2,null,3,null,4,null,5,null,6]\nOutput: 5\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [0, 10<sup>5</sup>].</li>\n\t<li>-1000 &lt;= Node.val &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  [3,9,20,null,null,15,7]\n  [2,null,3,null,4,null,5,null,6]\n],\n"test_case_output": [\'2\', \'5\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a binary tree, determine if it is <span data-keyword="height-balanced">height-balanced</span>.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/10/06/balance_1.jpg" style="width: 342px; height: 221px;" />\nInput: root = [3,9,20,null,null,15,7]\nOutput: true\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/10/06/balance_2.jpg" style="width: 452px; height: 301px;" />\nInput: root = [1,2,2,3,3,null,null,4,4]\nOutput: false\n<strong class="example">Example 3:\nInput: root = []\nOutput: true\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [0, 5000].</li>\n\t<li>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  [3,9,20,null,null,15,7]\n  [1,2,2,3,3,null,null,4,4]\n  []\n],\n"test_case_output": [\'true\', \'false\', \'true\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the head of a singly linked list where elements are sorted in ascending order, convert it to a <span data-keyword="height-balanced">height-balanced</span> binary search tree.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/08/17/linked.jpg" style="width: 500px; height: 388px;" />\nInput: head = [-10,-3,0,5,9]\nOutput: [0,-3,9,-10,null,5]\nExplanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.\n<strong class="example">Example 2:\nInput: head = []\nOutput: []\nConstraints:\n<ul>\n\t<li>The number of nodes in head is in the range [0, 2 * 10<sup>4</sup>].</li>\n\t<li>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></li>\n</ul>\n\n"test_case": [\n  [-10,-3,0,5,9]\n  []\n],\n"test_case_output": [\'[0,-3,9,-10,null,5]\', \'[]\'],\n"test_case_explanation": [\n  "One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums where the elements are sorted in ascending order, convert it to a <span data-keyword="height-balanced">height-balanced</span> binary search tree.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/02/18/btree1.jpg" style="width: 302px; height: 222px;" />\nInput: nums = [-10,-3,0,5,9]\nOutput: [0,-3,9,-10,null,5]\nExplanation: [0,-10,5,null,-3,null,9] is also accepted:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/02/18/btree2.jpg" style="width: 302px; height: 222px;" />\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/02/18/btree.jpg" style="width: 342px; height: 142px;" />\nInput: nums = [1,3]\nOutput: [3,1]\nExplanation: [1,null,3] and [3,1] are both height-balanced BSTs.\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>4</sup></li>\n\t<li>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></li>\n\t<li>nums is sorted in a strictly increasing order.</li>\n</ul>\n\n"test_case": [\n  [-10,-3,0,5,9]\n  [1,3]\n],\n"test_case_output": [\'[0,-3,9,-10,null,5]\', \'[3,1]\'],\n"test_case_explanation": [\n  "[0,-10,5,null,-3,null,9] is also accepted:\n"\n\n  "[1,null,3] and [3,1] are both height-balanced BSTs.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the root of a binary tree, return the bottom-up level order traversal of its nodes&#39; values. (i.e., from left to right, level by level from leaf to root).<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg" style="width: 277px; height: 302px;" />\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[15,7],[9,20],[3]]\n<strong class="example">Example 2:\nInput: root = [1]\nOutput: [[1]]\n<strong class="example">Example 3:\nInput: root = []\nOutput: []\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [0, 2000].</li>\n\t<li>-1000 &lt;= Node.val &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  [3,9,20,null,null,15,7]\n  [1]\n  []\n],\n"test_case_output": [\'[[15,7],[9,20],[3]]\', \'[[1]]\', \'[]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/02/19/tree.jpg" style="width: 277px; height: 302px;" />\nInput: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\nOutput: [3,9,20,null,null,15,7]\n<strong class="example">Example 2:\nInput: inorder = [-1], postorder = [-1]\nOutput: [-1]\nConstraints:\n<ul>\n\t<li>1 &lt;= inorder.length &lt;= 3000</li>\n\t<li>postorder.length == inorder.length</li>\n\t<li>-3000 &lt;= inorder[i], postorder[i] &lt;= 3000</li>\n\t<li>inorder and postorder consist of unique values.</li>\n\t<li>Each value of postorder also appears in inorder.</li>\n\t<li>inorder is guaranteed to be the inorder traversal of the tree.</li>\n\t<li>postorder is guaranteed to be the postorder traversal of the tree.</li>\n</ul>\n\n"test_case": [\n  [9,3,15,20,7]\n[9,15,7,20,3]\n  [-1]\n[-1]\n],\n"test_case_output": [\'[3,9,20,null,null,15,7]\', \'[-1]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/02/19/tree.jpg" style="width: 277px; height: 302px;" />\nInput: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\nOutput: [3,9,20,null,null,15,7]\n<strong class="example">Example 2:\nInput: preorder = [-1], inorder = [-1]\nOutput: [-1]\nConstraints:\n<ul>\n\t<li>1 &lt;= preorder.length &lt;= 3000</li>\n\t<li>inorder.length == preorder.length</li>\n\t<li>-3000 &lt;= preorder[i], inorder[i] &lt;= 3000</li>\n\t<li>preorder and inorder consist of unique values.</li>\n\t<li>Each value of inorder also appears in preorder.</li>\n\t<li>preorder is guaranteed to be the preorder traversal of the tree.</li>\n\t<li>inorder is guaranteed to be the inorder traversal of the tree.</li>\n</ul>\n\n"test_case": [\n  [3,9,20,15,7]\n[9,3,15,20,7]\n  [-1]\n[-1]\n],\n"test_case_output": [\'[3,9,20,null,null,15,7]\', \'[-1]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the root of a binary tree, return its maximum depth.\nA binary tree&#39;s maximum depthis the number of nodes along the longest path from the root node down to the farthest leaf node.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg" style="width: 400px; height: 277px;" />\nInput: root = [3,9,20,null,null,15,7]\nOutput: 3\n<strong class="example">Example 2:\nInput: root = [1,null,2]\nOutput: 2\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [0, 10<sup>4</sup>].</li>\n\t<li>-100 &lt;= Node.val &lt;= 100</li>\n</ul>\n\n"test_case": [\n  [3,9,20,null,null,15,7]\n  [1,null,2]\n],\n"test_case_output": [\'3\', \'2\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the root of a binary tree, return the zigzag level order traversal of its nodes&#39; values. (i.e., from left to right, then right to left for the next level and alternate between).<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg" style="width: 277px; height: 302px;" />\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[3],[20,9],[15,7]]\n<strong class="example">Example 2:\nInput: root = [1]\nOutput: [[1]]\n<strong class="example">Example 3:\nInput: root = []\nOutput: []\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [0, 2000].</li>\n\t<li>-100 &lt;= Node.val &lt;= 100</li>\n</ul>\n\n"test_case": [\n  [3,9,20,null,null,15,7]\n  [1]\n  []\n],\n"test_case_output": [\'[[3],[20,9],[15,7]]\', \'[[1]]\', \'[]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the root of a binary tree, return the level order traversal of its nodes&#39; values. (i.e., from left to right, level by level).<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg" style="width: 277px; height: 302px;" />\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[3],[9,20],[15,7]]\n<strong class="example">Example 2:\nInput: root = [1]\nOutput: [[1]]\n<strong class="example">Example 3:\nInput: root = []\nOutput: []\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [0, 2000].</li>\n\t<li>-1000 &lt;= Node.val &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  [3,9,20,null,null,15,7]\n  [1]\n  []\n],\n"test_case_output": [\'[[3],[9,20],[15,7]]\', \'[[1]]\', \'[]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/02/19/symtree1.jpg" style="width: 354px; height: 291px;" />\nInput: root = [1,2,2,3,4,4,3]\nOutput: true\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/02/19/symtree2.jpg" style="width: 308px; height: 258px;" />\nInput: root = [1,2,2,null,3,null,3]\nOutput: false\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [1, 1000].</li>\n\t<li>-100 &lt;= Node.val &lt;= 100</li>\n</ul>Follow up: Could you solve it both recursively and iteratively?\n"test_case": [\n  [1,2,2,3,4,4,3]\n  [1,2,2,null,3,null,3]\n],\n"test_case_output": [\'true\', \'false\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the roots of two binary trees p and q, write a function to check if they are the same or not.\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/12/20/ex1.jpg" style="width: 622px; height: 182px;" />\nInput: p = [1,2,3], q = [1,2,3]\nOutput: true\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/12/20/ex2.jpg" style="width: 382px; height: 182px;" />\nInput: p = [1,2], q = [1,null,2]\nOutput: false\n<strong class="example">Example 3:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/12/20/ex3.jpg" style="width: 622px; height: 182px;" />\nInput: p = [1,2,1], q = [1,1,2]\nOutput: false\nConstraints:\n<ul>\n\t<li>The number of nodes in both trees is in the range [0, 100].</li>\n\t<li>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  [1,2,3]\n[1,2,3]\n  [1,2]\n[1,null,2]\n  [1,2,1]\n[1,1,2]\n],\n"test_case_output": [\'true\', \'false\', \'false\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/10/28/recover1.jpg" style="width: 422px; height: 302px;" />\nInput: root = [1,3,null,null,2]\nOutput: [3,1,null,null,2]\nExplanation: 3 cannot be a left child of 1 because 3 &gt; 1. Swapping 1 and 3 makes the BST valid.\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/10/28/recover2.jpg" style="width: 581px; height: 302px;" />\nInput: root = [3,1,4,null,null,2]\nOutput: [2,1,4,null,null,3]\nExplanation: 2 cannot be in the right subtree of 3 because 2 &lt; 3. Swapping 2 and 3 makes the BST valid.\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [2, 1000].</li>\n\t<li>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</li>\n</ul>Follow up: A solution using O(n) space is pretty straight-forward. Could you devise a constant O(1) space solution?\n"test_case": [\n  [1,3,null,null,2]\n  [3,1,4,null,null,2]\n],\n"test_case_output": [\'[3,1,null,null,2]\', \'[2,1,4,null,null,3]\'],\n"test_case_explanation": [\n  "3 cannot be a left child of 1 because 3 &gt; 1. Swapping 1 and 3 makes the BST valid.\n"\n\n  "2 cannot be in the right subtree of 3 because 2 &lt; 3. Swapping 2 and 3 makes the BST valid.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the root of a binary tree, determine if it is a valid binary search tree (BST).\nA valid BST is defined as follows:\n<ul>\n\t<li>The left <span data-keyword="subtree">subtree</span> of a node contains only nodes with keys less than the node&#39;s key.</li>\n\t<li>The right subtree of a node contains only nodes with keys greater than the node&#39;s key.</li>\n\t<li>Both the left and right subtrees must also be binary search trees.</li>\n</ul><strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/12/01/tree1.jpg" style="width: 302px; height: 182px;" />\nInput: root = [2,1,3]\nOutput: true\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/12/01/tree2.jpg" style="width: 422px; height: 292px;" />\nInput: root = [5,1,4,null,null,3,6]\nOutput: false\nExplanation: The root node&#39;s value is 5 but its right child&#39;s value is 4.\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [1, 10<sup>4</sup>].</li>\n\t<li>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</li>\n</ul>\n\n"test_case": [\n  [2,1,3]\n  [5,1,4,null,null,3,6]\n],\n"test_case_output": [\'true\', \'false\'],\n"test_case_explanation": [\n  "The root node&#39;s value is 5 but its right child&#39;s value is 4.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.\nAn interleaving of two strings s and t is a configuration where s and t are divided into n and m <span data-keyword="substring-nonempty">substrings</span> respectively, such that:\n<ul>\n\t<li>s = s<sub>1</sub> + s<sub>2</sub> + ... + s<sub>n</sub></li>\n\t<li>t = t<sub>1</sub> + t<sub>2</sub> + ... + t<sub>m</sub></li>\n\t<li>|n - m| &lt;= 1</li>\n\t<li>The interleaving is s<sub>1</sub> + t<sub>1</sub> + s<sub>2</sub> + t<sub>2</sub> + s<sub>3</sub> + t<sub>3</sub> + ... or t<sub>1</sub> + s<sub>1</sub> + t<sub>2</sub> + s<sub>2</sub> + t<sub>3</sub> + s<sub>3</sub> + ...</li>\n</ul>\nNote: a + b is the concatenation of strings a and b.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/09/02/interleave.jpg" style="width: 561px; height: 203px;" />\nInput: s1 = aabcc, s2 = dbbca, s3 = aadbbcbcac\nOutput: true\nExplanation: One way to obtain s3 is:\nSplit s1 into s1 = aa + bc + c, and s2 into s2 = dbbc + a.\nInterleaving the two splits, we get aa + dbbc + bc + a + c = aadbbcbcac.\nSince s3 can be obtained by interleaving s1 and s2, we return true.\n<strong class="example">Example 2:\nInput: s1 = aabcc, s2 = dbbca, s3 = aadbbbaccc\nOutput: false\nExplanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.\n<strong class="example">Example 3:\nInput: s1 = , s2 = , s3 = \nOutput: true\nConstraints:\n<ul>\n\t<li>0 &lt;= s1.length, s2.length &lt;= 100</li>\n\t<li>0 &lt;= s3.length &lt;= 200</li>\n\t<li>s1, s2, and s3 consist of lowercase English letters.</li>\n</ul>Follow up: Could you solve it using only O(s2.length) additional memory space?\n\n"test_case": [\n  "aabcc"\n"dbbca"\n"aadbbcbcac"\n  "aabcc"\n"dbbca"\n"aadbbbaccc"\n  ""\n""\n""\n],\n"test_case_output": [\'true\', \'false\', \'true\'],\n"test_case_explanation": [\n  "One way to obtain s3 is:\nSplit s1 into s1 = aa + bc + c, and s2 into s2 = dbbc + a.\nInterleaving the two splits, we get aa + dbbc + bc + a + c = aadbbcbcac.\nSince s3 can be obtained by interleaving s1 and s2, we return true.\n"\n\n  "Notice how it is impossible to interleave s2 with any other string to obtain s3.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer n, return the number of structurally unique BST&#39;s (binary search trees) which has exactly n nodes of unique values from 1 to n.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg" style="width: 600px; height: 148px;" />\nInput: n = 3\nOutput: 5\n<strong class="example">Example 2:\nInput: n = 1\nOutput: 1\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 19</li>\n</ul>\n\n"test_case": [\n  3\n  1\n],\n"test_case_output": [\'5\', \'1\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer n, return all the structurally unique BST&#39;s (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg" style="width: 600px; height: 148px;" />\nInput: n = 3\nOutput: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\n<strong class="example">Example 2:\nInput: n = 1\nOutput: [[1]]\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 8</li>\n</ul>\n\n"test_case": [\n  3\n  1\n],\n"test_case_output": [\'[[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\', \'[[1]]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the root of a binary tree, return the inorder traversal of its nodes&#39; values.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg" style="width: 125px; height: 200px;" />\nInput: root = [1,null,2,3]\nOutput: [1,3,2]\n<strong class="example">Example 2:\nInput: root = []\nOutput: []\n<strong class="example">Example 3:\nInput: root = [1]\nOutput: [1]\nConstraints:\n<ul>\n\t<li>The number of nodes in the tree is in the range [0, 100].</li>\n\t<li>-100 &lt;= Node.val &lt;= 100</li>\n</ul>Follow up: Recursive solution is trivial, could you do it iteratively?\n"test_case": [\n  [1,null,2,3]\n  []\n  [1]\n],\n"test_case_output": [\'[1,3,2]\', \'[]\', \'[1]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nA valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.\n<ul>\n\t<li>For example, 0.1.2.201 and 192.168.1.1 are valid IP addresses, but 0.011.255.245, 192.168.1.312 and 192.168@1.1 are invalid IP addresses.</li>\n</ul>\nGiven a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.<strong class="example">Example 1:\nInput: s = 25525511135\nOutput: [255.255.11.135,255.255.111.35]\n<strong class="example">Example 2:\nInput: s = 0000\nOutput: [0.0.0.0]\n<strong class="example">Example 3:\nInput: s = 101023\nOutput: [1.0.10.23,1.0.102.3,10.1.0.23,10.10.2.3,101.0.2.3]\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 20</li>\n\t<li>s consists of digits only.</li>\n</ul>\n\n"test_case": [\n  "25525511135"\n  "0000"\n  "101023"\n],\n"test_case_output": [\'[255.255.11.135,255.255.111.35]\', \'[0.0.0.0]\', \'[1.0.10.23,1.0.102.3,10.1.0.23,10.10.2.3,101.0.2.3]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the head of a singly linked list and two integers left and right where left &lt;= right, reverse the nodes of the list from position left to position right, and return the reversed list.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/02/19/rev2ex2.jpg" style="width: 542px; height: 222px;" />\nInput: head = [1,2,3,4,5], left = 2, right = 4\nOutput: [1,4,3,2,5]\n<strong class="example">Example 2:\nInput: head = [5], left = 1, right = 1\nOutput: [5]\nConstraints:\n<ul>\n\t<li>The number of nodes in the list is n.</li>\n\t<li>1 &lt;= n &lt;= 500</li>\n\t<li>-500 &lt;= Node.val &lt;= 500</li>\n\t<li>1 &lt;= left &lt;= right &lt;= n</li>\n</ul>Follow up: Could you do it in one pass?\n"test_case": [\n  [1,2,3,4,5]\n2\n4\n  [5]\n1\n1\n],\n"test_case_output": [\'[1,4,3,2,5]\', \'[5]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nA message containing letters from A-Z can be encoded into numbers using the following mapping:\n&#39;A&#39; -&gt; 1\n&#39;B&#39; -&gt; 2\n...\n&#39;Z&#39; -&gt; 26\nTo decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, 11106 can be mapped into:\n<ul>\n\t<li>AAJF with the grouping (1 1 10 6)</li>\n\t<li>KJF with the grouping (11 10 6)</li>\n</ul>\nNote that the grouping (1 11 06) is invalid because 06 cannot be mapped into &#39;F&#39; since 6 is different from 06.\nGiven a string s containing only digits, return the number of ways to decode it.\nThe test cases are generated so that the answer fits in a 32-bit integer.<strong class="example">Example 1:\nInput: s = 12\nOutput: 2\nExplanation: 12 could be decoded as AB (1 2) or L (12).\n<strong class="example">Example 2:\nInput: s = 226\nOutput: 3\nExplanation: 226 could be decoded as BZ (2 26), VF (22 6), or BBF (2 2 6).\n<strong class="example">Example 3:\nInput: s = 06\nOutput: 0\nExplanation: 06 cannot be mapped to F because of the leading zero (6 is different from 06).\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 100</li>\n\t<li>s contains only digits and may contain leading zero(s).</li>\n</ul>\n\n"test_case": [\n  "12"\n  "226"\n  "06"\n],\n"test_case_output": [\'2\', \'3\', \'0\'],\n"test_case_explanation": [\n  "12 could be decoded as AB (1 2) or L (12).\n"\n\n  "226 could be decoded as BZ (2 26), VF (22 6), or BBF (2 2 6).\n"\n\n  "06 cannot be mapped to F because of the leading zero (6 is different from 06).\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums that may contain duplicates, return all possible <span data-keyword="subset">subsets</span> (the power set).\nThe solution set must not contain duplicate subsets. Return the solution in any order.<strong class="example">Example 1:\nInput: nums = [1,2,2]\nOutput: [[],[1],[1,2],[1,2,2],[2],[2,2]]\n<strong class="example">Example 2:\nInput: nums = [0]\nOutput: [[],[0]]\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10</li>\n\t<li>-10 &lt;= nums[i] &lt;= 10</li>\n</ul>\n\n"test_case": [\n  [1,2,2]\n  [0]\n],\n"test_case_output": [\'[[],[1],[1,2],[1,2,2],[2],[2,2]]\', \'[[],[0]]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nAn n-bit gray code sequence is a sequence of 2<sup>n</sup> integers where:\n<ul>\n\t<li>Every integer is in the inclusive range [0, 2<sup>n</sup> - 1],</li>\n\t<li>The first integer is 0,</li>\n\t<li>An integer appears no more than once in the sequence,</li>\n\t<li>The binary representation of every pair of adjacent integers differs by exactly one bit, and</li>\n\t<li>The binary representation of the first and last integers differs by exactly one bit.</li>\n</ul>\nGiven an integer n, return any valid n-bit gray code sequence.<strong class="example">Example 1:\nInput: n = 2\nOutput: [0,1,3,2]\nExplanation:\nThe binary representation of [0,1,3,2] is [00,01,11,10].\n- 00 and 01 differ by one bit\n- 01 and 11 differ by one bit\n- 11 and 10 differ by one bit\n- 10 and 00 differ by one bit\n[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].\n- 00 and 10 differ by one bit\n- 10 and 11 differ by one bit\n- 11 and 01 differ by one bit\n- 01 and 00 differ by one bit\n<strong class="example">Example 2:\nInput: n = 1\nOutput: [0,1]\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 16</li>\n</ul>\n\n"test_case": [\n  2\n  1\n],\n"test_case_output": [\'[0,1,3,2]\', \'[0,1]\'],\n"test_case_explanation": [\n  "The binary representation of [0,1,3,2] is [00,01,11,10].\n- 00 and 01 differ by one bit\n- 01 and 11 differ by one bit\n- 11 and 10 differ by one bit\n- 10 and 00 differ by one bit\n[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].\n- 00 and 10 differ by one bit\n- 10 and 11 differ by one bit\n- 11 and 01 differ by one bit\n- 01 and 00 differ by one bit\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.\nMerge nums1 and nums2 into a single array sorted in non-decreasing order.\nThe final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.<strong class="example">Example 1:\nInput: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\nOutput: [1,2,2,3,5,6]\nExplanation: The arrays we are merging are [1,2,3] and [2,5,6].\nThe result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.\n<strong class="example">Example 2:\nInput: nums1 = [1], m = 1, nums2 = [], n = 0\nOutput: [1]\nExplanation: The arrays we are merging are [1] and [].\nThe result of the merge is [1].\n<strong class="example">Example 3:\nInput: nums1 = [0], m = 0, nums2 = [1], n = 1\nOutput: [1]\nExplanation: The arrays we are merging are [] and [1].\nThe result of the merge is [1].\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\nConstraints:\n<ul>\n\t<li>nums1.length == m + n</li>\n\t<li>nums2.length == n</li>\n\t<li>0 &lt;= m, n &lt;= 200</li>\n\t<li>1 &lt;= m + n &lt;= 200</li>\n\t<li>-10<sup>9</sup> &lt;= nums1[i], nums2[j] &lt;= 10<sup>9</sup></li>\n</ul>Follow up: Can you come up with an algorithm that runs in O(m + n) time?\n\n"test_case": [\n  [1,2,3,0,0,0]\n3\n[2,5,6]\n3\n  [1]\n1\n[]\n0\n  [0]\n0\n[1]\n1\n],\n"test_case_output": [\'[1,2,2,3,5,6]\', \'[1]\', \'[1]\'],\n"test_case_explanation": [\n  "The arrays we are merging are [1,2,3] and [2,5,6].\nThe result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.\n"\n\n  "The arrays we are merging are [1] and [].\nThe result of the merge is [1].\n"\n\n  "The arrays we are merging are [] and [1].\nThe result of the merge is [1].\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nWe can scramble a string s to get a string t using the following algorithm:\n<ol>\n\t<li>If the length of the string is 1, stop.</li>\n\t<li>If the length of the string is &gt; 1, do the following:\n\t<ul>\n\t\t<li>Split the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.</li>\n\t\t<li>Randomlydecide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x.</li>\n\t\t<li>Apply step 1 recursively on each of the two substrings x and y.</li>\n\t</ul>\n\t</li>\n</ol>\nGiven two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.<strong class="example">Example 1:\nInput: s1 = great, s2 = rgeat\nOutput: true\nExplanation: One possible scenario applied on s1 is:\ngreat --&gt; gr/eat // divide at random index.\ngr/eat --&gt; gr/eat // random decision is not to swap the two substrings and keep them in order.\ngr/eat --&gt; g/r / e/at // apply the same algorithm recursively on both substrings. divide at random index each of them.\ng/r / e/at --&gt; r/g / e/at // random decision was to swap the first substring and to keep the second substring in the same order.\nr/g / e/at --&gt; r/g / e/ a/t // again apply the algorithm recursively, divide at to a/t.\nr/g / e/ a/t --&gt; r/g / e/ a/t // random decision is to keep both substrings in the same order.\nThe algorithm stops now, and the result string is rgeat which is s2.\nAs one possible scenario led s1 to be scrambled to s2, we return true.\n<strong class="example">Example 2:\nInput: s1 = abcde, s2 = caebd\nOutput: false\n<strong class="example">Example 3:\nInput: s1 = a, s2 = a\nOutput: true\nConstraints:\n<ul>\n\t<li>s1.length == s2.length</li>\n\t<li>1 &lt;= s1.length &lt;= 30</li>\n\t<li>s1 and s2 consist of lowercase English letters.</li>\n</ul>\n\n"test_case": [\n  "great"\n"rgeat"\n  "abcde"\n"caebd"\n  "a"\n"a"\n],\n"test_case_output": [\'true\', \'false\', \'true\'],\n"test_case_explanation": [\n  "One possible scenario applied on s1 is:\ngreat --&gt; gr/eat // divide at random index.\ngr/eat --&gt; gr/eat // random decision is not to swap the two substrings and keep them in order.\ngr/eat --&gt; g/r / e/at // apply the same algorithm recursively on both substrings. divide at random index each of them.\ng/r / e/at --&gt; r/g / e/at // random decision was to swap the first substring and to keep the second substring in the same order.\nr/g / e/at --&gt; r/g / e/ a/t // again apply the algorithm recursively, divide at to a/t.\nr/g / e/ a/t --&gt; r/g / e/ a/t // random decision is to keep both substrings in the same order.\nThe algorithm stops now, and the result string is rgeat which is s2.\nAs one possible scenario led s1 to be scrambled to s2, we return true.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.\nYou should preserve the original relative order of the nodes in each of the two partitions.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/04/partition.jpg" style="width: 662px; height: 222px;" />\nInput: head = [1,4,3,2,5,2], x = 3\nOutput: [1,2,2,4,3,5]\n<strong class="example">Example 2:\nInput: head = [2,1], x = 2\nOutput: [1,2]\nConstraints:\n<ul>\n\t<li>The number of nodes in the list is in the range [0, 200].</li>\n\t<li>-100 &lt;= Node.val &lt;= 100</li>\n\t<li>-200 &lt;= x &lt;= 200</li>\n</ul>\n\n"test_case": [\n  [1,4,3,2,5,2]\n3\n  [2,1]\n2\n],\n"test_case_output": [\'[1,2,2,4,3,5]\', \'[1,2]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a rows x colsbinary matrix filled with 0&#39;s and 1&#39;s, find the largest rectangle containing only 1&#39;s and return its area.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/09/14/maximal.jpg" style="width: 402px; height: 322px;" />\nInput: matrix = [[1,0,1,0,0],[1,0,1,1,1],[1,1,1,1,1],[1,0,0,1,0]]\nOutput: 6\nExplanation: The maximal rectangle is shown in the above picture.\n<strong class="example">Example 2:\nInput: matrix = [[0]]\nOutput: 0\n<strong class="example">Example 3:\nInput: matrix = [[1]]\nOutput: 1\nConstraints:\n<ul>\n\t<li>rows == matrix.length</li>\n\t<li>cols == matrix[i].length</li>\n\t<li>1 &lt;= row, cols &lt;= 200</li>\n\t<li>matrix[i][j] is &#39;0&#39; or &#39;1&#39;.</li>\n</ul>\n\n"test_case": [\n  [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]\n  [["0"]]\n  [["1"]]\n],\n"test_case_output": [\'6\', \'0\', \'1\'],\n"test_case_explanation": [\n  "The maximal rectangle is shown in the above picture.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an array of integers heights representing the histogram&#39;s bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/04/histogram.jpg" style="width: 522px; height: 242px;" />\nInput: heights = [2,1,5,6,2,3]\nOutput: 10\nExplanation: The above is a histogram where width of each bar is 1.\nThe largest rectangle is shown in the red area, which has an area = 10 units.\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/04/histogram-1.jpg" style="width: 202px; height: 362px;" />\nInput: heights = [2,4]\nOutput: 4\nConstraints:\n<ul>\n\t<li>1 &lt;= heights.length &lt;= 10<sup>5</sup></li>\n\t<li>0 &lt;= heights[i] &lt;= 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  [2,1,5,6,2,3]\n  [2,4]\n],\n"test_case_output": [\'10\', \'4\'],\n"test_case_explanation": [\n  "The above is a histogram where width of each bar is 1.\nThe largest rectangle is shown in the red area, which has an area = 10 units.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/04/list1.jpg" style="width: 302px; height: 242px;" />\nInput: head = [1,1,2]\nOutput: [1,2]\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/04/list2.jpg" style="width: 542px; height: 222px;" />\nInput: head = [1,1,2,3,3]\nOutput: [1,2,3]\nConstraints:\n<ul>\n\t<li>The number of nodes in the list is in the range [0, 300].</li>\n\t<li>-100 &lt;= Node.val &lt;= 100</li>\n\t<li>The list is guaranteed to be sorted in ascending order.</li>\n</ul>\n\n"test_case": [\n  [1,1,2]\n  [1,1,2,3,3]\n],\n"test_case_output": [\'[1,2]\', \'[1,2,3]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/04/linkedlist1.jpg" style="width: 500px; height: 142px;" />\nInput: head = [1,2,3,3,4,4,5]\nOutput: [1,2,5]\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2021/01/04/linkedlist2.jpg" style="width: 500px; height: 205px;" />\nInput: head = [1,1,1,2,3]\nOutput: [2,3]\nConstraints:\n<ul>\n\t<li>The number of nodes in the list is in the range [0, 300].</li>\n\t<li>-100 &lt;= Node.val &lt;= 100</li>\n\t<li>The list is guaranteed to be sorted in ascending order.</li>\n</ul>\n\n"test_case": [\n  [1,2,3,3,4,4,5]\n  [1,1,1,2,3]\n],\n"test_case_output": [\'[1,2,5]\', \'[2,3]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThere is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).\nBefore being passed to your function, nums is rotated at an unknown pivot index k (0 &lt;= k &lt; nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].\nGiven the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.\nYou must decrease the overall operation steps as much as possible.<strong class="example">Example 1:\nInput: nums = [2,5,6,0,0,1,2], target = 0\nOutput: true\n<strong class="example">Example 2:\nInput: nums = [2,5,6,0,0,1,2], target = 3\nOutput: false\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 5000</li>\n\t<li>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></li>\n\t<li>nums is guaranteed to be rotated at some pivot.</li>\n\t<li>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></li>\n</ul>Follow up: This problem is similar to<a href="/problems/search-in-rotated-sorted-array/description/" target="_blank">Search in Rotated Sorted Array</a>, butnums may contain duplicates. Would this affect the runtime complexity? How and why?\n\n"test_case": [\n  [2,5,6,0,0,1,2]\n0\n  [2,5,6,0,0,1,2]\n3\n],\n"test_case_output": [\'true\', \'false\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums sorted in non-decreasing order, remove some duplicates <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank">in-place</a> such that each unique element appears at most twice. The relative order of the elements should be kept the same.\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of numsshould hold the final result. It does not matter what you leave beyond the firstkelements.\nReturn k after placing the final result in the first k slots of nums.\nDo not allocate extra space for another array. You must do this by modifying the input array <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank">in-place</a> with O(1) extra memory.\nCustom Judge:\nThe judge will test your solution with the following code:\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\nint k = removeDuplicates(nums); // Calls your implementation\nassert k == expectedNums.length;\nfor (int i = 0; i &lt; k; i++) {\n    assert nums[i] == expectedNums[i];\n}\nIf all assertions pass, then your solution will be accepted.<strong class="example">Example 1:\nInput: nums = [1,1,1,2,2,3]\nOutput: 5, nums = [1,1,2,2,3,_]\nExplanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n<strong class="example">Example 2:\nInput: nums = [0,0,1,1,1,1,2,3,3]\nOutput: 7, nums = [0,0,1,1,2,3,3,_,_]\nExplanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></li>\n\t<li>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></li>\n\t<li>nums is sorted in non-decreasing order.</li>\n</ul>\n\n"test_case": [\n  [1,1,1,2,2,3]\n  [0,0,1,1,1,1,2,3,3]\n],\n"test_case_output": [\'5, nums = [1,1,2,2,3,_]\', \'7, nums = [0,0,1,1,2,3,3,_,_]\'],\n"test_case_explanation": [\n  "Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n"\n\n  "Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an m x n grid of characters board and a string word, return true if word exists in the grid.\nThe word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/11/04/word2.jpg" style="width: 322px; height: 242px;" />\nInput: board = [[A,B,C,E],[S,F,C,S],[A,D,E,E]], word = ABCCED\nOutput: true\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/11/04/word-1.jpg" style="width: 322px; height: 242px;" />\nInput: board = [[A,B,C,E],[S,F,C,S],[A,D,E,E]], word = SEE\nOutput: true\n<strong class="example">Example 3:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/10/15/word3.jpg" style="width: 322px; height: 242px;" />\nInput: board = [[A,B,C,E],[S,F,C,S],[A,D,E,E]], word = ABCB\nOutput: false\nConstraints:\n<ul>\n\t<li>m == board.length</li>\n\t<li>n = board[i].length</li>\n\t<li>1 &lt;= m, n &lt;= 6</li>\n\t<li>1 &lt;= word.length &lt;= 15</li>\n\t<li>board and word consists of only lowercase and uppercase English letters.</li>\n</ul>Follow up: Could you use search pruning to make your solution faster with a larger board?\n\n"test_case": [\n  [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]]\n"ABCCED"\n  [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]]\n"SEE"\n  [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]]\n"ABCB"\n],\n"test_case_output": [\'true\', \'true\', \'false\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums of unique elements, return all possible <span data-keyword="subset">subsets</span> (the power set).\nThe solution set must not contain duplicate subsets. Return the solution in any order.<strong class="example">Example 1:\nInput: nums = [1,2,3]\nOutput: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n<strong class="example">Example 2:\nInput: nums = [0]\nOutput: [[],[0]]\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10</li>\n\t<li>-10 &lt;= nums[i] &lt;= 10</li>\n\t<li>All the numbers ofnums are unique.</li>\n</ul>\n\n"test_case": [\n  [1,2,3]\n  [0]\n],\n"test_case_output": [\'[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\', \'[[],[0]]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].\nYou may return the answer in any order.<strong class="example">Example 1:\nInput: n = 4, k = 2\nOutput: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\nExplanation: There are 4 choose 2 = 6 total combinations.\nNote that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.\n<strong class="example">Example 2:\nInput: n = 1, k = 1\nOutput: [[1]]\nExplanation: There is 1 choose 1 = 1 total combination.\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 20</li>\n\t<li>1 &lt;= k &lt;= n</li>\n</ul>\n\n"test_case": [\n  4\n2\n  1\n1\n],\n"test_case_output": [\'[[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\', \'[[1]]\'],\n"test_case_explanation": [\n  "There are 4 choose 2 = 6 total combinations.\nNote that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.\n"\n\n  "There is 1 choose 1 = 1 total combination.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven two strings s and t of lengths m and n respectively, return the minimum window <span data-keyword="substring-nonempty">substring</span> of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string .\nThe testcases will be generated such that the answer is unique.<strong class="example">Example 1:\nInput: s = ADOBECODEBANC, t = ABC\nOutput: BANC\nExplanation: The minimum window substring BANC includes &#39;A&#39;, &#39;B&#39;, and &#39;C&#39; from string t.\n<strong class="example">Example 2:\nInput: s = a, t = a\nOutput: a\nExplanation: The entire string s is the minimum window.\n<strong class="example">Example 3:\nInput: s = a, t = aa\nOutput: \nExplanation: Both &#39;a&#39;s from t must be included in the window.\nSince the largest window of s only has one &#39;a&#39;, return empty string.\nConstraints:\n<ul>\n\t<li>m == s.length</li>\n\t<li>n == t.length</li>\n\t<li>1 &lt;= m, n &lt;= 10<sup>5</sup></li>\n\t<li>s and t consist of uppercase and lowercase English letters.</li>\n</ul>Follow up: Could you find an algorithm that runs in O(m + n) time?\n\n"test_case": [\n  "ADOBECODEBANC"\n"ABC"\n  "a"\n"a"\n  "a"\n"aa"\n],\n"test_case_output": [\'BANC\', \'a\', \'\'],\n"test_case_explanation": [\n  "The minimum window substring BANC includes &#39;A&#39;, &#39;B&#39;, and &#39;C&#39; from string t.\n"\n\n  "The entire string s is the minimum window.\n"\n\n  "Both &#39;a&#39;s from t must be included in the window.\nSince the largest window of s only has one &#39;a&#39;, return empty string.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an array nums with n objects colored red, white, or blue, sort them <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank">in-place</a> so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\nWe will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.\nYou must solve this problem without using the library&#39;s sort function.<strong class="example">Example 1:\nInput: nums = [2,0,2,1,1,0]\nOutput: [0,0,1,1,2,2]\n<strong class="example">Example 2:\nInput: nums = [2,0,1]\nOutput: [0,1,2]\nConstraints:\n<ul>\n\t<li>n == nums.length</li>\n\t<li>1 &lt;= n &lt;= 300</li>\n\t<li>nums[i] is either 0, 1, or 2.</li>\n</ul>Follow up:Could you come up with a one-pass algorithm using onlyconstant extra space?\n\n"test_case": [\n  [2,0,2,1,1,0]\n  [2,0,1]\n],\n"test_case_output": [\'[0,0,1,1,2,2]\', \'[0,1,2]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an m x n integer matrix matrix with the following two properties:\n<ul>\n\t<li>Each row is sorted in non-decreasing order.</li>\n\t<li>The first integer of each row is greater than the last integer of the previous row.</li>\n</ul>\nGiven an integer target, return true if target is in matrix or false otherwise.\nYou must write a solution in O(log(m * n)) time complexity.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/10/05/mat.jpg" style="width: 322px; height: 242px;" />\nInput: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\nOutput: true\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/10/05/mat2.jpg" style="width: 322px; height: 242px;" />\nInput: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\nOutput: false\nConstraints:\n<ul>\n\t<li>m == matrix.length</li>\n\t<li>n == matrix[i].length</li>\n\t<li>1 &lt;= m, n &lt;= 100</li>\n\t<li>-10<sup>4</sup> &lt;= matrix[i][j], target &lt;= 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  [[1,3,5,7],[10,11,16,20],[23,30,34,60]]\n3\n  [[1,3,5,7],[10,11,16,20],[23,30,34,60]]\n13\n],\n"test_case_output": [\'true\', \'false\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0&#39;s.\nYou must do it <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank">in place</a>.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/08/17/mat1.jpg" style="width: 450px; height: 169px;" />\nInput: matrix = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: [[1,0,1],[0,0,0],[1,0,1]]\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/08/17/mat2.jpg" style="width: 450px; height: 137px;" />\nInput: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\nOutput: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\nConstraints:\n<ul>\n\t<li>m == matrix.length</li>\n\t<li>n == matrix[0].length</li>\n\t<li>1 &lt;= m, n &lt;= 200</li>\n\t<li>-2<sup>31</sup> &lt;= matrix[i][j] &lt;= 2<sup>31</sup> - 1</li>\n</ul>Follow up:\n<ul>\n\t<li>A straightforward solution using O(mn) space is probably a bad idea.</li>\n\t<li>A simple improvement uses O(m + n) space, but still not the best solution.</li>\n\t<li>Could you devise a constant space solution?</li>\n</ul>\n\n"test_case": [\n  [[1,1,1],[1,0,1],[1,1,1]]\n  [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\n],\n"test_case_output": [\'[[1,0,1],[0,0,0],[1,0,1]]\', \'[[0,0,0,0],[0,4,5,0],[0,3,1,0]]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\nYou have the following three operations permitted on a word:\n<ul>\n\t<li>Insert a character</li>\n\t<li>Delete a character</li>\n\t<li>Replace a character</li>\n</ul><strong class="example">Example 1:\nInput: word1 = horse, word2 = ros\nOutput: 3\nExplanation: \nhorse -&gt; rorse (replace &#39;h&#39; with &#39;r&#39;)\nrorse -&gt; rose (remove &#39;r&#39;)\nrose -&gt; ros (remove &#39;e&#39;)\n<strong class="example">Example 2:\nInput: word1 = intention, word2 = execution\nOutput: 5\nExplanation: \nintention -&gt; inention (remove &#39;t&#39;)\ninention -&gt; enention (replace &#39;i&#39; with &#39;e&#39;)\nenention -&gt; exention (replace &#39;n&#39; with &#39;x&#39;)\nexention -&gt; exection (replace &#39;n&#39; with &#39;c&#39;)\nexection -&gt; execution (insert &#39;u&#39;)\nConstraints:\n<ul>\n\t<li>0 &lt;= word1.length, word2.length &lt;= 500</li>\n\t<li>word1 and word2 consist of lowercase English letters.</li>\n</ul>\n\n"test_case": [\n  "horse"\n"ros"\n  "intention"\n"execution"\n],\n"test_case_output": [\'3\', \'5\'],\n"test_case_explanation": [\n  "horse -&gt; rorse (replace &#39;h&#39; with &#39;r&#39;)\nrorse -&gt; rose (remove &#39;r&#39;)\nrose -&gt; ros (remove &#39;e&#39;)\n"\n\n  "intention -&gt; inention (remove &#39;t&#39;)\ninention -&gt; enention (replace &#39;i&#39; with &#39;e&#39;)\nenention -&gt; exention (replace &#39;n&#39; with &#39;x&#39;)\nexention -&gt; exection (replace &#39;n&#39; with &#39;c&#39;)\nexection -&gt; execution (insert &#39;u&#39;)\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a string path, which is an absolute path (starting with a slash &#39;/&#39;) to a file or directory in a Unix-style file system, convert it to the simplified canonical path.\nIn a Unix-style file system, a period &#39;.&#39; refers to the current directory, a double period &#39;..&#39; refers to the directory up a level, and any multiple consecutive slashes (i.e. &#39;//&#39;) are treated as a single slash &#39;/&#39;. For this problem, any other format of periods such as &#39;...&#39; are treated as file/directory names.\nThe canonical path should have the following format:\n<ul>\n\t<li>The path starts with a single slash &#39;/&#39;.</li>\n\t<li>Any two directories are separated by a single slash &#39;/&#39;.</li>\n\t<li>The path does not end with a trailing &#39;/&#39;.</li>\n\t<li>The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period &#39;.&#39; or double period &#39;..&#39;)</li>\n</ul>\nReturn the simplified canonical path.<strong class="example">Example 1:\nInput: path = /home/\nOutput: /home\nExplanation: Note that there is no trailing slash after the last directory name.\n<strong class="example">Example 2:\nInput: path = /../\nOutput: /\nExplanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.\n<strong class="example">Example 3:\nInput: path = /home//foo/\nOutput: /home/foo\nExplanation: In the canonical path, multiple consecutive slashes are replaced by a single one.\nConstraints:\n<ul>\n\t<li>1 &lt;= path.length &lt;= 3000</li>\n\t<li>path consists of English letters, digits, period &#39;.&#39;, slash &#39;/&#39; or &#39;_&#39;.</li>\n\t<li>path is a valid absolute Unix path.</li>\n</ul>\n\n"test_case": [\n  "/home/"\n  "/../"\n  "/home//foo/"\n],\n"test_case_output": [\'/home\', \'/\', \'/home/foo\'],\n"test_case_explanation": [\n  "Note that there is no trailing slash after the last directory name.\n"\n\n  "Going one level up from the root directory is a no-op, as the root level is the highest level you can go.\n"\n\n  "In the canonical path, multiple consecutive slashes are replaced by a single one.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are climbing a staircase. It takes n steps to reach the top.\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?<strong class="example">Example 1:\nInput: n = 2\nOutput: 2\nExplanation: There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps\n<strong class="example">Example 2:\nInput: n = 3\nOutput: 3\nExplanation: There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 45</li>\n</ul>\n\n"test_case": [\n  2\n  3\n],\n"test_case_output": [\'2\', \'3\'],\n"test_case_explanation": [\n  "There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps\n"\n\n  "There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.\nYou must not use any built-in exponent function or operator.\n<ul>\n\t<li>For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.</li>\n</ul><strong class="example">Example 1:\nInput: x = 4\nOutput: 2\nExplanation: The square root of 4 is 2, so we return 2.\n<strong class="example">Example 2:\nInput: x = 8\nOutput: 2\nExplanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.\nConstraints:\n<ul>\n\t<li>0 &lt;= x &lt;= 2<sup>31</sup> - 1</li>\n</ul>\n\n"test_case": [\n  4\n  8\n],\n"test_case_output": [\'2\', \'2\'],\n"test_case_explanation": [\n  "The square root of 4 is 2, so we return 2.\n"\n\n  "The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.\nYou should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces &#39; &#39; when necessary so that each line has exactly maxWidth characters.\nExtra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\nFor the last line of text, it should be left-justified, and no extra space is inserted between words.\nNote:\n<ul>\n\t<li>A word is defined as a character sequence consisting of non-space characters only.</li>\n\t<li>Each word&#39;s length is guaranteed to be greater than 0 and not exceed maxWidth.</li>\n\t<li>The input array words contains at least one word.</li>\n</ul><strong class="example">Example 1:\nInput: words = [This, is, an, example, of, text, justification.], maxWidth = 16\nOutput:\n[\n This  is  an,\n example of text,\n justification. \n]\n<strong class="example">Example 2:\nInput: words = [What,must,be,acknowledgment,shall,be], maxWidth = 16\nOutput:\n[\n What  must  be,\n acknowledgment ,\n shall be    \n]\nExplanation: Note that the last line is shall be     instead of shall     be, because the last line must be left-justified instead of fully-justified.\nNote that the second line is also left-justified because it contains only one word.\n<strong class="example">Example 3:\nInput: words = [Science,is,what,we,understand,well,enough,to,explain,to,a,computer.,Art,is,everything,else,we,do], maxWidth = 20\nOutput:\n[\n Science is what we,\n  understand   well,\n enough to explain to,\n a computer. Art is,\n everything else we,\n do         \n]Constraints:\n<ul>\n\t<li>1 &lt;= words.length &lt;= 300</li>\n\t<li>1 &lt;= words[i].length &lt;= 20</li>\n\t<li>words[i] consists of only English letters and symbols.</li>\n\t<li>1 &lt;= maxWidth &lt;= 100</li>\n\t<li>words[i].length &lt;= maxWidth</li>\n</ul>\n\n"test_case": [\n  ["This", "is", "an", "example", "of", "text", "justification."]\n16\n  ["What","must","be","acknowledgment","shall","be"]\n16\n  ["Science","is","what","we","understand","well","enough","to","explain","to","a","computer.","Art","is","everything","else","we","do"]\n20\n],\n"test_case_output": [],\n"test_case_explanation": [\n  "Note that the last line is shall be     instead of shall     be, because the last line must be left-justified instead of fully-justified.\nNote that the second line is also left-justified because it contains only one word.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven two binary strings a and b, return their sum as a binary string.<strong class="example">Example 1:\nInput: a = "11", b = "1"\nOutput: "100"\n<strong class="example">Example 2:\nInput: a = "1010", b = "1011"\nOutput: "10101"\nConstraints:\n<ul>\n\t<li>1 &lt;= a.length, b.length &lt;= 10<sup>4</sup></li>\n\t<li>a and b consistonly of &#39;0&#39; or &#39;1&#39; characters.</li>\n\t<li>Each string does not contain leading zeros except for the zero itself.</li>\n</ul>\n\n"test_case": [\n  "11"\n"1"\n  "1010"\n"1011"\n],\n"test_case_output": [\'"100"\', \'"10101"\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a large integer represented as an integer array digits, where each digits[i] is the i<sup>th</sup> digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0&#39;s.\nIncrement the large integer by one and return the resulting array of digits.<strong class="example">Example 1:\nInput: digits = [1,2,3]\nOutput: [1,2,4]\nExplanation: The array represents the integer 123.\nIncrementing by one gives 123 + 1 = 124.\nThus, the result should be [1,2,4].\n<strong class="example">Example 2:\nInput: digits = [4,3,2,1]\nOutput: [4,3,2,2]\nExplanation: The array represents the integer 4321.\nIncrementing by one gives 4321 + 1 = 4322.\nThus, the result should be [4,3,2,2].\n<strong class="example">Example 3:\nInput: digits = [9]\nOutput: [1,0]\nExplanation: The array represents the integer 9.\nIncrementing by one gives 9 + 1 = 10.\nThus, the result should be [1,0].\nConstraints:\n<ul>\n\t<li>1 &lt;= digits.length &lt;= 100</li>\n\t<li>0 &lt;= digits[i] &lt;= 9</li>\n\t<li>digits does not contain any leading 0&#39;s.</li>\n</ul>\n\n"test_case": [\n  [1,2,3]\n  [4,3,2,1]\n  [9]\n],\n"test_case_output": [\'[1,2,4]\', \'[4,3,2,2]\', \'[1,0]\'],\n"test_case_explanation": [\n  "The array represents the integer 123.\nIncrementing by one gives 123 + 1 = 124.\nThus, the result should be [1,2,4].\n"\n\n  "The array represents the integer 4321.\nIncrementing by one gives 4321 + 1 = 4322.\nThus, the result should be [4,3,2,2].\n"\n\n  "The array represents the integer 9.\nIncrementing by one gives 9 + 1 = 10.\nThus, the result should be [1,0].\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nA valid number can be split up into these components (in order):\n<ol>\n\t<li>A decimal number or an integer.</li>\n\t<li>(Optional) An &#39;e&#39; or &#39;E&#39;, followed by an integer.</li>\n</ol>\nA decimal number can be split up into these components (in order):\n<ol>\n\t<li>(Optional) A sign character (either &#39;+&#39; or &#39;-&#39;).</li>\n\t<li>One of the following formats:\n\t<ol>\n\t\t<li>One or more digits, followed by a dot &#39;.&#39;.</li>\n\t\t<li>One or more digits, followed by a dot &#39;.&#39;, followed by one or more digits.</li>\n\t\t<li>A dot &#39;.&#39;, followed by one or more digits.</li>\n\t</ol>\n\t</li>\n</ol>\nAn integer can be split up into these components (in order):\n<ol>\n\t<li>(Optional) A sign character (either &#39;+&#39; or &#39;-&#39;).</li>\n\t<li>One or more digits.</li>\n</ol>\nFor example, all the following are valid numbers: [2, 0089, -0.1, +3.14, 4., -.9, 2e10, -90E3, 3e+7, +6e-1, 53.5e93, -123.456e789], while the following are not valid numbers: [abc, 1a, 1e, e3, 99e2.5, --6, -+3, 95a54e53].\nGiven a string s, return true if s is a valid number.<strong class="example">Example 1:\nInput: s = 0\nOutput: true\n<strong class="example">Example 2:\nInput: s = e\nOutput: false\n<strong class="example">Example 3:\nInput: s = .\nOutput: false\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 20</li>\n\t<li>s consists of only English letters (both uppercase and lowercase), digits (0-9), plus &#39;+&#39;, minus &#39;-&#39;, or dot &#39;.&#39;.</li>\n</ul>\n\n"test_case": [\n  "0"\n  "e"\n  "."\n],\n"test_case_output": [\'true\', \'false\', \'false\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\nNote: You can only move either down or right at any point in time.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/11/05/minpath.jpg" style="width: 242px; height: 242px;" />\nInput: grid = [[1,3,1],[1,5,1],[4,2,1]]\nOutput: 7\nExplanation: Because the path 1 &rarr; 3 &rarr; 1 &rarr; 1 &rarr; 1 minimizes the sum.\n<strong class="example">Example 2:\nInput: grid = [[1,2,3],[4,5,6]]\nOutput: 12\nConstraints:\n<ul>\n\t<li>m == grid.length</li>\n\t<li>n == grid[i].length</li>\n\t<li>1 &lt;= m, n &lt;= 200</li>\n\t<li>0 &lt;= grid[i][j] &lt;= 200</li>\n</ul>\n\n"test_case": [\n  [[1,3,1],[1,5,1],[4,2,1]]\n  [[1,2,3],[4,5,6]]\n],\n"test_case_output": [\'7\', \'12\'],\n"test_case_explanation": [\n  "Because the path 1 &rarr; 3 &rarr; 1 &rarr; 1 &rarr; 1 minimizes the sum.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\nAn obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.\nReturn the number of possible unique paths that the robot can take to reach the bottom-right corner.\nThe testcases are generated so that the answer will be less than or equal to 2 * 10<sup>9</sup>.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/11/04/robot1.jpg" style="width: 242px; height: 242px;" />\nInput: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\nOutput: 2\nExplanation: There is one obstacle in the middle of the 3x3 grid above.\nThere are two ways to reach the bottom-right corner:\n1. Right -&gt; Right -&gt; Down -&gt; Down\n2. Down -&gt; Down -&gt; Right -&gt; Right\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/11/04/robot2.jpg" style="width: 162px; height: 162px;" />\nInput: obstacleGrid = [[0,1],[0,0]]\nOutput: 1\nConstraints:\n<ul>\n\t<li>m == obstacleGrid.length</li>\n\t<li>n == obstacleGrid[i].length</li>\n\t<li>1 &lt;= m, n &lt;= 100</li>\n\t<li>obstacleGrid[i][j] is 0 or 1.</li>\n</ul>\n\n"test_case": [\n  [[0,0,0],[0,1,0],[0,0,0]]\n  [[0,1],[0,0]]\n],\n"test_case_output": [\'2\', \'1\'],\n"test_case_explanation": [\n  "There is one obstacle in the middle of the 3x3 grid above.\nThere are two ways to reach the bottom-right corner:\n1. Right -&gt; Right -&gt; Down -&gt; Down\n2. Down -&gt; Down -&gt; Right -&gt; Right\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThere is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\nGiven the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.\nThe test cases are generated so that the answer will be less than or equal to 2 * 10<sup>9</sup>.<strong class="example">Example 1:\n<img src="https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png" style="width: 400px; height: 183px;" />\nInput: m = 3, n = 7\nOutput: 28\n<strong class="example">Example 2:\nInput: m = 3, n = 2\nOutput: 3\nExplanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -&gt; Down -&gt; Down\n2. Down -&gt; Down -&gt; Right\n3. Down -&gt; Right -&gt; Down\nConstraints:\n<ul>\n\t<li>1 &lt;= m, n &lt;= 100</li>\n</ul>\n\n"test_case": [\n  3\n7\n  3\n2\n],\n"test_case_output": [\'28\', \'3\'],\n"test_case_explanation": [\n  "From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -&gt; Down -&gt; Down\n2. Down -&gt; Down -&gt; Right\n3. Down -&gt; Right -&gt; Down\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the head of a linkedlist, rotate the list to the right by k places.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/11/13/rotate1.jpg" style="width: 450px; height: 191px;" />\nInput: head = [1,2,3,4,5], k = 2\nOutput: [4,5,1,2,3]\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/11/13/roate2.jpg" style="width: 305px; height: 350px;" />\nInput: head = [0,1,2], k = 4\nOutput: [2,0,1]\nConstraints:\n<ul>\n\t<li>The number of nodes in the list is in the range [0, 500].</li>\n\t<li>-100 &lt;= Node.val &lt;= 100</li>\n\t<li>0 &lt;= k &lt;= 2 * 10<sup>9</sup></li>\n</ul>\n\n"test_case": [\n  [1,2,3,4,5]\n2\n  [0,1,2]\n4\n],\n"test_case_output": [\'[4,5,1,2,3]\', \'[2,0,1]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThe set [1, 2, 3, ...,n] contains a total of n! unique permutations.\nBy listing and labeling all of the permutations in order, we get the following sequence for n = 3:\n<ol>\n\t<li>123</li>\n\t<li>132</li>\n\t<li>213</li>\n\t<li>231</li>\n\t<li>312</li>\n\t<li>321</li>\n</ol>\nGiven n and k, return the k<sup>th</sup> permutation sequence.<strong class="example">Example 1:\nInput: n = 3, k = 3\nOutput: "213"\n<strong class="example">Example 2:\nInput: n = 4, k = 9\nOutput: "2314"\n<strong class="example">Example 3:\nInput: n = 3, k = 1\nOutput: "123"\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 9</li>\n\t<li>1 &lt;= k &lt;= n!</li>\n</ul>\n\n"test_case": [\n  3\n3\n  4\n9\n  3\n1\n],\n"test_case_output": [\'"213"\', \'"2314"\', \'"123"\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a positive integer n, generate an n x n matrix filled with elements from 1 to n<sup>2</sup> in spiral order.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg" style="width: 242px; height: 242px;" />\nInput: n = 3\nOutput: [[1,2,3],[8,9,4],[7,6,5]]\n<strong class="example">Example 2:\nInput: n = 1\nOutput: [[1]]\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 20</li>\n</ul>\n\n"test_case": [\n  3\n  1\n],\n"test_case_output": [\'[[1,2,3],[8,9,4],[7,6,5]]\', \'[[1]]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a string s consisting of words and spaces, return the length of the last word in the string.\nA word is a maximal <span data-keyword="substring-nonempty">substring</span> consisting of non-space characters only.<strong class="example">Example 1:\nInput: s = Hello World\nOutput: 5\nExplanation: The last word is World with length 5.\n<strong class="example">Example 2:\nInput: s =    fly me   to   the moon  \nOutput: 4\nExplanation: The last word is moon with length 4.\n<strong class="example">Example 3:\nInput: s = luffy is still joyboy\nOutput: 6\nExplanation: The last word is joyboy with length 6.\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 10<sup>4</sup></li>\n\t<li>s consists of only English letters and spaces &#39; &#39;.</li>\n\t<li>There will be at least one word in s.</li>\n</ul>\n\n"test_case": [\n  "Hello World"\n  "   fly me   to   the moon  "\n  "luffy is still joyboy"\n],\n"test_case_output": [\'5\', \'4\', \'6\'],\n"test_case_explanation": [\n  "The last word is World with length 5.\n"\n\n  "The last word is moon with length 4.\n"\n\n  "The last word is joyboy with length 6.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an array of non-overlapping intervals intervals where intervals[i] = [start<sub>i</sub>, end<sub>i</sub>] represent the start and the end of the i<sup>th</sup> interval and intervals is sorted in ascending order by start<sub>i</sub>. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.\nInsert newInterval into intervals such that intervals is still sorted in ascending order by start<sub>i</sub> and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\nReturn intervals after the insertion.<strong class="example">Example 1:\nInput: intervals = [[1,3],[6,9]], newInterval = [2,5]\nOutput: [[1,5],[6,9]]\n<strong class="example">Example 2:\nInput: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\nOutput: [[1,2],[3,10],[12,16]]\nExplanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\nConstraints:\n<ul>\n\t<li>0 &lt;= intervals.length &lt;= 10<sup>4</sup></li>\n\t<li>intervals[i].length == 2</li>\n\t<li>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>5</sup></li>\n\t<li>intervals is sorted by start<sub>i</sub> in ascending order.</li>\n\t<li>newInterval.length == 2</li>\n\t<li>0 &lt;= start &lt;= end &lt;= 10<sup>5</sup></li>\n</ul>\n\n"test_case": [\n  [[1,3],[6,9]]\n[2,5]\n  [[1,2],[3,5],[6,7],[8,10],[12,16]]\n[4,8]\n],\n"test_case_output": [\'[[1,5],[6,9]]\', \'[[1,2],[3,10],[12,16]]\'],\n"test_case_explanation": [\n  "Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an arrayof intervalswhere intervals[i] = [start<sub>i</sub>, end<sub>i</sub>], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.<strong class="example">Example 1:\nInput: intervals = [[1,3],[2,6],[8,10],[15,18]]\nOutput: [[1,6],[8,10],[15,18]]\nExplanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n<strong class="example">Example 2:\nInput: intervals = [[1,4],[4,5]]\nOutput: [[1,5]]\nExplanation: Intervals [1,4] and [4,5] are considered overlapping.\nConstraints:\n<ul>\n\t<li>1 &lt;= intervals.length &lt;= 10<sup>4</sup></li>\n\t<li>intervals[i].length == 2</li>\n\t<li>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  [[1,3],[2,6],[8,10],[15,18]]\n  [[1,4],[4,5]]\n],\n"test_case_output": [\'[[1,6],[8,10],[15,18]]\', \'[[1,5]]\'],\n"test_case_explanation": [\n  "Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n"\n\n  "Intervals [1,4] and [4,5] are considered overlapping.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an integer array nums. You are initially positioned at the array&#39;s first index, and each element in the array represents your maximum jump length at that position.\nReturn true if you can reach the last index, or false otherwise.<strong class="example">Example 1:\nInput: nums = [2,3,1,1,4]\nOutput: true\nExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n<strong class="example">Example 2:\nInput: nums = [3,2,1,0,4]\nOutput: false\nExplanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>4</sup></li>\n\t<li>0 &lt;= nums[i] &lt;= 10<sup>5</sup></li>\n</ul>\n\n"test_case": [\n  [2,3,1,1,4]\n  [3,2,1,0,4]\n],\n"test_case_output": [\'true\', \'false\'],\n"test_case_explanation": [\n  "Jump 1 step from index 0 to 1, then 3 steps to the last index.\n"\n\n  "You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an m x n matrix, return all elements of the matrix in spiral order.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg" style="width: 242px; height: 242px;" />\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [1,2,3,6,9,8,7,4,5]\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg" style="width: 322px; height: 242px;" />\nInput: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\nOutput: [1,2,3,4,8,12,11,10,9,5,6,7]\nConstraints:\n<ul>\n\t<li>m == matrix.length</li>\n\t<li>n == matrix[i].length</li>\n\t<li>1 &lt;= m, n &lt;= 10</li>\n\t<li>-100 &lt;= matrix[i][j] &lt;= 100</li>\n</ul>\n\n"test_case": [\n  [[1,2,3],[4,5,6],[7,8,9]]\n  [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n],\n"test_case_output": [\'[1,2,3,6,9,8,7,4,5]\', \'[1,2,3,4,8,12,11,10,9,5,6,7]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums, find the <span data-keyword="subarray-nonempty">subarray</span> with the largest sum, and return its sum.<strong class="example">Example 1:\nInput: nums = [-2,1,-3,4,-1,2,1,-5,4]\nOutput: 6\nExplanation: The subarray [4,-1,2,1] has the largest sum 6.\n<strong class="example">Example 2:\nInput: nums = [1]\nOutput: 1\nExplanation: The subarray [1] has the largest sum 1.\n<strong class="example">Example 3:\nInput: nums = [5,4,-1,7,8]\nOutput: 23\nExplanation: The subarray [5,4,-1,7,8] has the largest sum 23.\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>5</sup></li>\n\t<li>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></li>\n</ul>Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.\n\n"test_case": [\n  [-2,1,-3,4,-1,2,1,-5,4]\n  [1]\n  [5,4,-1,7,8]\n],\n"test_case_output": [\'6\', \'1\', \'23\'],\n"test_case_explanation": [\n  "The subarray [4,-1,2,1] has the largest sum 6.\n"\n\n  "The subarray [1] has the largest sum 1.\n"\n\n  "The subarray [5,4,-1,7,8] has the largest sum 23.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThe n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\nGiven an integer n, return the number of distinct solutions to then-queens puzzle.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/11/13/queens.jpg" style="width: 600px; height: 268px;" />\nInput: n = 4\nOutput: 2\nExplanation: There are two distinct solutions to the 4-queens puzzle as shown.\n<strong class="example">Example 2:\nInput: n = 1\nOutput: 1\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 9</li>\n</ul>\n\n"test_case": [\n  4\n  1\n],\n"test_case_output": [\'2\', \'1\'],\n"test_case_explanation": [\n  "There are two distinct solutions to the 4-queens puzzle as shown.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThe n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\nGiven an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.\nEach solution contains a distinct board configuration of the n-queens&#39; placement, where &#39;Q&#39; and &#39;.&#39; both indicate a queen and an empty space, respectively.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/11/13/queens.jpg" style="width: 600px; height: 268px;" />\nInput: n = 4\nOutput: [[.Q..,...Q,Q...,..Q.],[..Q.,Q...,...Q,.Q..]]\nExplanation: There exist two distinct solutions to the 4-queens puzzle as shown above\n<strong class="example">Example 2:\nInput: n = 1\nOutput: [[Q]]\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 9</li>\n</ul>\n\n"test_case": [\n  4\n  1\n],\n"test_case_output": [\'[[.Q..,...Q,Q...,..Q.],[..Q.,Q...,...Q,.Q..]]\', \'[[Q]]\'],\n"test_case_explanation": [\n  "There exist two distinct solutions to the 4-queens puzzle as shown above\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nImplement <a href="http://www.cplusplus.com/reference/valarray/pow/" target="_blank">pow(x, n)</a>, which calculates x raised to the power n (i.e., x<sup>n</sup>).<strong class="example">Example 1:\nInput: x = 2.00000, n = 10\nOutput: 1024.00000\n<strong class="example">Example 2:\nInput: x = 2.10000, n = 3\nOutput: 9.26100\n<strong class="example">Example 3:\nInput: x = 2.00000, n = -2\nOutput: 0.25000\nExplanation: 2<sup>-2</sup> = 1/2<sup>2</sup> = 1/4 = 0.25\nConstraints:\n<ul>\n\t<li>-100.0 &lt; x &lt; 100.0</li>\n\t<li>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup>-1</li>\n\t<li>n is an integer.</li>\n\t<li>Either x is not zero or n &gt; 0.</li>\n\t<li>-10<sup>4</sup> &lt;= x<sup>n</sup> &lt;= 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  2.00000\n10\n  2.10000\n3\n  2.00000\n-2\n],\n"test_case_output": [\'1024.00000\', \'9.26100\', \'0.25000\'],\n"test_case_explanation": [\n  "2"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\nYou have to rotate the image <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank">in-place</a>, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/08/28/mat1.jpg" style="width: 500px; height: 188px;" />\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[7,4,1],[8,5,2],[9,6,3]]\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/08/28/mat2.jpg" style="width: 500px; height: 201px;" />\nInput: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\nOutput: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\nConstraints:\n<ul>\n\t<li>n == matrix.length == matrix[i].length</li>\n\t<li>1 &lt;= n &lt;= 20</li>\n\t<li>-1000 &lt;= matrix[i][j] &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  [[1,2,3],[4,5,6],[7,8,9]]\n  [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\n],\n"test_case_output": [\'[[7,4,1],[8,5,2],[9,6,3]]\', \'[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a collection of numbers, nums,that might contain duplicates, return all possible unique permutations in any order.<strong class="example">Example 1:\nInput: nums = [1,1,2]\nOutput:\n[[1,1,2],\n [1,2,1],\n [2,1,1]]\n<strong class="example">Example 2:\nInput: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 8</li>\n\t<li>-10 &lt;= nums[i] &lt;= 10</li>\n</ul>\n\n"test_case": [\n  [1,1,2]\n  [1,2,3]\n],\n"test_case_output": [\'[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.<strong class="example">Example 1:\nInput: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n<strong class="example">Example 2:\nInput: nums = [0,1]\nOutput: [[0,1],[1,0]]\n<strong class="example">Example 3:\nInput: nums = [1]\nOutput: [[1]]\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 6</li>\n\t<li>-10 &lt;= nums[i] &lt;= 10</li>\n\t<li>All the integers of nums are unique.</li>\n</ul>\n\n"test_case": [\n  [1,2,3]\n  [0,1]\n  [1]\n],\n"test_case_output": [\'[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\', \'[[0,1],[1,0]]\', \'[[1]]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].\nEach element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:\n<ul>\n\t<li>0 &lt;= j &lt;= nums[i] and</li>\n\t<li>i + j &lt; n</li>\n</ul>\nReturn the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].<strong class="example">Example 1:\nInput: nums = [2,3,1,1,4]\nOutput: 2\nExplanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\n<strong class="example">Example 2:\nInput: nums = [2,3,0,1,4]\nOutput: 2\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>4</sup></li>\n\t<li>0 &lt;= nums[i] &lt;= 1000</li>\n\t<li>It&#39;s guaranteed that you can reach nums[n - 1].</li>\n</ul>\n\n"test_case": [\n  [2,3,1,1,4]\n  [2,3,0,1,4]\n],\n"test_case_output": [\'2\', \'2\'],\n"test_case_explanation": [\n  "The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an input string (s) and a pattern (p), implement wildcard pattern matching with support for &#39;?&#39; and &#39;*&#39; where:\n<ul>\n\t<li>&#39;?&#39; Matches any single character.</li>\n\t<li>&#39;*&#39; Matches any sequence of characters (including the empty sequence).</li>\n</ul>\nThe matching should cover the entire input string (not partial).<strong class="example">Example 1:\nInput: s = aa, p = a\nOutput: false\nExplanation: a does not match the entire string aa.\n<strong class="example">Example 2:\nInput: s = aa, p = *\nOutput: true\nExplanation:&#39;*&#39; matches any sequence.\n<strong class="example">Example 3:\nInput: s = cb, p = ?a\nOutput: false\nExplanation:&#39;?&#39; matches &#39;c&#39;, but the second letter is &#39;a&#39;, which does not match &#39;b&#39;.\nConstraints:\n<ul>\n\t<li>0 &lt;= s.length, p.length &lt;= 2000</li>\n\t<li>s contains only lowercase English letters.</li>\n\t<li>p contains only lowercase English letters, &#39;?&#39; or &#39;*&#39;.</li>\n</ul>\n\n"test_case": [\n  "aa"\n"a"\n  "aa"\n"*"\n  "cb"\n"?a"\n],\n"test_case_output": [\'false\', \'true\', \'false\'],\n"test_case_explanation": [\n  "a does not match the entire string aa.\n"\n\n  "&#39;*&#39; matches any sequence.\n"\n\n  "&#39;?&#39; matches &#39;c&#39;, but the second letter is &#39;a&#39;, which does not match &#39;b&#39;.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\nNote:You must not use any built-in BigInteger library or convert the inputs to integer directly.<strong class="example">Example 1:\nInput: num1 = "2", num2 = "3"\nOutput: "6"\n<strong class="example">Example 2:\nInput: num1 = "123", num2 = "456"\nOutput: "56088"\nConstraints:\n<ul>\n\t<li>1 &lt;= num1.length, num2.length &lt;= 200</li>\n\t<li>num1 and num2 consist of digits only.</li>\n\t<li>Both num1 and num2do not contain any leading zero, except the number 0 itself.</li>\n</ul>\n\n"test_case": [\n  "2"\n"3"\n  "123"\n"456"\n],\n"test_case_output": [\'"6"\', \'"56088"\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.<strong class="example">Example 1:\n<img src="https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png" style="width: 412px; height: 161px;" />\nInput: height = [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n<strong class="example">Example 2:\nInput: height = [4,2,0,3,2,5]\nOutput: 9\nConstraints:\n<ul>\n\t<li>n == height.length</li>\n\t<li>1 &lt;= n &lt;= 2 * 10<sup>4</sup></li>\n\t<li>0 &lt;= height[i] &lt;= 10<sup>5</sup></li>\n</ul>\n\n"test_case": [\n  [0,1,0,2,1,0,1,3,2,1,2,1]\n  [4,2,0,3,2,5]\n],\n"test_case_output": [\'6\', \'9\'],\n"test_case_explanation": [\n  "The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an unsorted integer array nums, return the smallest missing positive integer.\nYou must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space.<strong class="example">Example 1:\nInput: nums = [1,2,0]\nOutput: 3\nExplanation: The numbers in the range [1,2] are all in the array.\n<strong class="example">Example 2:\nInput: nums = [3,4,-1,1]\nOutput: 2\nExplanation: 1 is in the array but 2 is missing.\n<strong class="example">Example 3:\nInput: nums = [7,8,9,11,12]\nOutput: 1\nExplanation: The smallest positive integer 1 is missing.\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>5</sup></li>\n\t<li>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</li>\n</ul>\n\n"test_case": [\n  [1,2,0]\n  [3,4,-1,1]\n  [7,8,9,11,12]\n],\n"test_case_output": [\'3\', \'2\', \'1\'],\n"test_case_explanation": [\n  "The numbers in the range [1,2] are all in the array.\n"\n\n  "1 is in the array but 2 is missing.\n"\n\n  "The smallest positive integer 1 is missing.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidateswhere the candidate numbers sum to target.\nEach number in candidatesmay only be used once in the combination.\nNote:The solution set must not contain duplicate combinations.<strong class="example">Example 1:\nInput: candidates = [10,1,2,7,6,1,5], target = 8\nOutput: \n[\n[1,1,6],\n[1,2,5],\n[1,7],\n[2,6]\n]\n<strong class="example">Example 2:\nInput: candidates = [2,5,2,1,2], target = 5\nOutput: \n[\n[1,2,2],\n[5]\n]\nConstraints:\n<ul>\n\t<li>1 &lt;=candidates.length &lt;= 100</li>\n\t<li>1 &lt;=candidates[i] &lt;= 50</li>\n\t<li>1 &lt;= target &lt;= 30</li>\n</ul>\n\n"test_case": [\n  [10,1,2,7,6,1,5]\n8\n  [2,5,2,1,2]\n5\n],\n"test_case_output": [\'\', \'\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\nThe same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the <span data-keyword="frequency-array">frequency</span> of at least one of the chosen numbers is different.\nThe test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.<strong class="example">Example 1:\nInput: candidates = [2,3,6,7], target = 7\nOutput: [[2,2,3],[7]]\nExplanation:\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n7 is a candidate, and 7 = 7.\nThese are the only two combinations.\n<strong class="example">Example 2:\nInput: candidates = [2,3,5], target = 8\nOutput: [[2,2,2,2],[2,3,3],[3,5]]\n<strong class="example">Example 3:\nInput: candidates = [2], target = 1\nOutput: []\nConstraints:\n<ul>\n\t<li>1 &lt;= candidates.length &lt;= 30</li>\n\t<li>2 &lt;= candidates[i] &lt;= 40</li>\n\t<li>All elements of candidates are distinct.</li>\n\t<li>1 &lt;= target &lt;= 40</li>\n</ul>\n\n"test_case": [\n  [2,3,6,7]\n7\n  [2,3,5]\n8\n  [2]\n1\n],\n"test_case_output": [\'[[2,2,3],[7]]\', \'[[2,2,2,2],[2,3,3],[3,5]]\', \'[]\'],\n"test_case_explanation": [\n  "2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n7 is a candidate, and 7 = 7.\nThese are the only two combinations.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThe count-and-say sequence is a sequence of digit strings defined by the recursive formula:\n<ul>\n\t<li>countAndSay(1) = 1</li>\n\t<li>countAndSay(n) is the way you would say the digit string from countAndSay(n-1), which is then converted into a different digit string.</li>\n</ul>\nTo determine how you say a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.\nFor example, the saying and conversion for digit string 3322251:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/10/23/countandsay.jpg" style="width: 581px; height: 172px;" />\nGiven a positive integer n, return the n<sup>th</sup> term of the count-and-say sequence.<strong class="example">Example 1:\nInput: n = 1\nOutput: 1\nExplanation: This is the base case.\n<strong class="example">Example 2:\nInput: n = 4\nOutput: 1211\nExplanation:\ncountAndSay(1) = 1\ncountAndSay(2) = say 1 = one 1 = 11\ncountAndSay(3) = say 11 = two 1&#39;s = 21\ncountAndSay(4) = say 21 = one 2 + one 1 = 12 + 11 = 1211\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 30</li>\n</ul>\n\n"test_case": [\n  1\n  4\n],\n"test_case_output": [\'1\', \'1211\'],\n"test_case_explanation": [\n  "This is the base case.\n"\n\n  "countAndSay(1) = 1\ncountAndSay(2) = say 1 = one 1 = 11\ncountAndSay(3) = say 11 = two 1&#39;s = 21\ncountAndSay(4) = say 21 = one 2 + one 1 = 12 + 11 = 1211\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nWrite a program to solve a Sudoku puzzle by filling the empty cells.\nA sudoku solution must satisfy all of the following rules:\n<ol>\n\t<li>Each of the digits 1-9 must occur exactly once in each row.</li>\n\t<li>Each of the digits 1-9 must occur exactly once in each column.</li>\n\t<li>Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.</li>\n</ol>\nThe &#39;.&#39; character indicates empty cells.<strong class="example">Example 1:\n<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" style="height:250px; width:250px" />\nInput: board = [[5,3,.,.,7,.,.,.,.],[6,.,.,1,9,5,.,.,.],[.,9,8,.,.,.,.,6,.],[8,.,.,.,6,.,.,.,3],[4,.,.,8,.,3,.,.,1],[7,.,.,.,2,.,.,.,6],[.,6,.,.,.,.,2,8,.],[.,.,.,4,1,9,.,.,5],[.,.,.,.,8,.,.,7,9]]\nOutput: [[5,3,4,6,7,8,9,1,2],[6,7,2,1,9,5,3,4,8],[1,9,8,3,4,2,5,6,7],[8,5,9,7,6,1,4,2,3],[4,2,6,8,5,3,7,9,1],[7,1,3,9,2,4,8,5,6],[9,6,1,5,3,7,2,8,4],[2,8,7,4,1,9,6,3,5],[3,4,5,2,8,6,1,7,9]]\nExplanation:The input board is shown above and the only valid solution is shown below:\n<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png" style="height:250px; width:250px" />\nConstraints:\n<ul>\n\t<li>board.length == 9</li>\n\t<li>board[i].length == 9</li>\n\t<li>board[i][j] is a digit or &#39;.&#39;.</li>\n\t<li>It is guaranteed that the input board has only one solution.</li>\n</ul>\n\n"test_case": [\n  [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]\n],\n"test_case_output": [\'[[5,3,4,6,7,8,9,1,2],[6,7,2,1,9,5,3,4,8],[1,9,8,3,4,2,5,6,7],[8,5,9,7,6,1,4,2,3],[4,2,6,8,5,3,7,9,1],[7,1,3,9,2,4,8,5,6],[9,6,1,5,3,7,2,8,4],[2,8,7,4,1,9,6,3,5],[3,4,5,2,8,6,1,7,9]]\'],\n"test_case_explanation": [\n  "The input board is shown above and the only valid solution is shown below:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nDetermine if a9 x 9 Sudoku boardis valid.Only the filled cells need to be validatedaccording to the following rules:\n<ol>\n\t<li>Each rowmust contain thedigits1-9 without repetition.</li>\n\t<li>Each column must contain the digits1-9without repetition.</li>\n\t<li>Each of the nine3 x 3 sub-boxes of the grid must contain the digits1-9without repetition.</li>\n</ol>\nNote:\n<ul>\n\t<li>A Sudoku board (partially filled) could be valid but is not necessarily solvable.</li>\n\t<li>Only the filled cells need to be validated according to the mentionedrules.</li>\n</ul><strong class="example">Example 1:\n<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" style="height:250px; width:250px" />\nInput: board = \n[[5,3,.,.,7,.,.,.,.]\n,[6,.,.,1,9,5,.,.,.]\n,[.,9,8,.,.,.,.,6,.]\n,[8,.,.,.,6,.,.,.,3]\n,[4,.,.,8,.,3,.,.,1]\n,[7,.,.,.,2,.,.,.,6]\n,[.,6,.,.,.,.,2,8,.]\n,[.,.,.,4,1,9,.,.,5]\n,[.,.,.,.,8,.,.,7,9]]\nOutput: true\n<strong class="example">Example 2:\nInput: board = \n[[8,3,.,.,7,.,.,.,.]\n,[6,.,.,1,9,5,.,.,.]\n,[.,9,8,.,.,.,.,6,.]\n,[8,.,.,.,6,.,.,.,3]\n,[4,.,.,8,.,3,.,.,1]\n,[7,.,.,.,2,.,.,.,6]\n,[.,6,.,.,.,.,2,8,.]\n,[.,.,.,4,1,9,.,.,5]\n,[.,.,.,.,8,.,.,7,9]]\nOutput: false\nExplanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8&#39;s in the top left 3x3 sub-box, it is invalid.\nConstraints:\n<ul>\n\t<li>board.length == 9</li>\n\t<li>board[i].length == 9</li>\n\t<li>board[i][j] is a digit 1-9 or &#39;.&#39;.</li>\n</ul>\n\n"test_case": [\n  [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]\n  [["8","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]\n],\n"test_case_output": [\'true\', \'false\'],\n"test_case_explanation": [\n  "Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8&#39;s in the top left 3x3 sub-box, it is invalid.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\nYou mustwrite an algorithm withO(log n) runtime complexity.<strong class="example">Example 1:\nInput: nums = [1,3,5,6], target = 5\nOutput: 2\n<strong class="example">Example 2:\nInput: nums = [1,3,5,6], target = 2\nOutput: 1\n<strong class="example">Example 3:\nInput: nums = [1,3,5,6], target = 7\nOutput: 4\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 10<sup>4</sup></li>\n\t<li>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></li>\n\t<li>nums contains distinct values sorted in ascending order.</li>\n\t<li>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  [1,3,5,6]\n5\n  [1,3,5,6]\n2\n  [1,3,5,6]\n7\n],\n"test_case_output": [\'2\', \'1\', \'4\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThere is an integer array nums sorted in ascending order (with distinct values).\nPrior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 &lt;= k &lt; nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\nGiven the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\nYou must write an algorithm with O(log n) runtime complexity.<strong class="example">Example 1:\nInput: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4\n<strong class="example">Example 2:\nInput: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1\n<strong class="example">Example 3:\nInput: nums = [1], target = 0\nOutput: -1\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 5000</li>\n\t<li>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></li>\n\t<li>All values of nums are unique.</li>\n\t<li>nums is an ascending array that is possibly rotated.</li>\n\t<li>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  [4,5,6,7,0,1,2]\n0\n  [4,5,6,7,0,1,2]\n3\n  [1]\n0\n],\n"test_case_output": [\'4\', \'-1\', \'-1\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a string containing just the characters &#39;(&#39; and &#39;)&#39;, return the length of the longest valid (well-formed) parentheses <span data-keyword="substring-nonempty">substring</span>.<strong class="example">Example 1:\nInput: s = (()\nOutput: 2\nExplanation: The longest valid parentheses substring is ().\n<strong class="example">Example 2:\nInput: s = )()())\nOutput: 4\nExplanation: The longest valid parentheses substring is ()().\n<strong class="example">Example 3:\nInput: s = \nOutput: 0\nConstraints:\n<ul>\n\t<li>0 &lt;= s.length &lt;= 3 * 10<sup>4</sup></li>\n\t<li>s[i] is &#39;(&#39;, or &#39;)&#39;.</li>\n</ul>\n\n"test_case": [\n  "(()"\n  ")()())"\n  ""\n],\n"test_case_output": [\'2\', \'4\', \'0\'],\n"test_case_explanation": [\n  "The longest valid parentheses substring is ().\n"\n\n  "The longest valid parentheses substring is ()().\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nA permutation of an array of integers is an arrangement of its members into a sequence or linear order.\n<ul>\n\t<li>For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].</li>\n</ul>\nThe next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).\n<ul>\n\t<li>For example, the next permutation of arr = [1,2,3] is [1,3,2].</li>\n\t<li>Similarly, the next permutation of arr = [2,3,1] is [3,1,2].</li>\n\t<li>While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.</li>\n</ul>\nGiven an array of integers nums, find the next permutation of nums.\nThe replacement must be <a href="http://en.wikipedia.org/wiki/In-place_algorithm" target="_blank">in place</a> and use only constant extra memory.<strong class="example">Example 1:\nInput: nums = [1,2,3]\nOutput: [1,3,2]\n<strong class="example">Example 2:\nInput: nums = [3,2,1]\nOutput: [1,2,3]\n<strong class="example">Example 3:\nInput: nums = [1,1,5]\nOutput: [1,5,1]\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 100</li>\n\t<li>0 &lt;= nums[i] &lt;= 100</li>\n</ul>\n\n"test_case": [\n  [1,2,3]\n  [3,2,1]\n  [1,1,5]\n],\n"test_case_output": [\'[1,3,2]\', \'[1,2,3]\', \'[1,5,1]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given a string s and an array of strings words. All the strings of words are of the same length.\nA concatenated substring in s is a substring that contains all the strings of any permutation of words concatenated.\n<ul>\n\t<li>For example, if words = [ab,cd,ef], then abcdef, abefcd, cdabef, cdefab, efabcd, and efcdab are all concatenated strings. acdbef is not a concatenated substring because it is not the concatenation of any permutation of words.</li>\n</ul>\nReturn the starting indices of all the concatenated substrings in s. You can return the answer in any order.<strong class="example">Example 1:\nInput: s = barfoothefoobarman, words = [foo,bar]\nOutput: [0,9]\nExplanation: Since words.length == 2 and words[i].length == 3, the concatenated substring has to be of length 6.\nThe substring starting at 0 is barfoo. It is the concatenation of [bar,foo] which is a permutation of words.\nThe substring starting at 9 is foobar. It is the concatenation of [foo,bar] which is a permutation of words.\nThe output order does not matter. Returning [9,0] is fine too.\n<strong class="example">Example 2:\nInput: s = wordgoodgoodgoodbestword, words = [word,good,best,word]\nOutput: []\nExplanation: Since words.length == 4 and words[i].length == 4, the concatenated substring has to be of length 16.\nThere is no substring of length 16 in s that is equal to the concatenation of any permutation of words.\nWe return an empty array.\n<strong class="example">Example 3:\nInput: s = barfoofoobarthefoobarman, words = [bar,foo,the]\nOutput: [6,9,12]\nExplanation: Since words.length == 3 and words[i].length == 3, the concatenated substring has to be of length 9.\nThe substring starting at 6 is foobarthe. It is the concatenation of [foo,bar,the] which is a permutation of words.\nThe substring starting at 9 is barthefoo. It is the concatenation of [bar,the,foo] which is a permutation of words.\nThe substring starting at 12 is thefoobar. It is the concatenation of [the,foo,bar] which is a permutation of words.\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 10<sup>4</sup></li>\n\t<li>1 &lt;= words.length &lt;= 5000</li>\n\t<li>1 &lt;= words[i].length &lt;= 30</li>\n\t<li>s and words[i] consist of lowercase English letters.</li>\n</ul>\n\n"test_case": [\n  "barfoothefoobarman"\n["foo","bar"]\n  "wordgoodgoodgoodbestword"\n["word","good","best","word"]\n  "barfoofoobarthefoobarman"\n["bar","foo","the"]\n],\n"test_case_output": [\'[0,9]\', \'[]\', \'[6,9,12]\'],\n"test_case_explanation": [\n  "Since words.length == 2 and words[i].length == 3, the concatenated substring has to be of length 6.\nThe substring starting at 0 is barfoo. It is the concatenation of [bar,foo] which is a permutation of words.\nThe substring starting at 9 is foobar. It is the concatenation of [foo,bar] which is a permutation of words.\nThe output order does not matter. Returning [9,0] is fine too.\n"\n\n  "Since words.length == 4 and words[i].length == 4, the concatenated substring has to be of length 16.\nThere is no substring of length 16 in s that is equal to the concatenation of any permutation of words.\nWe return an empty array.\n"\n\n  "Since words.length == 3 and words[i].length == 3, the concatenated substring has to be of length 9.\nThe substring starting at 6 is foobarthe. It is the concatenation of [foo,bar,the] which is a permutation of words.\nThe substring starting at 9 is barthefoo. It is the concatenation of [bar,the,foo] which is a permutation of words.\nThe substring starting at 12 is thefoobar. It is the concatenation of [the,foo,bar] which is a permutation of words.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.\nThe integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.\nReturn the quotient after dividing dividend by divisor.\nNote: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [&minus;2<sup>31</sup>, 2<sup>31</sup> &minus; 1]. For this problem, if the quotient is strictly greater than 2<sup>31</sup> - 1, then return 2<sup>31</sup> - 1, and if the quotient is strictly less than -2<sup>31</sup>, then return -2<sup>31</sup>.<strong class="example">Example 1:\nInput: dividend = 10, divisor = 3\nOutput: 3\nExplanation: 10/3 = 3.33333.. which is truncated to 3.\n<strong class="example">Example 2:\nInput: dividend = 7, divisor = -3\nOutput: -2\nExplanation: 7/-3 = -2.33333.. which is truncated to -2.\nConstraints:\n<ul>\n\t<li>-2<sup>31</sup> &lt;= dividend, divisor &lt;= 2<sup>31</sup> - 1</li>\n\t<li>divisor != 0</li>\n</ul>\n\n"test_case": [\n  10\n3\n  7\n-3\n],\n"test_case_output": [\'3\', \'-2\'],\n"test_case_explanation": [\n  "10/3 = 3.33333.. which is truncated to 3.\n"\n\n  "7/-3 = -2.33333.. which is truncated to -2.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.<strong class="example">Example 1:\nInput: haystack = sadbutsad, needle = sad\nOutput: 0\nExplanation: sad occurs at index 0 and 6.\nThe first occurrence is at index 0, so we return 0.\n<strong class="example">Example 2:\nInput: haystack = leetcode, needle = leeto\nOutput: -1\nExplanation: leeto did not occur in leetcode, so we return -1.\nConstraints:\n<ul>\n\t<li>1 &lt;= haystack.length, needle.length &lt;= 10<sup>4</sup></li>\n\t<li>haystack and needle consist of only lowercase English characters.</li>\n</ul>\n\n"test_case": [\n  "sadbutsad"\n"sad"\n  "leetcode"\n"leeto"\n],\n"test_case_output": [\'0\', \'-1\'],\n"test_case_explanation": [\n  "sad occurs at index 0 and 6.\nThe first occurrence is at index 0, so we return 0.\n"\n\n  "leeto did not occur in leetcode, so we return -1.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums and an integer val, remove all occurrences of val in nums <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank">in-place</a>. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.\nConsider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:\n<ul>\n\t<li>Change the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums.</li>\n\t<li>Return k.</li>\n</ul>\nCustom Judge:\nThe judge will test your solution with the following code:\nint[] nums = [...]; // Input array\nint val = ...; // Value to remove\nint[] expectedNums = [...]; // The expected answer with correct length.\n                            // It is sorted with no values equaling val.\nint k = removeElement(nums, val); // Calls your implementation\nassert k == expectedNums.length;\nsort(nums, 0, k); // Sort the first k elements of nums\nfor (int i = 0; i &lt; actualLength; i++) {\n    assert nums[i] == expectedNums[i];\n}\nIf all assertions pass, then your solution will be accepted.<strong class="example">Example 1:\nInput: nums = [3,2,2,3], val = 3\nOutput: 2, nums = [2,2,_,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 2.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n<strong class="example">Example 2:\nInput: nums = [0,1,2,2,3,0,4,2], val = 2\nOutput: 5, nums = [0,1,4,0,3,_,_,_]\nExplanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\nNote that the five elements can be returned in any order.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\nConstraints:\n<ul>\n\t<li>0 &lt;= nums.length &lt;= 100</li>\n\t<li>0 &lt;= nums[i] &lt;= 50</li>\n\t<li>0 &lt;= val &lt;= 100</li>\n</ul>\n\n"test_case": [\n  [3,2,2,3]\n3\n  [0,1,2,2,3,0,4,2]\n2\n],\n"test_case_output": [\'2, nums = [2,2,_,_]\', \'5, nums = [0,1,4,0,3,_,_,_]\'],\n"test_case_explanation": [\n  "Your function should return k = 2, with the first two elements of nums being 2.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n"\n\n  "Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\nNote that the five elements can be returned in any order.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums sorted in non-decreasing order, remove the duplicates <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank">in-place</a> such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.\nConsider the number of unique elements of nums to be k, to get accepted, you need to do the following things:\n<ul>\n\t<li>Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.</li>\n\t<li>Return k.</li>\n</ul>\nCustom Judge:\nThe judge will test your solution with the following code:\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\nint k = removeDuplicates(nums); // Calls your implementation\nassert k == expectedNums.length;\nfor (int i = 0; i &lt; k; i++) {\n    assert nums[i] == expectedNums[i];\n}\nIf all assertions pass, then your solution will be accepted.<strong class="example">Example 1:\nInput: nums = [1,1,2]\nOutput: 2, nums = [1,2,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n<strong class="example">Example 2:\nInput: nums = [0,0,1,1,1,2,2,3,3,4]\nOutput: 5, nums = [0,1,2,3,4,_,_,_,_,_]\nExplanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></li>\n\t<li>-100 &lt;= nums[i] &lt;= 100</li>\n\t<li>nums is sorted in non-decreasing order.</li>\n</ul>\n\n"test_case": [\n  [1,1,2]\n  [0,0,1,1,1,2,2,3,3,4]\n],\n"test_case_output": [\'2, nums = [1,2,_]\', \'5, nums = [0,1,2,3,4,_,_,_,_,_]\'],\n"test_case_explanation": [\n  "Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n"\n\n  "Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.\nk is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\nYou may not alter the values in the list&#39;s nodes, only nodes themselves may be changed.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/10/03/reverse_ex1.jpg" style="width: 542px; height: 222px;" />\nInput: head = [1,2,3,4,5], k = 2\nOutput: [2,1,4,3,5]\n<strong class="example">Example 2:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/10/03/reverse_ex2.jpg" style="width: 542px; height: 222px;" />\nInput: head = [1,2,3,4,5], k = 3\nOutput: [3,2,1,4,5]\nConstraints:\n<ul>\n\t<li>The number of nodes in the list is n.</li>\n\t<li>1 &lt;= k &lt;= n &lt;= 5000</li>\n\t<li>0 &lt;= Node.val &lt;= 1000</li>\n</ul>Follow-up: Can you solve the problem in O(1) extra memory space?\n\n"test_case": [\n  [1,2,3,4,5]\n2\n  [1,2,3,4,5]\n3\n],\n"test_case_output": [\'[2,1,4,3,5]\', \'[3,2,1,4,5]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven alinked list, swap every two adjacent nodes and return its head. You must solve the problem withoutmodifying the values in the list&#39;s nodes (i.e., only nodes themselves may be changed.)<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg" style="width: 422px; height: 222px;" />\nInput: head = [1,2,3,4]\nOutput: [2,1,4,3]\n<strong class="example">Example 2:\nInput: head = []\nOutput: []\n<strong class="example">Example 3:\nInput: head = [1]\nOutput: [1]\nConstraints:\n<ul>\n\t<li>The number of nodes in thelistis in the range [0, 100].</li>\n\t<li>0 &lt;= Node.val &lt;= 100</li>\n</ul>\n\n"test_case": [\n  [1,2,3,4]\n  []\n  [1]\n],\n"test_case_output": [\'[2,1,4,3]\', \'[]\', \'[1]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\nMerge all the linked-lists into one sorted linked-list and return it.<strong class="example">Example 1:\nInput: lists = [[1,4,5],[1,3,4],[2,6]]\nOutput: [1,1,2,3,4,4,5,6]\nExplanation: The linked-lists are:\n[\n  1-&gt;4-&gt;5,\n  1-&gt;3-&gt;4,\n  2-&gt;6\n]\nmerging them into one sorted list:\n1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6\n<strong class="example">Example 2:\nInput: lists = []\nOutput: []\n<strong class="example">Example 3:\nInput: lists = [[]]\nOutput: []\nConstraints:\n<ul>\n\t<li>k == lists.length</li>\n\t<li>0 &lt;= k &lt;= 10<sup>4</sup></li>\n\t<li>0 &lt;= lists[i].length &lt;= 500</li>\n\t<li>-10<sup>4</sup> &lt;= lists[i][j] &lt;= 10<sup>4</sup></li>\n\t<li>lists[i] is sorted in ascending order.</li>\n\t<li>The sum of lists[i].length will not exceed 10<sup>4</sup>.</li>\n</ul>\n\n"test_case": [\n  [[1,4,5],[1,3,4],[2,6]]\n  []\n  [[]]\n],\n"test_case_output": [\'[1,1,2,3,4,4,5,6]\', \'[]\', \'[]\'],\n"test_case_explanation": [\n  "The linked-lists are:\n[\n  1-&gt;4-&gt;5,\n  1-&gt;3-&gt;4,\n  2-&gt;6\n]\nmerging them into one sorted list:\n1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.<strong class="example">Example 1:\nInput: n = 3\nOutput: ["((()))","(()())","(())()","()(())","()()()"]\n<strong class="example">Example 2:\nInput: n = 1\nOutput: ["()"]\nConstraints:\n<ul>\n\t<li>1 &lt;= n &lt;= 8</li>\n</ul>\n\n"test_case": [\n  3\n  1\n],\n"test_case_output": [\'["((()))","(()())","(())()","()(())","()()()"]\', \'["()"]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given the heads of two sorted linked lists list1 and list2.\nMerge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.\nReturn the head of the merged linked list.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg" style="width: 662px; height: 302px;" />\nInput: list1 = [1,2,4], list2 = [1,3,4]\nOutput: [1,1,2,3,4,4]\n<strong class="example">Example 2:\nInput: list1 = [], list2 = []\nOutput: []\n<strong class="example">Example 3:\nInput: list1 = [], list2 = [0]\nOutput: [0]\nConstraints:\n<ul>\n\t<li>The number of nodes in both lists is in the range [0, 50].</li>\n\t<li>-100 &lt;= Node.val &lt;= 100</li>\n\t<li>Both list1 and list2 are sorted in non-decreasing order.</li>\n</ul>\n\n"test_case": [\n  [1,2,4]\n[1,3,4]\n  []\n[]\n  []\n[0]\n],\n"test_case_output": [\'[1,1,2,3,4,4]\', \'[]\', \'[0]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a string s containing just the characters &#39;(&#39;, &#39;)&#39;, &#39;{&#39;, &#39;}&#39;, &#39;[&#39; and &#39;]&#39;, determine if the input string is valid.\nAn input string is valid if:\n<ol>\n\t<li>Open brackets must be closed by the same type of brackets.</li>\n\t<li>Open brackets must be closed in the correct order.</li>\n\t<li>Every close bracket has a corresponding open bracket of the same type.</li>\n</ol><strong class="example">Example 1:\nInput: s = ()\nOutput: true\n<strong class="example">Example 2:\nInput: s = ()[]{}\nOutput: true\n<strong class="example">Example 3:\nInput: s = (]\nOutput: false\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 10<sup>4</sup></li>\n\t<li>s consists of parentheses only &#39;()[]{}&#39;.</li>\n</ul>\n\n"test_case": [\n  "()"\n  "()[]{}"\n  "(]"\n],\n"test_case_output": [\'true\', \'true\', \'false\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven the head of a linked list, remove the n<sup>th</sup> node from the end of the list and return its head.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg" style="width: 542px; height: 222px;" />\nInput: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]\n<strong class="example">Example 2:\nInput: head = [1], n = 1\nOutput: []\n<strong class="example">Example 3:\nInput: head = [1,2], n = 1\nOutput: [1]\nConstraints:\n<ul>\n\t<li>The number of nodes in the list is sz.</li>\n\t<li>1 &lt;= sz &lt;= 30</li>\n\t<li>0 &lt;= Node.val &lt;= 100</li>\n\t<li>1 &lt;= n &lt;= sz</li>\n</ul>Follow up: Could you do this in one pass?\n\n"test_case": [\n  [1,2,3,4,5]\n2\n  [1]\n1\n  [1,2]\n1\n],\n"test_case_output": [\'[1,2,3,5]\', \'[]\', \'[1]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:\n<ul>\n\t<li>0 &lt;= a, b, c, d&lt; n</li>\n\t<li>a, b, c, and d are distinct.</li>\n\t<li>nums[a] + nums[b] + nums[c] + nums[d] == target</li>\n</ul>\nYou may return the answer in any order.<strong class="example">Example 1:\nInput: nums = [1,0,-1,0,-2,2], target = 0\nOutput: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\n<strong class="example">Example 2:\nInput: nums = [2,2,2,2,2], target = 8\nOutput: [[2,2,2,2]]\nConstraints:\n<ul>\n\t<li>1 &lt;= nums.length &lt;= 200</li>\n\t<li>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></li>\n\t<li>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></li>\n</ul>\n\n"test_case": [\n  [1,0,-1,0,-2,2]\n0\n  [2,2,2,2,2]\n8\n],\n"test_case_output": [\'[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\', \'[[2,2,2,2]]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\nA mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\n<img alt="" src="https://assets.leetcode.com/uploads/2022/03/15/1200px-telephone-keypad2svg.png" style="width: 300px; height: 243px;" /><strong class="example">Example 1:\nInput: digits = 23\nOutput: [ad,ae,af,bd,be,bf,cd,ce,cf]\n<strong class="example">Example 2:\nInput: digits = \nOutput: []\n<strong class="example">Example 3:\nInput: digits = 2\nOutput: [a,b,c]\nConstraints:\n<ul>\n\t<li>0 &lt;= digits.length &lt;= 4</li>\n\t<li>digits[i] is a digit in the range [&#39;2&#39;, &#39;9&#39;].</li>\n</ul>\n\n"test_case": [\n  "23"\n  ""\n  "2"\n],\n"test_case_output": [\'[ad,ae,af,bd,be,bf,cd,ce,cf]\', \'[]\', \'[a,b,c]\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.\nReturn the sum of the three integers.\nYou may assume that each input would have exactly one solution.<strong class="example">Example 1:\nInput: nums = [-1,2,1,-4], target = 1\nOutput: 2\nExplanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n<strong class="example">Example 2:\nInput: nums = [0,0,0], target = 1\nOutput: 0\nExplanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).\nConstraints:\n<ul>\n\t<li>3 &lt;= nums.length &lt;= 500</li>\n\t<li>-1000 &lt;= nums[i] &lt;= 1000</li>\n\t<li>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  [-1,2,1,-4]\n1\n  [0,0,0]\n1\n],\n"test_case_output": [\'2\', \'0\'],\n"test_case_explanation": [\n  "The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n"\n\n  "The sum that is closest to the target is 0. (0 + 0 + 0 = 0).\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\nNotice that the solution set must not contain duplicate triplets.<strong class="example">Example 1:\nInput: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]\nExplanation: \nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter.\n<strong class="example">Example 2:\nInput: nums = [0,1,1]\nOutput: []\nExplanation: The only possible triplet does not sum up to 0.\n<strong class="example">Example 3:\nInput: nums = [0,0,0]\nOutput: [[0,0,0]]\nExplanation: The only possible triplet sums up to 0.\nConstraints:\n<ul>\n\t<li>3 &lt;= nums.length &lt;= 3000</li>\n\t<li>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></li>\n</ul>\n\n"test_case": [\n  [-1,0,1,2,-1,-4]\n  [0,1,1]\n  [0,0,0]\n],\n"test_case_output": [\'[[-1,-1,2],[-1,0,1]]\', \'[]\', \'[[0,0,0]]\'],\n"test_case_explanation": [\n  "nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter.\n"\n\n  "The only possible triplet does not sum up to 0.\n"\n\n  "The only possible triplet sums up to 0.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nWrite a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefix, return an empty string .<strong class="example">Example 1:\nInput: strs = [flower,flow,flight]\nOutput: fl\n<strong class="example">Example 2:\nInput: strs = [dog,racecar,car]\nOutput: \nExplanation: There is no common prefix among the input strings.\nConstraints:\n<ul>\n\t<li>1 &lt;= strs.length &lt;= 200</li>\n\t<li>0 &lt;= strs[i].length &lt;= 200</li>\n\t<li>strs[i] consists of only lowercase English letters.</li>\n</ul>\n\n"test_case": [\n  ["flower","flow","flight"]\n  ["dog","racecar","car"]\n],\n"test_case_output": [\'fl\', \'\'],\n"test_case_explanation": [\n  "There is no common prefix among the input strings.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nRoman numerals are represented by seven different symbols:I, V, X, L, C, D and M.\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example,2 is written as IIin Roman numeral, just two ones added together. 12 is written asXII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n<ul>\n\t<li>I can be placed before V (5) and X (10) to make 4 and 9.</li>\n\t<li>X can be placed before L (50) and C (100) to make 40 and 90.</li>\n\t<li>C can be placed before D (500) and M (1000) to make 400 and 900.</li>\n</ul>\nGiven a roman numeral, convert it to an integer.<strong class="example">Example 1:\nInput: s = III\nOutput: 3\nExplanation: III = 3.\n<strong class="example">Example 2:\nInput: s = LVIII\nOutput: 58\nExplanation: L = 50, V= 5, III = 3.\n<strong class="example">Example 3:\nInput: s = MCMXCIV\nOutput: 1994\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 15</li>\n\t<li>s contains onlythe characters (&#39;I&#39;, &#39;V&#39;, &#39;X&#39;, &#39;L&#39;, &#39;C&#39;, &#39;D&#39;, &#39;M&#39;).</li>\n\t<li>It is guaranteedthat s is a valid roman numeral in the range [1, 3999].</li>\n</ul>\n\n"test_case": [\n  "III"\n  "LVIII"\n  "MCMXCIV"\n],\n"test_case_output": [\'3\', \'58\', \'1994\'],\n"test_case_explanation": [\n  "III = 3.\n"\n\n  "L = 50, V= 5, III = 3.\n"\n\n  "M = 1000, CM = 900, XC = 90 and IV = 4.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nRoman numerals are represented by seven different symbols:I, V, X, L, C, D and M.\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example,2 is written as IIin Roman numeral, just two one&#39;s added together. 12 is written asXII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n<ul>\n\t<li>I can be placed before V (5) and X (10) to make 4 and 9.</li>\n\t<li>X can be placed before L (50) and C (100) to make 40 and 90.</li>\n\t<li>C can be placed before D (500) and M (1000) to make 400 and 900.</li>\n</ul>\nGiven an integer, convert it to a roman numeral.<strong class="example">Example 1:\nInput: num = 3\nOutput: III\nExplanation: 3 is represented as 3 ones.\n<strong class="example">Example 2:\nInput: num = 58\nOutput: LVIII\nExplanation: L = 50, V = 5, III = 3.\n<strong class="example">Example 3:\nInput: num = 1994\nOutput: MCMXCIV\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\nConstraints:\n<ul>\n\t<li>1 &lt;= num &lt;= 3999</li>\n</ul>\n\n"test_case": [\n  3\n  58\n  1994\n],\n"test_case_output": [\'III\', \'LVIII\', \'MCMXCIV\'],\n"test_case_explanation": [\n  "3 is represented as 3 ones.\n"\n\n  "L = 50, V = 5, III = 3.\n"\n\n  "M = 1000, CM = 900, XC = 90 and IV = 4.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the i<sup>th</sup> line are (i, 0) and (i, height[i]).\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\nReturn the maximum amount of water a container can store.\nNotice that you may not slant the container.<strong class="example">Example 1:\n<img alt="" src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg" style="width: 600px; height: 287px;" />\nInput: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n<strong class="example">Example 2:\nInput: height = [1,1]\nOutput: 1\nConstraints:\n<ul>\n\t<li>n == height.length</li>\n\t<li>2 &lt;= n &lt;= 10<sup>5</sup></li>\n\t<li>0 &lt;= height[i] &lt;= 10<sup>4</sup></li>\n</ul>\n\n"test_case": [\n  [1,8,6,2,5,4,8,3,7]\n  [1,1]\n],\n"test_case_output": [\'49\', \'1\'],\n"test_case_explanation": [\n  "The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an input string sand a pattern p, implement regular expression matching with support for &#39;.&#39; and &#39;*&#39; where:\n<ul>\n\t<li>&#39;.&#39; Matches any single character.\u200b\u200b\u200b\u200b</li>\n\t<li>&#39;*&#39; Matches zero or more of the preceding element.</li>\n</ul>\nThe matching should cover the entire input string (not partial).<strong class="example">Example 1:\nInput: s = aa, p = a\nOutput: false\nExplanation: a does not match the entire string aa.\n<strong class="example">Example 2:\nInput: s = aa, p = a*\nOutput: true\nExplanation: &#39;*&#39; means zero or more of the preceding element, &#39;a&#39;. Therefore, by repeating &#39;a&#39; once, it becomes aa.\n<strong class="example">Example 3:\nInput: s = ab, p = .*\nOutput: true\nExplanation: .* means zero or more (*) of any character (.).\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length&lt;= 20</li>\n\t<li>1 &lt;= p.length&lt;= 20</li>\n\t<li>s contains only lowercase English letters.</li>\n\t<li>p contains only lowercase English letters, &#39;.&#39;, and&#39;*&#39;.</li>\n\t<li>It is guaranteed for each appearance of the character &#39;*&#39;, there will be a previous valid character to match.</li>\n</ul>\n\n"test_case": [\n  "aa"\n"a"\n  "aa"\n"a*"\n  "ab"\n".*"\n],\n"test_case_output": [\'false\', \'true\', \'true\'],\n"test_case_explanation": [\n  "a does not match the entire string aa.\n"\n\n  "&#39;*&#39; means zero or more of the preceding element, &#39;a&#39;. Therefore, by repeating &#39;a&#39; once, it becomes aa.\n"\n\n  ".* means zero or more (*) of any character (.).\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an integer x, return true if x is a <span data-keyword="palindrome-integer">palindrome</span>, and false otherwise.<strong class="example">Example 1:\nInput: x = 121\nOutput: true\nExplanation: 121 reads as 121 from left to right and from right to left.\n<strong class="example">Example 2:\nInput: x = -121\nOutput: false\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n<strong class="example">Example 3:\nInput: x = 10\nOutput: false\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.\nConstraints:\n<ul>\n\t<li>-2<sup>31</sup>&lt;= x &lt;= 2<sup>31</sup>- 1</li>\n</ul>Follow up: Could you solve it without converting the integer to a string?\n"test_case": [\n  121\n  -121\n  10\n],\n"test_case_output": [\'true\', \'false\', \'false\'],\n"test_case_explanation": [\n  "121 reads as 121 from left to right and from right to left.\n"\n\n  "From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n"\n\n  "Reads 01 from right to left. Therefore it is not a palindrome.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nImplement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++&#39;s atoi function).\nThe algorithm for myAtoi(string s) is as follows:\n<ol>\n\t<li>Read in and ignore any leading whitespace.</li>\n\t<li>Check if the next character (if not already at the end of the string) is &#39;-&#39; or &#39;+&#39;. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.</li>\n\t<li>Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.</li>\n\t<li>Convert these digits into an integer (i.e. 123 -&gt; 123, 0032 -&gt; 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).</li>\n\t<li>If the integer is out of the 32-bit signed integer range [-2<sup>31</sup>, 2<sup>31</sup> - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -2<sup>31</sup> should be clamped to -2<sup>31</sup>, and integers greater than 2<sup>31</sup> - 1 should be clamped to 2<sup>31</sup> - 1.</li>\n\t<li>Return the integer as the final result.</li>\n</ol>\nNote:\n<ul>\n\t<li>Only the space character &#39; &#39; is considered a whitespace character.</li>\n\t<li>Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.</li>\n</ul><strong class="example">Example 1:\nInput: s = 42\nOutput: 42\nExplanation: The underlined characters are what is read in, the caret is the current reader position.\nStep 1: 42 (no characters read because there is no leading whitespace)\n         ^\nStep 2: 42 (no characters read because there is neither a &#39;-&#39; nor &#39;+&#39;)\n         ^\nStep 3: 42 (42 is read in)\n           ^\nThe parsed integer is 42.\nSince 42 is in the range [-2<sup>31</sup>, 2<sup>31</sup> - 1], the final result is 42.\n<strong class="example">Example 2:\nInput: s =    -42\nOutput: -42\nExplanation:\nStep 1:    -42 (leading whitespace is read and ignored)\n            ^\nStep 2:    -42 (&#39;-&#39; is read, so the result should be negative)\n             ^\nStep 3:    -42 (42 is read in)\n               ^\nThe parsed integer is -42.\nSince -42 is in the range [-2<sup>31</sup>, 2<sup>31</sup> - 1], the final result is -42.\n<strong class="example">Example 3:\nInput: s = 4193 with words\nOutput: 4193\nExplanation:\nStep 1: 4193 with words (no characters read because there is no leading whitespace)\n         ^\nStep 2: 4193 with words (no characters read because there is neither a &#39;-&#39; nor &#39;+&#39;)\n         ^\nStep 3: 4193 with words (4193 is read in; reading stops because the next character is a non-digit)\n             ^\nThe parsed integer is 4193.\nSince 4193 is in the range [-2<sup>31</sup>, 2<sup>31</sup> - 1], the final result is 4193.\nConstraints:\n<ul>\n\t<li>0 &lt;= s.length &lt;= 200</li>\n\t<li>s consists of English letters (lower-case and upper-case), digits (0-9), &#39; &#39;, &#39;+&#39;, &#39;-&#39;, and &#39;.&#39;.</li>\n</ul>\n\n"test_case": [\n  "42"\n  "   -42"\n  "4193 with words"\n],\n"test_case_output": [\'42\', \'-42\', \'4193\'],\n"test_case_explanation": [\n  "The underlined characters are what is read in, the caret is the current reader position.\nStep 1: 42 (no characters read because there is no leading whitespace)\n         ^\nStep 2: 42 (no characters read because there is neither a &#39;-&#39; nor &#39;+&#39;)\n         ^\nStep 3: 42 (42 is read in)\n           ^\nThe parsed integer is 42.\nSince 42 is in the range [-2"\n\n  "Step 1:    -42 (leading whitespace is read and ignored)\n            ^\nStep 2:    -42 (&#39;-&#39; is read, so the result should be negative)\n             ^\nStep 3:    -42 (42 is read in)\n               ^\nThe parsed integer is -42.\nSince -42 is in the range [-2"\n\n  "Step 1: 4193 with words (no characters read because there is no leading whitespace)\n         ^\nStep 2: 4193 with words (no characters read because there is neither a &#39;-&#39; nor &#39;+&#39;)\n         ^\nStep 3: 4193 with words (4193 is read in; reading stops because the next character is a non-digit)\n             ^\nThe parsed integer is 4193.\nSince 4193 is in the range [-2"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-2<sup>31</sup>, 2<sup>31</sup> - 1], then return 0.\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).<strong class="example">Example 1:\nInput: x = 123\nOutput: 321\n<strong class="example">Example 2:\nInput: x = -123\nOutput: -321\n<strong class="example">Example 3:\nInput: x = 120\nOutput: 21\nConstraints:\n<ul>\n\t<li>-2<sup>31</sup> &lt;= x &lt;= 2<sup>31</sup> - 1</li>\n</ul>\n\n"test_case": [\n  123\n  -123\n  120\n],\n"test_case_output": [\'321\', \'-321\', \'21\'],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nThe string PAYPALISHIRING is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\nP   A   H   N\nA P L S I I G\nY   I   R\nAnd then read line by line: PAHNAPLSIIGYIR\nWrite the code that will take a string and make this conversion given a number of rows:\nstring convert(string s, int numRows);\n<strong class="example">Example 1:\nInput: s = PAYPALISHIRING, numRows = 3\nOutput: PAHNAPLSIIGYIR\n<strong class="example">Example 2:\nInput: s = PAYPALISHIRING, numRows = 4\nOutput: PINALSIGYAHRPI\nExplanation:\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n<strong class="example">Example 3:\nInput: s = A, numRows = 1\nOutput: A\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 1000</li>\n\t<li>s consists of English letters (lower-case and upper-case), &#39;,&#39; and &#39;.&#39;.</li>\n\t<li>1 &lt;= numRows &lt;= 1000</li>\n</ul>\n\n"test_case": [\n  "PAYPALISHIRING"\n3\n  "PAYPALISHIRING"\n4\n  "A"\n1\n],\n"test_case_output": [\'PAHNAPLSIIGYIR\', \'PINALSIGYAHRPI\', \'A\'],\n"test_case_explanation": [\n  "P     I    N\nA   L S  I G\nY A   H R\nP     I\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a string s, return the longest <span data-keyword="palindromic-string">palindromic</span> <span data-keyword="substring-nonempty">substring</span> in s.<strong class="example">Example 1:\nInput: s = babad\nOutput: bab\nExplanation: aba is also a valid answer.\n<strong class="example">Example 2:\nInput: s = cbbd\nOutput: bb\nConstraints:\n<ul>\n\t<li>1 &lt;= s.length &lt;= 1000</li>\n\t<li>s consist of only digits and English letters.</li>\n</ul>\n\n"test_case": [\n  "babad"\n  "cbbd"\n],\n"test_case_output": [\'bab\', \'bb\'],\n"test_case_explanation": [\n  "aba is also a valid answer.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Hard along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\nThe overall run time complexity should be O(log (m+n)).<strong class="example">Example 1:\nInput: nums1 = [1,3], nums2 = [2]\nOutput: 2.00000\nExplanation: merged array = [1,2,3] and median is 2.\n<strong class="example">Example 2:\nInput: nums1 = [1,2], nums2 = [3,4]\nOutput: 2.50000\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\nConstraints:\n<ul>\n\t<li>nums1.length == m</li>\n\t<li>nums2.length == n</li>\n\t<li>0 &lt;= m &lt;= 1000</li>\n\t<li>0 &lt;= n &lt;= 1000</li>\n\t<li>1 &lt;= m + n &lt;= 2000</li>\n\t<li>-10<sup>6</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>6</sup></li>\n</ul>\n\n"test_case": [\n  [1,3]\n[2]\n  [1,2]\n[3,4]\n],\n"test_case_output": [\'2.00000\', \'2.50000\'],\n"test_case_explanation": [\n  "merged array = [1,2,3] and median is 2.\n"\n\n  "merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a string s, find the length of the longest <span data-keyword="substring-nonempty">substring</span> without repeating characters.<strong class="example">Example 1:\nInput: s = abcabcbb\nOutput: 3\nExplanation: The answer is abc, with the length of 3.\n<strong class="example">Example 2:\nInput: s = bbbbb\nOutput: 1\nExplanation: The answer is b, with the length of 1.\n<strong class="example">Example 3:\nInput: s = pwwkew\nOutput: 3\nExplanation: The answer is wke, with the length of 3.\nNotice that the answer must be a substring, pwke is a subsequence and not a substring.\nConstraints:\n<ul>\n\t<li>0 &lt;= s.length &lt;= 5 * 10<sup>4</sup></li>\n\t<li>s consists of English letters, digits, symbols and spaces.</li>\n</ul>\n\n"test_case": [\n  "abcabcbb"\n  "bbbbb"\n  "pwwkew"\n],\n"test_case_output": [\'3\', \'1\', \'3\'],\n"test_case_explanation": [\n  "The answer is abc, with the length of 3.\n"\n\n  "The answer is b, with the length of 1.\n"\n\n  "The answer is wke, with the length of 3.\nNotice that the answer must be a substring, pwke is a subsequence and not a substring.\nConstraints:\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nYou are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sumas a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.<strong class="example">Example 1:\n<img alt="" src="https://assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg" style="width: 483px; height: 342px;" />\nInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.\n<strong class="example">Example 2:\nInput: l1 = [0], l2 = [0]\nOutput: [0]\n<strong class="example">Example 3:\nInput: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]\nConstraints:\n<ul>\n\t<li>The number of nodes in each linked list is in the range [1, 100].</li>\n\t<li>0 &lt;= Node.val &lt;= 9</li>\n\t<li>It is guaranteed that the list represents a number that does not have leading zeros.</li>\n</ul>\n\n"test_case": [\n  [2,4,3]\n[5,6,4]\n  [0]\n[0]\n  [9,9,9,9,9,9,9]\n[9,9,9,9]\n],\n"test_case_output": [\'[7,0,8]\', \'[0]\', \'[8,9,9,9,0,0,0,1]\'],\n"test_case_explanation": [\n  "342 + 465 = 807.\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven an array of integers numsand an integer target, return indices of the two numbers such that they add up to target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nYou can return the answer in any order.<strong class="example">Example 1:\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n<strong class="example">Example 2:\nInput: nums = [3,2,4], target = 6\nOutput: [1,2]\n<strong class="example">Example 3:\nInput: nums = [3,3], target = 6\nOutput: [0,1]\nConstraints:\n<ul>\n\t<li>2 &lt;= nums.length &lt;= 10<sup>4</sup></li>\n\t<li>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></li>\n\t<li>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></li>\n\t<li>Only one valid answer exists.</li>\n</ul>Follow-up:Can you come up with an algorithm that is less than O(n<sup>2</sup>)<font face="monospace"></font>time complexity?\n"test_case": [\n  [2,7,11,15]\n9\n  [3,2,4]\n6\n  [3,3]\n6\n],\n"test_case_output": [\'[0,1]\', \'[1,2]\', \'[0,1]\'],\n"test_case_explanation": [\n  "Because nums[0] + nums[1] == 9, we return [0, 1].\n"\n]\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a text filefile.txt, printjust the 10th line of thefile.\r\n\r\n<strong class="example">Example:\r\n\r\nAssume that file.txt has the following content:\r\n\r\n\r\nLine 1\r\nLine 2\r\nLine 3\r\nLine 4\r\nLine 5\r\nLine 6\r\nLine 7\r\nLine 8\r\nLine 9\r\nLine 10\r\n\r\n\r\nYour script should output the tenth line, which is:\r\n\r\n\r\nLine 10\r\n\r\n\r\n<div class="spoilers">Note:<br />\r\n1. If the file contains less than 10 lines, what should you output?<br />\r\n2. There&#39;s at least three different solutions. Try to explore all possibilities.</div>\r\n\n"test_case": [\n  Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\\nLine 9\\nLine 10\n],\n"test_case_output": [],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a text file file.txt, transpose its content.\nYou may assume that each row has the same number of columns, and each field is separated by the &#39; &#39; character.\n<strong class="example">Example:\nIf file.txt has the following content:\nname age\nalice 21\nryan 30\nOutput the following:\nname alice ryan\nage 21 30\n\n"test_case": [\n  a\n],\n"test_case_output": [],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Easy along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nGiven a text file file.txt that contains a list of phone numbers (one per line), write a one-liner bash script to print all valid phone numbers.\nYou may assume that a valid phone number must appear in one of the following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)\nYou may also assume each line in the text file must not contain leading or trailing white spaces.\n<strong class="example">Example:\nAssume that file.txt has the following content:\n987-123-4567\n123 456 7890\n(123) 456-7890\nYour script should output the following valid phone numbers:\n987-123-4567\n(123) 456-7890\n\n"test_case": [\n  0\n],\n"test_case_output": [],\n"test_case_explanation": []\n}',
'inputs': '<s>### Instruction:\nGenerate a DSA question for topic: array with difficulty: Medium along with 3 test cases with their expected output and explanation. Your response must be in a JSON object Format.\n\n### Response:\nWrite a bash script to calculate the <span data-keyword="frequency-textfile">frequency</span> of each word in a text file words.txt.\nFor simplicity sake, you may assume:\n<ul>\n\t<li>words.txt contains only lowercase characters and space &#39; &#39; characters.</li>\n\t<li>Each word must consist of lowercase characters only.</li>\n\t<li>Words are separated by one or more whitespace characters.</li>\n</ul>\n<strong class="example">Example:\nAssume that words.txt has the following content:\nthe day is sunny the the\nthe sunny is is\nYour script should output the following, sorted by descending frequency:\nthe 4\nis 3\nsunny 2\nday 1\nNote:\n<ul>\n\t<li>Don&#39;t worry about handling ties, it is guaranteed that each word&#39;s frequency count is unique.</li>\n\t<li>Could you write it in one-line using <a href="http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-4.html">Unix pipes</a>?</li>\n</ul>\n\n"test_case": [\n  a\n],\n"test_case_output": [],\n"test_case_explanation": []\n}',
  }]
  epo=1
  count=0
  while(count<epo):
    print(f"iteration{count+1}")
    new_model_adapter.fine_tune(samples=sample)
    count=count+1
    completion=new_model_adapter.complete(query=sample_query,max_generated_token_count=500).generated_output
    print(completion)
if __name__=="__main__":
  main()





